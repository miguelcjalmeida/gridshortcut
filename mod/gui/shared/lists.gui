######################################################
############## LIST TYPES AND TEMPLATES ##############
######################################################

template default_character_list_overlay
{
    modify_texture = {
        texture = "gfx/interface/buttons/button_standard_overlay.dds"
        spriteType = Corneredstretched
        spriteborder = { 3 3 }
        blend_mode = overlay
    }
}

template character_age_or_death_text
{
    hbox = {
        block "list_layout" {
            minimumsize = { 62 0 }
            expand = {}
        }

        margin_right = 5
        spacing = 2

        text_single = {
            text = "[Character.GetAge]"
            align = nobaseline
        }

        icon = {
            visible = "[Not(Character.IsDeadAndValid)]"
            size = { 23 23 }
            framesize = { 60 60 }
            frame = "[Character.GetHealthIconFrame]"
            texture = "gfx/interface/icons/icon_health.dds"
            tooltip = "[Character.GetHealthInfo]"
        }

        icon = {
            name = "is_dead"
            visible = "[Character.IsDeadAndValid]"
            size = { 23 23 }

            texture = "[Character.GetDeathReasonIcon]"
            tooltip = "CHARACTER_DEAD_TOOLTIP"
        }
    }
}

types Lists
{
    # Implementation details
    type character_list_arrow = highlight_icon
    {
        parentanchor = left|vcenter
        position = { -14 0 }

        size = { 14 14 }
        framesize  = { 14 28 }
        texture = "gfx/interface/buttons/button_entry_characterlist_arrow.dds"

        gfxtype = togglepushbuttongfx
        effectname = "NoHighlight"

        spriteType = Corneredstretched
        spriteborder = { 20 20 }
    }

    ## Character List Items
    type widget_character_list_item = widget {
        datacontext = "[CharacterListItem.GetCharacter]"
        size = { 10 110 }

        block "divider" {
            divider = {
                parentanchor = bottom|hcenter
                size = { 100% 3 }
            }
        }

        block "widget" {}

        hbox = {
            margin = { 0 5 }
            spacing = 15

            portrait_head_small_cached = {}

            button_standard = {
                layoutpolicy_horizontal = expanding
                layoutpolicy_vertical = expanding

                onclick = "[CharacterListItem.OnClick('character')]"
                enabled = "[CharacterListItem.IsSelectable]"

                framesize = { 249 78 }
                spriteType = Corneredtiled
                spriteborder = { 20 20 }
                texture = "gfx/interface/buttons/button_entry_characterlist.dds"

                block "button" {}

                character_list_arrow = {
                    name = "character_list_arrow"
                }

                block "overlay" {
                    using = default_character_list_overlay
                }

                block "button_content"
                {
                    hbox = {
                        layoutpolicy_horizontal = expanding
                        layoutpolicy_vertical = expanding

                        vbox = {
                            layoutpolicy_horizontal = expanding
                            layoutpolicy_vertical = expanding

                            # Name and age
                            vbox = {
                                layoutpolicy_horizontal = expanding
                                layoutpolicy_vertical = expanding
                                margin_left = 10

                                text_single = {
                                    layoutpolicy_horizontal = expanding
                                    using = Font_Size_Medium
                                    autoresize = no

                                    text = "[Character.GetUINameNoTooltip]"
                                }

                                hbox = {
                                    layoutpolicy_horizontal = expanding
                                    layoutpolicy_vertical = expanding

                                    using = character_age_or_death_text
                                    blockoverride "list_layout" {}

                                    block "character_relation"
                                    {
                                        text_single = {
                                            name = "character_relation"
                                            layoutpolicy_horizontal = expanding
                                            text = "|  [Character.GetRelationToString( GetPlayer )]"
                                            default_format = "#low"
                                            autoresize = no
                                            align = nobaseline
                                            visible = "[Character.HasRelationTo( GetPlayer )]"
                                        }

                                        expand = {
                                            visible = "[Not(Character.HasRelationTo( GetPlayer ))]"
                                        }
                                    }
                                }
                            }

                            # Dynasty
                            hbox = {
                                layoutpolicy_horizontal = expanding
                                layoutpolicy_vertical = expanding
                                margin_left = 5

                                widget = {
                                    size = { 45 60 }

                                    coa_house_small = {
                                        datacontext = "[Character.GetHouse]"
                                        scale = 0.7
                                    }
                                }

                                # Traits

                                fixedgridbox = {
                                    name = "traits_grid"
                                    datamodel = "[CharacterListItem.GetTraits]"
                                    flipdirection = yes
                                    size = { 150 60 }
                                    addcolumn = 30
                                    addrow = 45
                                    maxhorizontalslots = 8
                                    maxverticalslots = 1

                                    item = {
                                        container = {
                                            visible = "[Trait.IsValid]"

                                            icon_trait = {
                                                blockoverride "icon_size"
                                                {
                                                    size = { 30 30 }
                                                }

                                                blockoverride "tooltip_placement"
                                                {
                                                    using = tooltip_se
                                                }

                                                blockoverride "glow"
                                                {
                                                    glow = {
                                                        visible = "[Or(Trait.IsGenetic(), Trait.IsInheritable())]"
                                                        color = { 0.4 0.5 0.65 1 }
                                                        glow_radius = 3
                                                        using = Glow_Standard
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                block "bottom_middle_box" {
                                    expand  = {}
                                }

                            }
                        }

                        expand = {}

                        vbox = {
                            minimumsize = { 200 0 }
                            datacontext = "[CharacterListItem.GetCharacter]"
                            layoutpolicy_vertical = expanding
                            margin_top = 5
                            margin_right = 5

                            # Skills
                            hbox = {
                                name = "skills_grid"
                                layoutpolicy_horizontal = expanding

                                expand = {}

                                datamodel = "[CharacterListItem.GetSkillItems]"
                                margin_right = 5

                                item = {
                                    widget = {
                                        size = { 32 25 }

                                        text_single = {
                                            name = "value"
                                            parentanchor = center
                                            margin_bottom = 4
                                            align = center
                                            text = "[SkillItem.GetValue]"
                                            tooltip = "[SkillItem.GetName]"
                                        }

                                        background = {
                                            name = "skill_icon_bg"
                                            texture = "gfx/interface/character_view/character_view_skills_bg.dds"
                                            framesize = { 70 26 }
                                            margin = { 5 0 }

                                            block "bg"
                                            {
                                                frame = "[SkillItem.GetFrame]"
                                            }
                                        }

                                    }
                                }
                            }

                            expand = {}

                            block "bottom_right_box"
                            {
                                hbox = {
                                    layoutpolicy_horizontal = expanding
                                    layoutpolicy_vertical = expanding

                                    # Realm
                                    widget = {
                                        size = {55 58 }
                                        visible = "[Not( IsDataModelEmpty( CharacterListItem.GetTitleItems ) )]"

                                        block "claims_visibility" {}

                                        datacontext = "[CharacterListItem.GetFirstClaim]"

                                        coa_title_tiny_crown = {
                                            using = tooltip_ne
                                            datacontext = "[Claim.GetTitle]"

                                            highlight_icon = {
                                                name = "pressed_claim"
                                                visible = "[And(Claim.IsPressed, Not(Claim.IsImplicit))]"
                                                texture = "gfx/interface/icons/icon_claim_pressed.dds"
                                                size = { 24 24 }
                                                parentanchor = bottom|right
                                            }

                                            highlight_icon = {
                                                name = "unpressed_claim"
                                                visible = "[And(Not(Claim.IsPressed), Not(Claim.IsImplicit))]"
                                                texture = "gfx/interface/icons/icon_claim_unpressed.dds"
                                                size = { 24 24 }
                                                parentanchor = bottom|right
                                            }

                                            highlight_icon = {
                                                name = "implicit_claim"
                                                visible = "[Claim.IsImplicit]"
                                                texture = "gfx/interface/icons/icon_claim_implicit.dds"
                                                size = { 24 24 }
                                                parentanchor = bottom|right
                                            }

                                            blockoverride "coa_tooltip"
                                            {
                                                tooltip = "CHARACTER_LIST_CLAIM_TOOLTIP"
                                            }
                                        }

                                        text_single = {
                                            align = right
                                            minimumsize = { 15 0 }
                                            parentanchor = vcenter|right
                                            text = "[CharacterListItem.GetTitleItemCount]"
                                            tooltip = "CHARACTER_LIST_CLAIM_TOOLTIP"
                                        }
                                    }

                                    expand = {}

                                    # Religion
                                    icon = {
                                        name = "faith_button"
                                        size = { 35 35 }
                                        datacontext = "[Character.GetFaith]"
                                        tooltipwidget = { faith_tooltip = {} }
                                        texture = "[Faith.GetIcon]"
                                    }

                                    widget = {
                                        datacontext = "[Character.GetCulture]"
                                        size = { 120 24 }

                                        tooltipwidget = {
                                            culture_tooltip = {}
                                        }
                                        using = tooltip_se

                                        hbox = {
                                            layoutpolicy_horizontal = expanding
                                            spacing = 3
                                            icon = {
                                                name = "culture"
                                                texture = "gfx/interface/icons/icon_culture.dds"
                                                size = { 24 24 }
                                            }

                                            text_multi = {
                                                layoutpolicy_horizontal = expanding
                                                min_width = 95
                                                max_width = 95
                                                autoresize = yes
                                                text = "[Culture.GetNameNoTooltip]"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    type widget_character_list_item_finder = widget {
        datacontext = "[CharacterListItem.GetCharacter]"
        size = { 200 94 }

        background = {
            visible = "[CharacterListItem.HasEvenOrderIndex]"
            using = Background_Area_Dark
            margin_top = -4
            margin_bottom = 2
            alpha = 0.5
        }

        block "divider" {}

        block "widget" {}

        hbox = {
            layoutpolicy_horizontal = expanding

            portrait_head_small_cached = {}

            block "button_content"
            {
                hbox = {
                    layoutpolicy_horizontal = expanding
                    layoutpolicy_vertical = expanding
                    margin_top = 5

                    vbox = {
                        layoutpolicy_horizontal = expanding
                        layoutpolicy_vertical = expanding

                        # Name and age
                        hbox = {
                            layoutpolicy_horizontal = expanding
                            margin = { 0 3 }
                            margin_left = 5
                            margin_right = 5

                            background = {
                                using = Background_Area_Characterlist
                            }

                            background = {
                                using = Background_Area_Dark

                                modify_texture = {
                                    texture = "gfx/interface/tiles/stretch_bottom_fade.dds"
                                    blend_mode = alphamultiply
                                    alpha = 1
                                    rotate_uv = -90
                                }
                            }

                            hbox = {
                                margin_left = 3
                                layoutpolicy_horizontal = expanding
                                maximumsize = { 338 -1 }

                                text_single = {
                                    using = Font_Size_Medium
                                    layoutpolicy_horizontal = expanding
                                    align = nobaseline
                                    text = "[Character.GetUINameNoTooltip]"
                                    autoresize = no
                                    fontsize_min = 14
                                }

                                block "character_relation"
                                {
                                    hbox = {
                                        visible = "[And(Character.HasRelationTo( GetPlayer ), Not(Character.IsPlayer))]"
                                        text_single = {
                                            text = "•"
                                            align = nobaseline
                                            margin = { 5 0 }
                                        }

                                        text_single = {
                                            name = "character_relation"
                                            text = "[Character.GetRelationToString( GetPlayer )]"
                                            default_format = "#low"
                                            align = nobaseline
                                            fontsize_min = 14
                                            max_width = 180
                                        }
                                    }
                                }

                                expand = {}
                            }

                            hbox = {
                                using = character_age_or_death_text
                            }

                            # Skills
                            hbox_skills_grid = {}
                        }

                        ### BOTTOM ROW ###
                        hbox = {
                            layoutpolicy_horizontal = expanding
                            layoutpolicy_vertical = expanding

                            # Dynasty
                            widget = {
                                size = { 45 40 }

                                coa_house_small = {
                                    datacontext = "[Character.GetHouse]"
                                    parentanchor = center
                                    scale = 0.7
                                }
                            }

                            # Traits
                            hbox = {
                                layoutpolicy_vertical = expanding
                                margin = { 10 0 }
                                minimumsize = { 140 0 } #### needed for prison view

                                background = {
                                    using = Background_Area_Dark
                                    alpha = 0.5
                                    margin = { 0 2 }
                                }

                                fixedgridbox = {
                                    name = "traits_grid"
                                    datamodel = "[CharacterListItem.GetTraits]"
                                    datamodel_reuse_widgets = yes
                                    flipdirection = yes
                                    layoutpolicy_horizontal = expanding
                                    layoutpolicy_vertical = expanding
                                    addcolumn = 30
                                    addrow = 28

                                    block "gridbox_items"
                                    {
                                        datamodel_wrap = 4
                                        maxverticalslots = 2
                                    }

                                    item = {
                                        icon_trait = {
                                            visible = "[Trait.IsValid]"

                                            blockoverride "icon_size"
                                            {
                                                size = { 30 30 }
                                            }

                                            blockoverride "tooltip_placement"
                                            {
                                                using = tooltip_se
                                            }

                                            blockoverride "glow"
                                            {
                                                glow = {
                                                    visible = "[Or(Trait.IsGenetic(), Trait.IsInheritable())]"
                                                    color = { 0.4 0.5 0.65 1 }
                                                    glow_radius = 3
                                                    using = Glow_Standard
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            vbox = {
                                datacontext = "[CharacterListItem.GetCharacter]"
                                layoutpolicy_horizontal = expanding
                                layoutpolicy_vertical = expanding

                                block "bottom_right_box"
                                {
                                    hbox = {
                                        layoutpolicy_horizontal = expanding
                                        layoutpolicy_vertical = expanding

                                        widget_list_claims = {}

                                        # Religion
                                        hbox = {
                                            layoutpolicy_horizontal = expanding
                                            layoutpolicy_vertical = expanding
                                            margin_left = 8
                                            spacing = 5

                                            background = {
                                                using = Background_Area_Dark
                                                alpha = 0.5
                                                margin = { 0 2 }
                                            }

                                            icon = {
                                                name = "faith_button"
                                                size = { 38 38 }
                                                datacontext = "[Character.GetFaith]"
                                                tooltipwidget = { faith_tooltip = {} }
                                                using = tooltip_se

                                                texture = "[Faith.GetIcon]"
                                            }

                                            hbox = {
                                                datacontext = "[Character.GetCulture]"
                                                layoutpolicy_horizontal = expanding
                                                spacing = 3

                                                tooltipwidget = {
                                                    culture_tooltip = {}
                                                }
                                                using = tooltip_se

                                                icon = {
                                                    name = "culture"
                                                    texture = "gfx/interface/icons/icon_culture.dds"
                                                    size = { 24 24 }
                                                }

                                                text_single = {
                                                    layoutpolicy_horizontal = expanding
                                                    text = "[Culture.GetNameNoTooltip]"
                                                    autoresize = no
                                                    align = nobaseline
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    type dropDown_sort = dropDown {
        name = "sort_options"
        shortcut = "character_sort_criterias"
        size = { 225 33 }

        active_item = {
            widget = {
                alwaystransparent = no
                size = { 100% 100% }

                button_drop = {                    
                    block "text_button_drop" {
                        text = "[CharacterListSortItem.GetName]"
                    }
                }
            }
        }

        item = {
            widget = {
                alwaystransparent = no
                size = { 215 33 }

                button_normal = {
                    size = { 100% 30 }
                    button_trigger = none
                    gfxtype = framedbuttongfx
                    effectname = "NoHighlight"
                    shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
                    upframe = 1
                    overframe = 2
                    downframe = 3
                    disableframe = 1
                    texture = "gfx/interface/character_interaction/interaction_menu_button.dds"
                    framesize = { 317 30 }
                }

                button_dropdown = {
                    size = { 215 30 }
                    block "text_button_dropdown" {
                        text = "[CharacterListSortItem.GetName]"
                    }
                }
            }
        }

        list = {
            scrollarea = {
                position = { 5 33 }
                maximumsize = { 215 250 }
                autoresizescrollarea = yes
                scrollbarpolicy_horizontal = always_off

                using = Background_DropDown

                scrollwidget = {
                    dynamicgridbox = {
                        alwaystransparent = no
                    }
                }

                scrollbar_vertical = {
                    using = Scrollbar_Vertical
                }
            }
        }
    }

    type widget_list_claims = widget {
        datacontext = "[CharacterListItem.GetFirstClaim]"
        layoutpolicy_vertical = expanding
        size = { 55 0 }

        block "claims_visibility" {}

        coa_title_tiny_crown = {
            visible = "[Not( IsDataModelEmpty( CharacterListItem.GetTitleItems ) )]"
            parentanchor = center
            position = { -10 0 }
            scale = 0.8

            tooltip = "CHARACTER_LIST_CLAIM_TOOLTIP"
            using = tooltip_ne

            blockoverride "coa_button" {
                datacontext = "[Claim.GetTitle]"
                onclick = "[DefaultOnCoatOfArmsClick(Title.GetID)]"
                onrightclick = "[DefaultOnCoatOfArmsRightClick(Title.GetID)]"
                button_ignore = none
            }

            highlight_icon = {
                name = "pressed_claim"
                visible = "[And(Claim.IsPressed, Not(Claim.IsImplicit))]"
                texture = "gfx/interface/icons/icon_claim_pressed.dds"
                size = { 24 24 }
                parentanchor = bottom|right
            }

            highlight_icon = {
                name = "unpressed_claim"
                visible = "[And(Not(Claim.IsPressed), Not(Claim.IsImplicit))]"
                texture = "gfx/interface/icons/icon_claim_unpressed.dds"
                size = { 24 24 }
                parentanchor = bottom|right
            }

            highlight_icon = {
                name = "implicit_claim"
                visible = "[Claim.IsImplicit]"
                texture = "gfx/interface/icons/icon_claim_implicit.dds"
                size = { 24 24 }
                parentanchor = bottom|right
            }
        }

        text_single = {
            visible = "[CharacterListItem.HasTitleItems]"
            parentanchor = center
            position = { 18 0 }
            text = "[CharacterListItem.GetTitleItemCount]"
            default_format = "#high"
            using = Font_Size_Medium
            align = center
        }

        tooltip = "CHARACTER_LIST_CLAIM_TOOLTIP"
    }

    type hbox_skills_grid = hbox {
        name = "skills_grid"
        minimumsize = { 160 0 }
        datamodel = "[CharacterListItem.GetSkillItems]"

        item = {
            widget = {
                size = { 32 25 }

                text_single = {
                    name = "value"
                    parentanchor = center
                    margin_bottom = 4
                    align = center
                    text = "[SkillItem.GetValue]"
                    tooltip = "[SkillItem.GetName]"
                }

                background = {
                    name = "skill_icon_bg"
                    texture = "gfx/interface/character_view/character_view_skills_bg.dds"
                    framesize = { 70 26 }
                    margin = { 5 0 }

                    block "bg"
                    {
                        frame = "[SkillItem.GetFrame]"
                    }
                }
            }
        }
    }

    type hbox_list_sort_buttons = hbox {
        name = "sort_buttons"
        margin_left = 5
        margin_right = 20
        margin_top = 5
        spacing = 5

        button_standard = {
            name = "filters"
            shortcut = "character_open_filter"
            size = { 25 25 }

            down = "[CharacterSelectionList.FiltersShown]"
            frame = "[BoolTo1And2(CharacterSelectionList.IsAllDefault)]"
            onclick = "[CharacterSelectionList.OnToggleFilters]"

            tooltip = "TOGGLE_FILTERS"
            using = tooltip_nw

            button_search = {
                alwaystransparent = yes
                parentanchor = center
                size = { 20 20 }
            }

            block "filters_visible" {}
        }

        button_standard = {
            name = "sort_order"
            shortcut = "character_reverse_sort"
            size = { 25 25 }
            onclick = "[CharacterSelectionList.RevertSortOrder]"

            tooltip = "CHARACTER_SORT_BY"
            using = tooltip_nw

            icon = {
                alwaystransparent = yes
                parentanchor = center
                size = { 25 25 }
                texture = "gfx/interface/buttons/button_sort_icon.dds"
                framesize = { 33 33 }
                frame = "[BoolTo1And2(CharacterSelectionList.GetSortOrder)]"
            }
        }

        dropDown_sort = {}

        expand = {}

        block "skill_sort_buttons"
        {
            hbox = {
                button_normal = {
                    name = "skill_diplomacy"
                    shortcut = "character_sort_by_diplomacy"
                    texture = "gfx/interface/icons/icon_skills.dds"
                    size = { 32 32 }
                    framesize = { 60 60 }
                    frame = 1
                    onclick = "[CharacterSelectionList.SortBySkill('(int32)0')]"

                    tooltip = "SORT_BY_DIPLOMACY"
                    using = tooltip_below

                    skillitem_sort_icon = {
                        visible = "[CharacterSelectionList.IsSortingBySkill('(int32)0')]"
                        frame = "[BoolTo1And2(CharacterSelectionList.GetSortOrder)]"
                        using = Master_Button_Modify_Texture
                        blockoverride "master_color_frame" {
                            frame = 4
                        }
                    }
                }

                button_normal = {
                    name = "skill_martial"
                    shortcut = "character_sort_by_martial"
                    texture = "gfx/interface/icons/icon_skills.dds"
                    size = { 32 32 }
                    framesize = { 60 60 }
                    frame = 2

                    onclick = "[CharacterSelectionList.SortBySkill('(int32)1')]"

                    tooltip = "SORT_BY_MARTIAL"
                    using = tooltip_below

                    skillitem_sort_icon = {
                        visible = "[CharacterSelectionList.IsSortingBySkill('(int32)1')]"
                        frame = "[BoolTo1And2(CharacterSelectionList.GetSortOrder)]"
                        using = Master_Button_Modify_Texture
                        blockoverride "master_color_frame" {
                            frame = 4
                        }
                    }
                }

                button_normal = {
                    name = "skill_stewardship"
                    shortcut = "character_sort_by_stewardship"
                    texture = "gfx/interface/icons/icon_skills.dds"
                    size = { 32 32 }
                    framesize = { 60 60 }
                    frame = 3

                    onclick = "[CharacterSelectionList.SortBySkill('(int32)2')]"
                    tooltip = "SORT_BY_STEWARDSHIP"
                    using = tooltip_below

                    skillitem_sort_icon = {
                        visible = "[CharacterSelectionList.IsSortingBySkill('(int32)2')]"
                        frame = "[BoolTo1And2(CharacterSelectionList.GetSortOrder)]"
                        using = Master_Button_Modify_Texture
                        blockoverride "master_color_frame" {
                            frame = 4
                        }
                    }
                }

                button_normal = {
                    name = "skill_intrigue"
                    shortcut = "character_sort_by_intrigue"
                    texture = "gfx/interface/icons/icon_skills.dds"
                    size = { 32 32 }
                    framesize = { 60 60 }
                    frame = 4

                    onclick = "[CharacterSelectionList.SortBySkill('(int32)3')]"
                    tooltip = "SORT_BY_INTRIGUE"
                    using = tooltip_below

                    skillitem_sort_icon = {
                        visible = "[CharacterSelectionList.IsSortingBySkill('(int32)3')]"
                        frame = "[BoolTo1And2(CharacterSelectionList.GetSortOrder)]"
                        using = Master_Button_Modify_Texture
                        blockoverride "master_color_frame" {
                            frame = 4
                        }
                    }
                }

                button_normal = {
                    name = "skill_learning"
                    shortcut = "character_sort_by_learning"
                    texture = "gfx/interface/icons/icon_skills.dds"
                    size = { 32 32 }
                    framesize = { 60 60 }
                    frame = 5

                    onclick = "[CharacterSelectionList.SortBySkill('(int32)4')]"
                    tooltip = "SORT_BY_LEARNING"
                    using = tooltip_below

                    skillitem_sort_icon = {
                        visible = "[CharacterSelectionList.IsSortingBySkill('(int32)4')]"
                        frame = "[BoolTo1And2(CharacterSelectionList.GetSortOrder)]"
                        using = Master_Button_Modify_Texture
                        blockoverride "master_color_frame" {
                            frame = 4
                        }
                    }
                }
            }
        }
    }

    type skillitem_sort_icon = icon {
        alwaystransparent = yes
        parentanchor = top|hcenter
        position = { 0 -10 }
        texture = "gfx/interface/buttons/button_sort_toggle.dds"
        framesize = { 36 36 }
        size = { 18 18 }
    }

    type vbox_character_list = vbox {
        name = "character_list"
        spacing = 3

        block "sort_buttons"
        {
            hbox_list_sort_buttons = {
                layoutpolicy_horizontal = expanding
            }
        }

        block "special_character" {}

        scrollbox = {
            name = "characters_scroll_area"
            layoutpolicy_vertical = expanding
            layoutpolicy_horizontal = expanding

            blockoverride "scrollbox_content" {

                block "container_implementation" {
                    vbox = {
                        name = "characters_grid"
                        datamodel = "[CharacterSelectionList.GetList]"
                        visible = "[Not(CharacterSelectionList.IsBuildingList)]"
                        layoutpolicy_horizontal = expanding

                        item = {
                            widget_character_list_item = {
                                block "item_size" {
                                    size = { 650 110 }
                                    layoutpolicy_horizontal = expanding
                                }
                            }
                        }
                    }
                }
            }

            blockoverride "scrollbox_empty"
            {
                block "scrollbox_empty_visibility"
                {
                    layoutpolicy_vertical = expanding
                    visible = "[IsDataModelEmpty( CharacterSelectionList.GetList )]"
                    text = "NO_CHARACTERS_TO_SELECT"
                }
            }
        }

        block "character_count"
        {
            hbox = {
                layoutpolicy_horizontal = growing
                margin = { 15 5 }
                margin_bottom = 10
                spacing = 5

                block "bottom_bar" {}

                expand = {}

                widget = {
                    size = { 20 15 }

                    icon = {
                        size = { 20 20 }
                        visible = "[Not( CharacterSelectionList.IsAllDefault )]"
                        tooltip = "CHARACTER_FINDER_FILTER_SET"
                        texture = "gfx/interface/icons/icon_warning.dds"
                    }
                }

                text_single = {
                    name = "character_count"
                    datacontext = "[CharacterSelectionList]"
                    text = "CHARACTER_FINDER_COUNT"
                    default_format = "#low"
                }
            }
        }
    }

    type widget_courtier_item = widget {
        size = { 0 125 }

        hbox = {
            layoutpolicy_horizontal = expanding
            margin_right = 10
            spacing = 5

            background = {
                using = Background_Area_With_Header
            }

            portrait_head = {}

            vbox = {
                layoutpolicy_horizontal = expanding
                layoutpolicy_vertical = expanding
                margin_top = 3

                hbox = {
                    layoutpolicy_horizontal = expanding

                    text_single = {
                        name = "name"
                        layoutpolicy_horizontal = expanding
                        autoresize = no
                        text = "[Character.GetUINameNoTooltip]"
                        using = Font_Size_Medium
                        align = nobaseline
                        fontsize_min = 14
                        margin_right = 10
                    }

                    hbox_skills_grid = {}
                }

                vbox = {
                    layoutpolicy_horizontal = expanding
                    margin = { 0 3 }
                    margin_bottom = 8

                    hbox = {
                        layoutpolicy_horizontal = expanding
                        spacing = 3

                        icon = {
                            visible = "[Character.CourtierWantsToLeaveCourt]"
                            size = { 20 20 }
                            texture = "gfx/interface/icons/icon_warning.dds"
                            tooltip = "[Character.GetCourtierLeaveDescription]"
                        }

                        icon = {
                            visible = "[InDebugMode]"
                            size = { 20 20 }
                            texture = "gfx/interface/icons/icon_bg_small.dds"
                            tooltip = "#D [Character.GetDebugCourtierLeaveReasons]#!"
                        }

                        text_single = {
                            name = "relation_to_court_owner"
                            layoutpolicy_horizontal = expanding
                            default_format = "#low"
                            autoresize = no
                            align = nobaseline

                            block "description_relation_text" {
                                text = "[Character.GetRelationToString( CharacterWindow.GetCourtOwner )]"
                            }

                            background = {
                                visible = "[Character.IsImprisoned]"
                                using = Status_Bad
                                alpha = 0.5
                            }
                        }

                        expand = {}
                    }
                }

                hbox = {
                    layoutpolicy_horizontal = expanding
                    spacing = 5
                    margin_bottom = 5

                    block "action_buttons"
                    {
                        hbox = {
                            margin = { 0 3 }
                            spacing = 5

                            button_round  = {
                                visible = "[Character.IsPlayerInteractionShown('recruit_guest_interaction')]"
                                enabled = "[Character.IsPlayerInteractionValid('recruit_guest_interaction')]"
                                onclick = "[Character.OpenPlayerInteraction('recruit_guest_interaction')]"
                                tooltip = "[Character.GetPlayerInteractionTooltip('recruit_guest_interaction')]"

                                button_add_character = {
                                    alwaystransparent = yes
                                    parentanchor = center
                                }
                            }
                        }
                    }

                    hbox = {
                        layoutpolicy_horizontal = expanding
                        layoutpolicy_vertical = expanding
                        minimumsize = { 0 60 }
                        margin_left = 5

                        background = {
                            using = Background_Area_Dark
                            margin = { 3 3 }
                            alpha = 0.5
                        }

                        # Dynasty
                        widget = {
                            layoutpolicy_vertical = expanding
                            size = { 45 40 }

                            coa_house_small = {
                                datacontext = "[Character.GetHouse]"
                                parentanchor = center
                                scale = 0.7
                            }
                        }

                        # Traits
                        vbox = {
                            layoutpolicy_vertical = expanding
                            margin = { 10 0 }

                            fixedgridbox = {
                                name = "traits_grid_5"
                                datamodel = "[CharacterListItem.GetTraits]"
                                visible = "[Not( IsDataModelEmpty( CharacterListItem.GetTitleItems ) )]"
                                flipdirection = yes
                                addcolumn = 30
                                addrow = 28

                                block "gridbox_items"
                                {
                                    datamodel_wrap = 5
                                    maxverticalslots = 2
                                }

                                item = {
                                    icon_trait = {
                                        visible = "[Trait.IsValid]"

                                        blockoverride "icon_size"
                                        {
                                            size = { 30 30 }
                                        }

                                        blockoverride "tooltip_placement"
                                        {
                                            using = tooltip_se
                                        }

                                        blockoverride "glow"
                                        {
                                            glow = {
                                                visible = "[Or(Trait.IsGenetic(), Trait.IsInheritable())]"
                                                color = { 0.4 0.5 0.65 1 }
                                                glow_radius = 3
                                                using = Glow_Standard
                                            }
                                        }
                                    }
                                }
                            }

                            fixedgridbox = {
                                name = "traits_grid_7"
                                datamodel = "[CharacterListItem.GetTraits]"
                                visible = "[IsDataModelEmpty( CharacterListItem.GetTitleItems )]"
                                flipdirection = yes
                                addcolumn = 30
                                addrow = 28

                                block "gridbox_items"
                                {
                                    datamodel_wrap = 7
                                    maxverticalslots = 2
                                }

                                item = {
                                    icon_trait = {
                                        visible = "[Trait.IsValid]"

                                        blockoverride "icon_size"
                                        {
                                            size = { 30 30 }
                                        }

                                        blockoverride "tooltip_placement"
                                        {
                                            using = tooltip_se
                                        }

                                        blockoverride "glow"
                                        {
                                            glow = {
                                                visible = "[Or(Trait.IsGenetic(), Trait.IsInheritable())]"
                                                color = { 0.4 0.5 0.65 1 }
                                                glow_radius = 3
                                                using = Glow_Standard
                                            }
                                        }
                                    }
                                }
                            }

                            expand = {}
                        }

                        expand = {}

                        divider_light = {
                            layoutpolicy_vertical = expanding
                            alpha = 0.5
                        }

                        hbox = {
                            margin = { 3 0 }

                            widget_list_claims = {
                                visible = "[Not( IsDataModelEmpty( CharacterListItem.GetTitleItems ) )]"
                            }
                        }

                        divider_light = {
                            visible = "[Not( IsDataModelEmpty( CharacterListItem.GetTitleItems ) )]"
                            layoutpolicy_vertical = expanding
                            alpha = 0.5
                        }

                        hbox = {
                            margin = { 5 0 }
                            button_religion_icon = {
                                datacontext = "[Character.GetFaith]"
                                size = { 40 40 }
                            }
                        }
                    }
                }
            }
        }
    }

    type widget_vassal_list_item = widget {
        datacontext = "[CharacterListItem.GetCharacter]"
        size = { 200 180 }

        vbox = {
            layoutpolicy_horizontal = expanding
            layoutpolicy_vertical = expanding
            margin = { 10 5 }

            hbox = {
                layoutpolicy_horizontal = expanding
                spacing = 10

                background = {
                    using = Background_Area
                }

                portrait_head_small = {}

                vbox = {
                    layoutpolicy_horizontal = expanding
                    layoutpolicy_vertical = expanding
                    margin_right = 10

                    hbox = {
                        layoutpolicy_horizontal = expanding

                        vbox = {
                            layoutpolicy_horizontal = expanding
                            spacing = 5

                            hbox = {
                                layoutpolicy_horizontal = expanding
                                minimumsize = { 0 30 }

                                background = {
                                    using = Background_Area_Characterlist
                                    margin = { 8 0 }
                                    margin_left = 15

                                    using = Mask_Rough_Edges
                                }

                                text_single = {
                                    layoutpolicy_horizontal = expanding
                                    text = "[Character.GetUINameNoTooltip]"
                                    using = Font_Size_Medium
                                    autoresize = no
                                    fontsize_min = 13
                                    align = nobaseline
                                }
                            }

                            text_single = {
                                name = "character_relation"
                                visible = "[Character.GetLiege.IsLocalPlayer]"
                                layoutpolicy_horizontal = expanding
                                text = "[Character.GetRelationToString(GetPlayer)] "
                                default_format = "#low"
                                autoresize = no
                                fontsize_min = 13
                                align = nobaseline
                            }

                            hbox = {
                                layoutpolicy_horizontal = expanding
                                spacing = 3
                                visible = "[Not(Character.GetLiege.IsLocalPlayer)]"

                                text_single = {
                                    text = "CHARACTER_WINDOW_OPINION_OF_LIEGE"
                                }

                                text_single = {
                                    layoutpolicy_horizontal = expanding
                                    text = "[Character.GetOpinionOf( Character.GetLiege )|=]"
                                    fonttintcolor = "[Character.GetOpinionOfTint( Character.GetLiege )]"
                                }
                            }
                        }

                        block "own_vassal" {
                            vbox = {
                                layoutpolicy_vertical = expanding
                                margin_left = 10
                                visible = "[Character.GetLiege.IsLocalPlayer]"

                                hbox = {
                                    coa_title_tiny_crown = {
                                        name = "allegiance_flag"
                                        datacontext = "[VassalContract.GetTitleAllegiance]"
                                        visible = "[Title.IsValid]"
                                        tooltip = "MRW_TITLE_ALLEGIANCE"
                                        blockoverride "coa_tooltip" {}
                                    }

                                    vbox = {
                                        layoutpolicy_vertical = expanding
                                        margin_top = 5

                                        hbox = {

                                            icon = {
                                                name = "hook"
                                                visible = "[Character.PlayerHasHooksOrHookableSecrets]"
                                                size = { 25 25 }
                                                framesize = { 40 40 }
                                                texture = "gfx/interface/icons/portraits/hook_secret.dds"

                                                frame = "[Character.GetHookOrHookableSecretsFrame]"
                                                tooltip = "[Character.HookTooltip]"
                                            }

                                            icon = {
                                                name = "icon_non_dejure"
                                                visible = "[Not( VassalContract.IsRightfulLiege )]"
                                                size = { 30 30 }
                                                texture = "gfx/interface/icons/levy_tax_reduction.dds"

                                                using = tooltip_ws
                                                tooltip = "MRW_TT_NOT_RIGHTFUL_LIEGE"
                                            }
                                        }
                                        expand = {}

                                    }
                                }

                                expand = {}
                            }
                        }
                    }

                    expand = {}

                    hbox = {
                        layoutpolicy_horizontal = expanding
                        spacing = 5

                        text_single = {
                            text = "REALM_WINDOW_SIZE"
                            tooltip = "REALM_WINDOW_SIZE_TT"
                            align = nobaseline
                        }

                        text_single = {
                            visible = "[Character.IsPowerfulVassal]"
                            text = "-"
                            default_format = "#low"
                            align = nobaseline
                        }

                        text_single = {
                            visible = "[Character.IsPowerfulVassal]"
                            text = "MY_REALM_WINDOW_POWERFUL_VASSAL"
                            default_format = "#X"
                            align = nobaseline
                        }

                        hbox = {
                            layoutpolicy_horizontal = expanding
                            spacing = 3
                            margin = { 10 0 }

                            block "own_vassal"
                            {
                                visible = no
                            }

                            icon = {
                                size = { 22 22 }
                                texture = "gfx/interface/icons/icon_soldier.dds"
                            }

                            text_single = {
                                layoutpolicy_horizontal = expanding
                                text = "[Character.GetMilitaryStrengthText]"
                                align = nobaseline
                                default_format = "#high"
                            }
                        }

                        expand = {}

                        hbox_skills_grid = {}
                    }

                    expand = {}
                }
            }

            block "own_vassal"
            {
                block "feudal_contract"
                {
                    vbox = {
                        name = "feudal_info"
                        layoutpolicy_horizontal = expanding
                        margin = { 10 5 }
                        spacing = 10

                        background = {
                            using = Background_Area
                        }

                        hbox = {
                            layoutpolicy_horizontal = expanding
                            visible = "[VassalContract.UsesObligationLevels]"
                            spacing = 10


                            button_round = {
                                enabled = "[Character.IsPlayerInteractionValid('liege_modify_vassal_contract_interaction')]"
                                onclick = "[Character.OpenPlayerInteraction('liege_modify_vassal_contract_interaction')]"
                                tooltip = "[Character.GetPlayerInteractionTooltip('liege_modify_vassal_contract_interaction')]"

                                button_feudal_contract = {
                                    alwaystransparent = yes
                                    parentanchor = center
                                }
                            }

                            text_single = {
                                layoutpolicy_horizontal = expanding
                                text = "MY_REALM_WINDOW_VASSAL_OBLIGATION"
                                default_format = "#low"
                                align = nobaseline
                            }

                            expand = {}

                            vassal_contract_not_default_icon = {}
                        }

                        hbox = {
                            layoutpolicy_horizontal = expanding
                            visible = "[Not(VassalContract.UsesObligationLevels)]"
                            spacing = 5

                            icon = {
                                size = { 42 42 }
                                texture = "gfx/interface/icons/icon_cross.dds"
                                tooltip = MY_REALM_WINDOW_NO_FEUDAL_CONTRACT_TT
                            }

                            text_single = {
                                text = "[Character.GetGovernment.GetName]"
                                align = nobaseline
                            }

                            expand = {}
                        }

                        hbox = {
                            layoutpolicy_horizontal = expanding
                            spacing = 10

                            hbox = {
                                layoutpolicy_horizontal = expanding
                                spacing = 3

                                icon = {
                                    size = { 25 25 }
                                    texture = "gfx/interface/icons/icon_gold.dds"
                                }

                                widget = {
                                    layoutpolicy_horizontal = expanding

                                    background = {
                                        using = Background_Area
                                        margin = { 3 2 }
                                    }

                                    progressbar_standard_transparent = {
                                        size = "[MyRealmWindowVassalItem.GetRelativeSizeForTax]"
                                        minimumsize = { 10 0 }
                                        value = "[FixedPointToProgressbarValue(VassalContract.GetTaxRatioForLiege)]"
                                    }

                                    flowcontainer = {
                                        parentanchor = center
                                        position = { 0 -2 }
                                        spacing = 4

                                        text_single = {
                                            text = "[MyRealmWindowVassalItem.GetCachedTax|=1]"
                                        }
                                    }
                                }

                                tooltipwidget = {
                                    my_realm_window_contribution_tooltip = {
                                        datacontext = "[MyRealmWindowVassalItem.GetTaxBreakdown]"
                                        blockoverride "levy_info_visible" { visible = no }
                                        blockoverride "contribution_tooltip_header"
                                        {
                                            text = "MRW_TT_TAXES_TO_ME"
                                        }

                                        blockoverride "levy_info"
                                        {
                                            text_single = {
                                                multiline = yes
                                                maximumsize = { 250 -1 }
                                                text = "[MyRealmWindowVassalItem.GetLevyTooltip]"
                                            }
                                        }
                                    }
                                }
                                using = tooltip_ws
                            }

                            hbox = {
                                layoutpolicy_horizontal = expanding
                                spacing = 3

                                icon = {
                                    size = { 25 25 }
                                    texture = "gfx/interface/icons/icon_soldier.dds"
                                }

                                widget = {
                                    layoutpolicy_horizontal = expanding
                                    #	size = { 150 22 }

                                    background = {
                                        using = Background_Area
                                        margin = { 3 2 }
                                    }

                                    progressbar_standard_transparent = {
                                        size = "[MyRealmWindowVassalItem.GetRelativeSizeForLevies]"
                                        minimumsize = { 10 0 }
                                        value = "[FixedPointToProgressbarValue(VassalContract.GetLevyRatioForLiege)]"
                                    }

                                    flowcontainer = {
                                        parentanchor = center
                                        position = { 0 -2 }
                                        spacing = 4

                                        text_single = {
                                            text =  "[MyRealmWindowVassalItem.GetCachedLeviesFormatted]"
                                        }
                                    }
                                }

                                tooltipwidget = {
                                    my_realm_window_contribution_tooltip = {
                                        datacontext = "[MyRealmWindowVassalItem.GetLeviesBreakdown]"
                                        blockoverride "tax_info_visible" { visible = no }
                                        blockoverride "contribution_tooltip_header"
                                        {
                                            text = "MRW_TT_LEVIES_TO_ME"
                                        }
                                        blockoverride "tax_info"
                                        {
                                            text_single = {
                                                multiline = yes
                                                maximumsize = { 250 -1 }
                                                text = "[MyRealmWindowVassalItem.GetTaxTooltip]"
                                            }
                                        }
                                    }
                                }
                                using = tooltip_ws
                            }
                        }
                        expand = {}
                    }
                }
            }

            expand = {}
        }
    }
}

####################################
########### SCROLL AREA ############
####################################

## Generic scrollarea. Remember that "scrollbox_content" can only contain one child without siblings.
types Scrollbar
{

    type scrollbox = scrollarea {
        size = { 100 100 }

        scrollbarpolicy_horizontal = always_off

        scrollbar_vertical = {
            using = Scrollbar_Vertical
        }

        block "scrollbox_background"
        {
            background = {
                using = Background_Area
            }
        }

        scrollwidget = {
            block "scrollbox_replace_vbox"
            {
                vbox = {
                    block "scrollbox_margins"
                    {
                        using = Scrollbox_Margins
                    }

                    block "scrollbox_content"
                    {
                        debug_square = {}
                    }

                    text_single = {
                        default_format = "#low;italic"

                        block "scrollbox_empty"
                        {
                            visible = no
                        }
                    }

                    block "scrollbox_expand"
                    {
                        expand = {
                            layoutpolicy_vertical = growing
                        }
                    }
                }
            }
        }

        block "scrollbox_background_fade" {
            icon = {
                name = "scrollbar_fade"
                texture = "gfx/interface/tiles/scrollbar_fade.dds"
                size = { 100% 100% }
                alwaystransparent = yes

                spriteType = Corneredtiled
                spriteborder = { 0 30 }
            }
        }
    }
}

## Vertical scrollbar
template Scrollbar_Vertical
{
    scrollbar = {
        name = "vertical_scrollbar"
        size = { 12 12 }
        wheelstep = 60
        direction = vertical

        track = {
            button = {
                size = { 12 12 }
                gfxtype = buttongfx

                texture = "gfx/interface/tiles/tile_scroll_track.dds"
                spriteType = Corneredtiled
                spriteborder = { 0 3 }
                effectname = "NoHighlight"
            }
        }

        slider = {
            button = {
                gfxtype = framedbuttongfx
                effectname = "NoHighlight"

                texture = "gfx/interface/tiles/tile_scroll_slider.dds"
                spriteType = Corneredtiled
                spriteborder = { 0 3 }
                framesize = { 12 40 }

                upframe = 1
                overframe = 2
                downframe = 2

                oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"

                state = {
                    name = _mouse_press
                    start_sound = {
                        soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
                    }
                }

                state = {
                    name = _mouse_release
                    start_sound = {
                        soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
                    }
                }
            }
        }

        dec_button = {
            button = {
            }
        }

        inc_button = {
            button = {
            }
        }
    }
}

## Horizontal scrollbar
template Scrollbar_Horizontal
{
    scrollbar = {
        name = "horizontal_scrollbar"
        size = { 12 12 }
        wheelstep = 60
        direction = horizontal

        track = {
            button = {
                size = { 12 12 }
                gfxtype = buttongfx

                texture = "gfx/interface/tiles/tile_scroll_track_horizontal.dds"
                spriteType = Corneredtiled
                spriteborder = { 3 0 }
                effectname = "NoHighlight"
                intersectionmask = yes
            }
        }

        slider = {
            button = {
                gfxtype = framedbuttongfx
                effectname = "NoHighlight"

                texture = "gfx/interface/tiles/tile_scroll_slider_horizontal.dds"
                spriteType = Corneredtiled
                spriteborder = { 3 0 }
                framesize = { 40 12 }

                upframe = 1
                overframe = 2
                downframe = 2

                intersectionmask = yes
                oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"

                state = {
                    name = _mouse_press
                    start_sound = {
                        soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
                    }
                }

                state = {
                    name = _mouse_release
                    start_sound = {
                        soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
                    }
                }
            }
        }

        dec_button = {
            button = {
            }
        }

        inc_button = {
            button = {
            }
        }
    }
}
