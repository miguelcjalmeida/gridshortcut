types CharacterInteraction
{
	type icon_character_interaction = icon {
		name = "interaction_icon"
		position = { 0 -5 }
		size = { 60 60 }
		texture = "[CharacterInteractionConfirmationWindow.GetInteraction.GetIcon]"
	}

	type vbox_sender_portrait_message = vbox {
		margin = { 15 20 }

		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 15

			portrait_head = {
				name = "sender_portrait"
				datacontext = "[CharacterInteractionNotificationWindow.GetSender]"
			}

			text_multi = {
				name = "description"
				max_width = 480
				autoresize = yes
				text = "[CharacterInteractionNotificationWindow.GetNotificationText]"
			}

			expand = {}
		}

		hbox = {
			name = "signature"
			layoutpolicy_horizontal = expanding
			margin = { 20 0 }

			expand = {}

			vbox = {
				text_single = {
					name = "signed_text"
					layoutpolicy_horizontal = expanding
					margin = { 20 0 }
					text = "[CharacterInteractionNotificationWindow.GetSigned]"
				}

				text_single = {
					name = "signature"
					margin = { 20 0 }
					text = "[CharacterInteractionNotificationWindow.GetSignature]"
					align = center
				}
			}
		}
	}

	type vbox_marriage_interaction_marriage_details = vbox {
		margin = { 15 15 }

		background = {
			using = Background_Area
		}

		hbox = {
			layoutpolicy_horizontal = expanding

			icon = {
				name = "marriage_type"
				block "icon_frame"
				{
					visible = "[MatchmakerInteractionWindow.HasPickedCharacters]"
				}

				texture = "gfx/interface/icons/marriage_types.dds"
				framesize = { 60 60 }
				size = { 60 60 }
				frame = "[MarriageInfo.GetMarriageIconFrame]"
			}

			vbox = {
				layoutpolicy_horizontal = expanding

				text_multi = {
					name = "children_house_info"
					visible = "[StringIsEmpty( MarriageInfo.GetMatrilinealDesc )]"
					layoutpolicy_horizontal = expanding
					max_width = 510
					autoresize = yes
					text = "MARRIAGE_CHILDREN_HOUSE_INFO"
				}

				text_multi = {
					name = "matrilineal_desc"
					layoutpolicy_horizontal = expanding
					max_width = 510
					autoresize = yes
					text = "[MarriageInfo.GetMatrilinealDesc]"
				}

				text_multi = {
					name = "children_chance_info"
					layoutpolicy_horizontal = expanding
					max_width = 510
					autoresize = yes
					text = "MARRIAGE_CHILDREN_CHANCE_INFO"
				}
			}
		}

		### Traits
		vbox = {
			layoutpolicy_horizontal = expanding
			margin = { 5 10 }
			spacing = 5

			hbox = {
				layoutpolicy_horizontal = expanding

				text_label_center = {
					name = "traits_header"
					visible = "[MatchOffer.HasInheritableTraits]"
					text = "INHERITABLE_TRAITS"
				}

				expand = {}
			}

			text_single = {
				name = "no_traits"
				visible = "[Not(MatchOffer.HasInheritableTraits)]"
				text = "NO_INHERITABLE_TRAITS"
				default_format = "#low;italic"
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				hbox = {
					name = "traits"
					datamodel = "[MatchOffer.GetInheritableTraitItems]"
					visible = "[Not(IsDataModelEmpty(MatchOffer.GetInheritableTraitItems))]"

					item = {
						icon_trait = {
							datacontext = "[MatchmakerTraitInfo.GetTrait]"
							datacontext = "[MatchmakerTraitInfo.GetCharacter]"

							blockoverride "actual_description_text"
							{
								text = "TRAIT_ENTRY_INHERITANCE_INFO"
							}

							highlight_icon = {
								name = "guaranteed"
								visible = "[And( MatchmakerTraitInfo.IsGuaranteed, Not(MatchmakerTraitInfo.CanUpgrade) )]"
								position = { 28 30 }
								texture = "gfx/interface/icons/symbols/icon_check.dds"
								size = { 25 25 }
							}

							highlight_icon = {
								name = "upgrade"
								visible = "[MatchmakerTraitInfo.CanUpgrade]"
								texture = "gfx/interface/icons/symbols/icon_arrow_green_down.dds"
								mirror = vertical
								position = { 5 28 }
								size = { 25 25 }
							}
						}
					}
				}

				expand = {}
			}

			text_single = {
				name = "inbreeding_risk"
				visible = "[MatchOffer.HasInbreedingRisk]"
				max_width = 510
				text = "@warning_icon!#X [MatchOffer.GetInbreedingDesc]#!"
				default_format = "#low"
			}
		}

		divider_light = {
			layoutpolicy_horizontal = expanding
		}

		### Prestige
		vbox = {
			layoutpolicy_horizontal = expanding
			margin = { 5 0 }
			margin_top = 5

			hbox = {
				layoutpolicy_horizontal = expanding

				text_multi = {
					block "get_actor"
					{
						datacontext = "[MatchmakerInteractionWindow.GetActorToMatch]"
					}
					name = "prestige_desc_our"
					max_width = 510
					autoresize = yes
					text = "MARRIAGE_PRESTIGE_DESC_OUR"
					tooltip = "MARRIAGE_PRESTIGE_TOOLTIP_OUR"
				}
				

				expand = {}
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				text_multi = {
					block "get_recipient"
					{
						datacontext = "[MatchmakerInteractionWindow.GetRecipientToMatch]"
					}
					name = prestige_desc_their
					max_width = 510
					autoresize = yes
					text = "MARRIAGE_PRESTIGE_DESC_THEIR"
					default_format = "#low"
					tooltip = "MARRIAGE_PRESTIGE_TOOLTIP_THEIR"
				}

				expand = {}
			}
		}

		vbox = {
			visible = "[MarriageInfo.HasAlliances]"
			layoutpolicy_horizontal = expanding
			margin = { 0 15 }

			text_label_center = {
				name = alliances_label
				text = "[alliances|E]"
			}

			vbox = {
				name = "alliance_grid"
				datamodel = "[MarriageInfo.GetAllianceItems]"
				layoutpolicy_horizontal = expanding

				item = {
					hbox = {
						layoutpolicy_horizontal = expanding
						portrait_head = {
							datacontext = "[AllianceInfo.GetCharacter]"
							name = "ally_portrait"
							blockoverride "opinion_box" {}
							blockoverride "status_icons" {}
						}

						strength_balance = {
							datacontext = "[AllianceInfo.GetMilitaryInfo]"
							blockoverride "StrengthBalanceAllies" {}
						}

						expand = {}
					}
				}
			}
		}

		expand = {}
	}

	type vbox_concubine_interaction_details = vbox {
		margin = { 15 15 }

		background = {
			using = Background_Area
		}

		text_multi = {
			name = "children_house_info"
			layoutpolicy_horizontal = expanding
			max_width = 510
			autoresize = yes
			text = "[MatchOffer.GetChanceOfChildrenDesc]"
		}

		text_multi = {
			name = "children_chance_info"
			layoutpolicy_horizontal = expanding
			max_width = 510
			autoresize = yes
			text = "CONCUBINE_CHILDREN_HOUSE"
		}

		### Traits
		vbox = {
			margin = { 5 10 }
			spacing = 5

			text_label_center = {
				name = "traits_header"
				visible = "[MatchOffer.HasInheritableTraits]"
				#	layoutpolicy_horizontal = expanding
				text = "INHERITABLE_TRAITS"
			}

			text_single = {
				name = "no_traits"
				visible = "[Not(MatchOffer.HasInheritableTraits)]"
				text = "NO_INHERITABLE_TRAITS"
				default_format = "#low;italic"
			}

			hbox = {
				name = "traits"
				datamodel = "[MatchOffer.GetInheritableTraitItems]"
				visible = "[Not(IsDataModelEmpty(MatchOffer.GetInheritableTraitItems))]"

				item = {
					icon_trait = {
						datacontext = "[MatchmakerTraitInfo.GetTrait]"
						datacontext = "[MatchmakerTraitInfo.GetCharacter]"

						blockoverride "actual_description_text"
						{
							text = "TRAIT_ENTRY_INHERITANCE_INFO"
						}

						highlight_icon = {
							name = "guaranteed"
							visible = "[And( MatchmakerTraitInfo.IsGuaranteed, Not(MatchmakerTraitInfo.CanUpgrade) )]"
							position = { 28 30 }
							texture = "gfx/interface/icons/symbols/icon_check.dds"
							size = { 25 25 }
						}

						highlight_icon = {
							name = "upgrade"
							visible = "[MatchmakerTraitInfo.CanUpgrade]"
							texture = "gfx/interface/icons/symbols/icon_arrow_green_down.dds"
							mirror = vertical
							position = { 5 28 }
							size = { 25 25 }
						}
					}
				}
			}

			text_single = {
				name = "inbreeding_risk"
				visible = "[MatchOffer.HasInbreedingRisk]"
				max_width = 510
				text = "@warning_icon!#X [MatchOffer.GetInbreedingDesc]#!"
				default_format = "#low"
			}
		}

		divider_light = {
			layoutpolicy_horizontal = expanding
		}

		expand = {}
	}

	type vbox_list_interaction_title_selection = vbox {
		name = "titles_grid"
		datamodel = "[CharacterInteractionConfirmationWindow.GetTitles]"
		layoutpolicy_horizontal = expanding
		spacing = 3

		item = {
			widget = {
				name = "title_list_item"
				layoutpolicy_horizontal = expanding
				size = { 0 45 }

				button_standard = {
					name = "title_button"
					datacontext = "[InteractionTitleItem.GetTitle]"
					size = "[InteractionTitleItem.GetSize]"
					onclick = "[InteractionTitleItem.OnClick]"
					onrightclick = "[InteractionTitleItem.OnRightClick]"
					button_ignore = none
					down = "[InteractionTitleItem.IsSelected]"
					enabled = "[InteractionTitleItem.IsSelectable]"
					tooltip = "[InteractionTitleItem.GetTooltip]"
					using = tooltip_es
					parentanchor = right

					block "button_toggles" {
						enabled = "[InteractionTitleItem.IsSelectable]"
					}

					coa_title_tiny_crown = {
						position = { 0 -12 }
					}

					hbox = {
						margin_left = 45
						margin_right = 5

						# highlight_icon = {
						# 	texture = "gfx/interface/icons/symbols/icon_check.dds"
						# 	visible = "[InteractionTitleItem.IsSelected]"
						# 	size = { 30 30 }
						# }

						text_single = {
							name = "text"
							layoutpolicy_horizontal = expanding
							text = "[InteractionTitleItem.GetTitle.GetNameNoTooltip]"
						}

						icon = {
							name = "pressed_claim"
							visible = "[GetPlayer.HasPressedClaimOnTitle( Title.Self )]"
							size = { 24 24 }
							texture = "gfx/interface/icons/title_status/icon_claim_pressed.dds"
							tooltip = "REVOKE_TITLE_PRESSED_CLAIM"
						}

						icon = {
							name = "unpressed_claim"
							visible = "[GetPlayer.HasUnpressedClaimOnTitle( Title.Self )]"
							size = { 24 24 }
							texture = "gfx/interface/icons/title_status/icon_claim_unpressed.dds"
							tooltip = "REVOKE_TITLE_UNPRESSED_CLAIM"
						}

						icon = {
							name = "leased_out"
							visible = "[Title.HasLeasedOutVassal]"
							size = { 36 39 }
							texture = "gfx/interface/icons/icon_holding_church.dds"
							tooltip = "GRANT_TITLE_LEASED_OUT_VASSAL"
						}

						block "extra_title_items" {}
					}
				}
			}
		}
	}

	type vbox_character_interaction_three_characters = vbox {
		margin = { 10 10 }

		hbox = {
			layoutpolicy_horizontal = expanding

			### Left
			portrait_shoulders = {
				name = "left_background_portrait"
				datacontext = "[CharacterInteractionConfirmationWindow.GetActor]"
				visible = "[Character.IsValid]"
			}

			vbox = {
				visible = "[CharacterInteractionConfirmationWindow.ShouldPickSecondaryActor]"

				portrait_head = {
					datacontext = "[CharacterInteractionConfirmationWindow.GetSecondaryActor]"
				}

				change_revert_buttons = {
					blockoverride "ReplaceClick"
					{
						onclick = "[CharacterInteractionConfirmationWindow.OnChangeOrRevertActorCharacter]"
					}
					blockoverride "ReplaceVisible"
					{
						visible = "[CharacterInteractionConfirmationWindow.CanChangeActorCharacter]"
					}
					blockoverride "RevertClick"
					{
						onclick = "[CharacterInteractionConfirmationWindow.OnChangeOrRevertActorCharacter]"
					}
					blockoverride "RevertVisible"
					{
						visible = "[CharacterInteractionConfirmationWindow.CanRevertActorCharacter]"
					}
				}
			}

			### Right
			vbox = {
				visible = "[CharacterInteractionConfirmationWindow.ShouldShowSecondaryRecipient]"

				portrait_head = {
					datacontext = "[CharacterInteractionConfirmationWindow.GetSecondaryRecipient]"
				}

				change_revert_buttons = {
					blockoverride "ReplaceClick"
					{
						onclick = [CharacterInteractionConfirmationWindow.OnChangeOrRevertRecipientCharacter]
					}
					blockoverride "ReplaceVisible"
					{
						visible = [CharacterInteractionConfirmationWindow.CanChangeRecipientCharacter]
					}
					blockoverride "RevertClick"
					{
						onclick = [CharacterInteractionConfirmationWindow.OnChangeOrRevertRecipientCharacter]
					}
					blockoverride "RevertVisible"
					{
						visible = [CharacterInteractionConfirmationWindow.CanRevertRecipientCharacter]
					}
				}
			}

			portrait_shoulders = {
				name = "right_background_portrait"
				datacontext = "[CharacterInteractionConfirmationWindow.GetRecipient]"
				visible = "[And( Character.IsValid, Not( ObjectsEqual( CharacterInteractionConfirmationWindow.GetActor, CharacterInteractionConfirmationWindow.GetRecipient ) ) )]"

			}

		}


		hbox = {
			layoutpolicy_horizontal = expanding
			spacing = 10

			text_label_center = {
				text = "INTERACTION_SENDER"
				min_width = 100
			}

			text_label_center = {
				visible = "[CharacterInteractionConfirmationWindow.ShouldPickSecondaryActor]"
				text = "[CharacterInteractionConfirmationWindow.GetActorSecondaryLabel]"
				min_width = 100
			}

			text_label_center = {
				visible = "[CharacterInteractionConfirmationWindow.ShouldShowSecondaryRecipient]"
				text = "[CharacterInteractionConfirmationWindow.GetRecipientSecondaryLabel]"
				min_width = 100
			}

			text_label_center = {
				visible = "[Not( ObjectsEqual( CharacterInteractionConfirmationWindow.GetActor, CharacterInteractionConfirmationWindow.GetRecipient ) )]"
				text = "INTERACTION_RECIPIENT"
				min_width = 100
			}

		}
	}

	type widget_character_interaction_four_characters = widget {
		layoutpolicy_horizontal = expanding
		size = { 0 330 }

		block "bg_illustration_datacontext" {}

		# Temp background
		background = {
			alpha = 0.7
			#	margin = { -3 -3 }
			fittype = centercrop

			using = Mask_Rough_Edges

			block "bg_illustration"
			{
				texture = "gfx/interface/illustrations/event_scenes/corridor.dds"
			}
		}

		### LEFT
		flowcontainer = {
			parentanchor = top|left
			position = { 20 20 }
			direction = vertical

			block "left_small_portrait"
			{
				datacontext = "[CharacterInteractionConfirmationWindow.GetActor]"
				visible = "[Character.IsValid]"
			}

			portrait_head = {
				name = "left_background_portrait"
				tooltip_enabled = "[Character.IsValid]"
			}

			text_label_center = {
				parentanchor = hcenter
				text = "INTERACTION_SENDER"
			}
		}

		flowcontainer = {
			position = { -110 -15 }
			parentanchor = bottom|hcenter
			direction = vertical

			portrait_body = {
				name = "left_main_portrait"

				block "left_portrait"
				{
					datacontext = "[CharacterInteractionConfirmationWindow.GetSecondaryActor]"
				}

				tooltip_enabled = "[Character.IsValid]"

				blockoverride "status_icons" {}

				blockoverride "coa"
				{
					coa_realm_small_crown = {
						position = { 60 -5 }
						visible = "[Character.HasLandedTitles]"
						parentanchor = bottom
					}
				}

				blockoverride "portrait_button"
				{
					portrait_texture = "[Character.GetAnimatedPortrait('environment_body', 'camera_body', 'idle', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
				}

				blockoverride "portrait_glow" {}

				background = {
					using = Background_Portrait_Glow
					color = { 0.8 0.7 0.5 0.6 }

					block "left_interaction_portrait_glow"
					{
						visible = "[CharacterInteractionConfirmationWindow.IsPickingSecondaryActor]"
					}
				}
			}

			text_label_center = {
				parentanchor = hcenter
				allow_outside = yes

				block "left_character_label"
				{
					text = "[CharacterInteractionConfirmationWindow.GetActorSecondaryLabel]"
				}

				container = {
					name = "tutorial_highlight_change_left_character"
					parentanchor = vcenter
					position = { -50 0 }

					button_round  = {
						name = "tutorial_highlight_change_left_character"
						alwaystransparent = no
						tooltip = "CHANGE_CHARACTER"
						using = tooltip_below

						using = Animation_ShowHide_Quick


						block "button_left_change"
						{
							visible = "[CharacterInteractionConfirmationWindow.CanChangeActorCharacter]"
							onclick = "[CharacterInteractionConfirmationWindow.OnChangeOrRevertActorCharacter]"
						}

						button_replace = {
							parentanchor = center
							alwaystransparent = yes
						}
					}

					button_round  = {
						name = "revert_left_character"
						alwaystransparent = no
						tooltip = "CANCEL"
						using = tooltip_below

						using = Animation_ShowHide_Quick


						block "button_left_revert"
						{
							visible = "[CharacterInteractionConfirmationWindow.CanRevertActorCharacter]"
							onclick = "[CharacterInteractionConfirmationWindow.OnChangeOrRevertActorCharacter]"
						}

						button_cancel = {
							parentanchor = center
							alwaystransparent = yes
						}
					}
				}
			}
		}

		### RIGHT
		flowcontainer = {
			parentanchor = top|right
			position = { -20 20 }
			direction = vertical

			block "right_small_portrait"
			{
				datacontext = "[CharacterInteractionConfirmationWindow.GetRecipient]"
				visible = "[Character.IsValid]"
			}

			portrait_head = {
				name = "right_background_portrait"
				tooltip_enabled = "[Character.IsValid]"

				blockoverride "portrait_transformation"
				{
					portrait_scale = { -1 1 }
					portrait_offset = { 1 0 }
				}

				blockoverride "status_icons" {}
			}

			text_label_center = {
				parentanchor = hcenter
				text = "INTERACTION_RECIPIENT"
			}
		}

		flowcontainer = {
			position = { 110 -15 }
			parentanchor = bottom|hcenter
			direction = vertical

			portrait_body = {
				name = "right_main_portrait"
				tooltip_enabled = "[Character.IsValid]"

				block "right_portrait"
				{
					datacontext = "[CharacterInteractionConfirmationWindow.GetSecondaryRecipient]"
				}

				blockoverride "portrait_transformation"
				{
					portrait_scale = { -1 1 }
					portrait_offset = { 1 0 }
				}

				blockoverride "status_icons" {}

				blockoverride "coa" {
					coa_realm_small_crown = {
						position = { -60 -5 }
						visible = "[Character.HasLandedTitles]"
						parentanchor = bottom|right
					}
				}

				blockoverride "portrait_button"
				{
					portrait_texture = "[Character.GetAnimatedPortrait('environment_body', 'camera_body', 'idle', PdxGetWidgetScreenSize(PdxGuiWidget.Self))]"
				}

				blockoverride "portrait_glow" {}

				background = {
					using = Background_Portrait_Glow
					color = { 0.8 0.7 0.5 0.6 }

					block "right_interaction_portrait_glow"
					{
						visible = "[CharacterInteractionConfirmationWindow.IsPickingSecondaryRecipient]"
					}
				}

				blockoverride "glow_flip" {
					mirror = horizontal
				}
			}

			text_label_center = {
				parentanchor = hcenter
				allow_outside = yes

				block "right_character_label"
				{
					text = "INTERACTION_RECIPIENT"
				}

				container = {
					name = "tutorial_highlight_change_right_character"
					parentanchor = right|vcenter
					position = { 50 0 }

					button_round  = {
						name = "change_right_character"
						alwaystransparent = no
						tooltip = "CHANGE_CHARACTER"
						using = tooltip_below

						using = Animation_ShowHide_Quick

						block "button_right_change"
						{
							visible = "[CharacterInteractionConfirmationWindow.CanChangeRecipientCharacter]"
							onclick = "[CharacterInteractionConfirmationWindow.OnChangeOrRevertRecipientCharacter]"
						}

						button_replace = {
							parentanchor = center
							alwaystransparent = yes
						}
					}

					button_round  = {
						name = "revert_right_character"
						alwaystransparent = no
						tooltip = "CANCEL"
						using = tooltip_below

						using = Animation_ShowHide_Quick


						block "button_right_revert"
						{
							visible = "[CharacterInteractionConfirmationWindow.CanRevertActorCharacter]"
							onclick = "[CharacterInteractionConfirmationWindow.OnChangeOrRevertActorCharacter]"
						}

						button_cancel = {
							parentanchor = center
							alwaystransparent = yes
						}
					}
				}
			}
		}

		### CLEAR BUTTON
		container = {
			position = { 0 -6 }
			parentanchor = bottom|hcenter

			button_round  = {
				name = "clear_marry_off_character"
				alwaystransparent = no
				tooltip = "CLEAR_MARRIED_CHARACTER"
				using = tooltip_below

				block "button_clear"
				{
					visible = "[CharacterInteractionConfirmationWindow.CanChangeActorCharacter]"
					enabled = "[CharacterInteractionConfirmationWindow.CanClear]"
					onclick = "[CharacterInteractionConfirmationWindow.OnClear]"
				}

				button_clear = {
					alwaystransparent = yes
					parentanchor = center
				}
			}
		}
	}

	type vbox_character_interaction_effects_accept_contents = vbox {
		name = "affected_characters_accept"
		visible = "[InteractionEffectsDescription.IsShowingOnAcceptEffects]"
		layoutpolicy_horizontal = expanding
		spacing = 10
		

		### Me
		vbox_character_interaction_effects_me = {
			visible = "[InteractionEffectsDescription.HasActorAcceptEffect]"
			layoutpolicy_horizontal = expanding

			blockoverride "EffectText" {
				text = "[InteractionEffectsDescription.GetActorAcceptEffectDescription]"
			}
		}

		### Recipient
		vbox_character_interaction_effects_recipient = {
			visible = "[InteractionEffectsDescription.HasRecipientAcceptEffect]"
			layoutpolicy_horizontal = expanding

			blockoverride "EffectText" {
				text = "[InteractionEffectsDescription.GetRecipientAcceptEffectDescription]"
			}
		}

		### Others
		vbox_character_interaction_other_effects = {
			datamodel = "[InteractionEffectsDescription.GetOtherInteractionAcceptEffects]"
			layoutpolicy_horizontal = expanding
		}
	}

	type vbox_character_interaction_effects_decline_contents = vbox {
		name = "affected_characters_decline"
		visible = "[Not(InteractionEffectsDescription.IsShowingOnAcceptEffects)]"
		layoutpolicy_horizontal = expanding
		spacing = 10

		### Me
		vbox_character_interaction_effects_me = {
			visible = "[InteractionEffectsDescription.HasActorDeclineEffect]"
			layoutpolicy_horizontal = expanding

			blockoverride "EffectText" {
				text = "[InteractionEffectsDescription.GetActorDeclineEffectDescription]"
			}
		}

		### Recipient
		vbox_character_interaction_effects_recipient = {
			visible = "[InteractionEffectsDescription.HasRecipientDeclineEffect]"
			layoutpolicy_horizontal = expanding

			blockoverride "EffectText" {
				text = "[InteractionEffectsDescription.GetRecipientDeclineEffectDescription]"
			}
		}

		### Others
		vbox_character_interaction_other_effects = {
			datamodel = "[InteractionEffectsDescription.GetOtherInteractionDeclineEffects]"
			layoutpolicy_horizontal = expanding
		}
	}

	# All the interaction effects on you and on other character
	type vbox_character_interaction_effects = vbox {
		name = "effects"
		spacing = 10

		hbox = {
			visible = "[And(InteractionEffectsDescription.IsMaybeAnswer,InteractionEffectsDescription.HasRejectionEffect)]"
			layoutpolicy_horizontal = expanding

			button_tab = {
				name = "show_accept_effects"
				shortcut = "war_tab_accept"
				layoutpolicy_horizontal = expanding
				text = "INTERACTION_SHOW_ACCEPT_EFFECTS"
				onclick = "[InteractionEffectsDescription.ShowOnAcceptEffect]"
				down = "[InteractionEffectsDescription.IsShowingOnAcceptEffects]"
				using = tooltip_ne
			}

			button_tab = {
				name = "show_decline_effects"
				shortcut = "war_tab_decline"
				layoutpolicy_horizontal = expanding
				text = "INTERACTION_SHOW_DECLINE_EFFECTS"
				onclick = "[InteractionEffectsDescription.ShowOnDeclineEffect]"
				down = "[Not(InteractionEffectsDescription.IsShowingOnAcceptEffects)]"
				using = tooltip_ne
			}
		}

		container = {
			scrollbox = {
				name = "effects_scrollarea"
				autoresizescrollarea = yes
				maximumsize = { -1 420 }
				visible = "[InteractionEffectsDescription.HasAnyAcceptEffect]"

				blockoverride "scrollbox_content"
				{
					set_parent_size_to_minimum = yes

					block "minimumsize" {
						minimumsize = { 640 0 }
					}

					vbox_character_interaction_effects_accept_contents = {}
					vbox_character_interaction_effects_decline_contents = {}
				}
			}
		}
	}

	# All the interaction effects on you and on other character, simpler version without portraits
	type vbox_character_interaction_effects_simple = vbox {
		name = "effects"
		spacing = 10

		hbox = {
			visible = "[And(InteractionEffectsDescription.IsMaybeAnswer,InteractionEffectsDescription.HasRejectionEffect)]"
			layoutpolicy_horizontal = expanding

			button_tab = {
				name = "show_accept_effects"
				layoutpolicy_horizontal = expanding
				text = "INTERACTION_SHOW_ACCEPT_EFFECTS"
				onclick = "[InteractionEffectsDescription.ShowOnAcceptEffect]"
				down = "[InteractionEffectsDescription.IsShowingOnAcceptEffects]"
				tooltip = "INTERACTION_SHOW_ACCEPT_EFFECTS_TT"
				using = tooltip_ne
			}

			button_tab = {
				name = "show_decline_effects"

				layoutpolicy_horizontal = expanding
				text = "INTERACTION_SHOW_DECLINE_EFFECTS"
				onclick = "[InteractionEffectsDescription.ShowOnDeclineEffect]"
				down = "[Not(InteractionEffectsDescription.IsShowingOnAcceptEffects)]"
				tooltip = "INTERACTION_SHOW_DECLINE_EFFECTS_TT"
				using = tooltip_ne
			}
		}

		scrollbox = {
			name = "effects_scrollarea"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			size = { 0 170 }

			blockoverride "scrollbox_content"
			{
				margin = { 0 10 }

				text_multi = {
					visible = "[InteractionEffectsDescription.IsShowingOnAcceptEffects]"
					name = "accept_effects_info"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					autoresize = yes
					max_width = 435
					margin = { 5 0 }
					text = "[InteractionEffectsDescription.GetAcceptEffectDescription]"
				}

				text_multi = {
					visible = "[Not(InteractionEffectsDescription.IsShowingOnAcceptEffects)]"
					name = "decline_effects_info"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					autoresize = yes
					max_width = 435
					margin = { 5 0 }
					text = "[InteractionEffectsDescription.GetRejectionEffectDescription]"
				}

				block "extra_content" {}
			}

		}


	}

	# Interaction effects on me
	type vbox_character_interaction_effects_me = vbox {
		name = "me"
		datacontext = "[InteractionEffectsDescription.GetActor]"
		margin_bottom = 5

		background = {
			using = Background_Area_With_Header
		}

		text_single = {
			text = "EFFECTS_ON_ME"
			layoutpolicy_horizontal = expanding
			margin = { 15 4 }
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			margin_top = 5
			spacing = 5
			margin_left = 6

			portrait_head = {
				blockoverride "opinion_box"
				{}
			}

			text_multi = {
				name = "effects_info"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				autoresize = yes
				max_width = 375
				margin = { 5 10 }
				block "EffectText" {}
			}

			expand = {}
		}
	}

	# Interaction effects on the other character
	type vbox_character_interaction_effects_recipient = vbox {
		name = "recipient"
		datacontext = "[InteractionEffectsDescription.GetRecipient]"
		margin_bottom = 5

		background = {
			using = Background_Area_With_Header
		}

		text_single = {
			text = "EFFECTS_ON_ME"
			layoutpolicy_horizontal = expanding
			margin = { 15 4 }
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			margin_top = 5
			spacing = 5
			margin_left = 10
			margin_right = 6

			text_multi = {
				name = "effects_info"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				autoresize = yes
				max_width = 375
				margin = { 5 10 }
				block "EffectText" {}
			}

			expand = {}

			portrait_head = {
				datacontext = "[InteractionEffectsDescription.GetRecipient]"
				blockoverride "opinion_box" {}
				blockoverride "portrait_transformation"
				{
					portrait_scale = { -1 1 }
					portrait_offset = { 1 0 }
				}
			}
		}
	}

	# Interaction effects on third party characters
	type vbox_character_interaction_other_effects = vbox {
		name = "other_effects"

		item = {
			hbox = {
				layoutpolicy_horizontal = expanding
				margin = { 0 5 }
				spacing = 10

				portrait_head = {
					name = "portrait"
					datacontext = "[InteractionOtherEffect.GetCharacter]"
					visible = "[InteractionOtherEffect.HasCharacter]"
				}

				container = {
					icon = {
						position = { 16 0 }
						size = { 50 50 }
						texture = "gfx/interface/icons/icon_group_of_characters.dds"
						visible = "[InteractionOtherEffect.IsList]"
						tooltip = "[InteractionOtherEffect.GetListTooltip]"
					}
				}

				text_multi = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					autoresize = yes
					max_width = 375
					text = "[InteractionOtherEffect.GetEffect]"
					align = left|vcenter
				}

				expand = {}
			}
		}
	}

	type hbox_character_interaction_acceptance = hbox {
		name = "acceptance"
		visible = "[CharacterInteractionConfirmationWindow.ShouldShowAnswer]"
		margin = { 0 5 }

		widget = {
			name = "answer_chance"
			size = { 330 60 }
			tooltip = "[CharacterInteractionConfirmationWindow.GetAnswerReason]"

			background = {
				using = Background_Area_Dark
			}

			icon = {
				texture = "gfx/interface/icons/symbols/icon_cross.dds"
				size = { 30 30 }
				position = { 50 0 }
				parentanchor = vcenter
				visible = "[Not( CharacterInteractionConfirmationWindow.IsAnswerPositive )]"
			}

			icon = {
				texture = "gfx/interface/icons/symbols/icon_check.dds"
				size = { 30 30 }
				position = { 50 0 }
				parentanchor = vcenter
				visible = "[CharacterInteractionConfirmationWindow.IsAnswerPositive]"
			}

			vbox = {
				maximumsize = { 120 46 }
				parentanchor = center
				visible = "[CharacterInteractionConfirmationWindow.IsForcedToAccept]"

				text_single = {
					layoutpolicy_horizontal = expanding
					name = "answer"
					text = "ANSWER_REASON_AUTO_ACCEPT"
					default_format = "#color_green"
					using = Font_Size_Medium
					align = nobaseline
				}
			}

			vbox = {
				maximumsize = { 120 46 }
				parentanchor = center
				visible = "[Not( CharacterInteractionConfirmationWindow.IsForcedToAccept )]"

				text_single = {
					layoutpolicy_horizontal = expanding
					name = "answer"
					text = "[CharacterInteractionConfirmationWindow.GetAnswer]"
					default_format = "#high"
					using = Font_Size_Medium
					align = nobaseline
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					visible = "[And( Not( CharacterInteractionConfirmationWindow.IsAiMaybe ), Not( CharacterInteractionConfirmationWindow.GetRecipient.IsPlayer ) )]"
					name = "answer_score"
					text = "INTERACTION_ACCEPTANCE_SCORE"
					align = nobaseline
				}

				text_single = {
					layoutpolicy_horizontal = expanding
					visible = "[And( And( CharacterInteractionConfirmationWindow.IsAiMaybe, Not( CharacterInteractionConfirmationWindow.GetRecipient.IsPlayer ) ), Or( Not( CharacterInteractionConfirmationWindow.IsAiAcceptNegotiation ), GreaterThan_int32( CharacterInteractionConfirmationWindow.GetAnswerScore, '(int32)0' ) ) )]"
					name = "answer_chance"
					text = "INTERACTION_ACCEPTANCE_CHANCE"
					align = nobaseline
				}
			}

			progressbar_standard = {
				layoutpolicy_horizontal = expanding
				position = { 0 3 }
				size = { 324 10 }
				parentanchor = bottom|hcenter
				visible = "[And( And( CharacterInteractionConfirmationWindow.IsAiMaybe, Not( CharacterInteractionConfirmationWindow.GetRecipient.IsPlayer ) ), Or( Not( CharacterInteractionConfirmationWindow.IsAiAcceptNegotiation ), GreaterThan_int32( CharacterInteractionConfirmationWindow.GetAnswerScore, '(int32)0' ) ) )]"
				value = "[CharacterInteractionConfirmationWindow.GetAnswerProgress]"
			}
		}
	}

	type text_multi_on_decline_summary = text_multi {
		autoresize = yes
		max_width = 500
		visible = "[CharacterInteractionConfirmationWindow.HasOnDeclineSummary]"
		text = "[CharacterInteractionConfirmationWindow.GetOnDeclineSummary]"
	}

	# Options to consider before accepting and interaction
	type vbox_interaction_options = vbox {
		name = "options_grid"
		visible = "[CharacterInteractionConfirmationWindow.HasOptions]"
		datamodel = "[CharacterInteractionConfirmationWindow.GetOptionItems]"
		margin = { 0 10 }
		spacing = 2

		text_label_center = {
			layoutpolicy_horizontal = expanding
			visible = "[Not( StringIsEmpty(CharacterInteractionConfirmationWindow.GetOptionsHeading) )]"
			text = "[CharacterInteractionConfirmationWindow.GetOptionsHeading]"
		}

		item = {
			widget = {
				layoutpolicy_horizontal = expanding
				size = { 480 40 }
				visible = "[OptionItem.IsShown]"

				background = {
					using = Background_Area_Border
				}

				hbox = {
					margin = { 10 0 }
					spacing = 5
					tooltip = "[OptionItem.GetTooltip]"
					visible = "[Or( GreaterThan_int32( CharacterInteractionConfirmationWindow.GetVisibleOptionsCount, '(int32)1' ), Not( CharacterInteractionConfirmationWindow.HasExclusiveOptions ) )]"

					button_checkbox = {
						block "button_checkbox_inner" {
						}
						size = { 30 30 }
						checked = "[OptionItem.HasOption]"
						onclick = "[OptionItem.OnClick]"
						visible = "[Not(OptionItem.IsExclusive)]"
						enabled = "[And(OptionItem.IsValid, OptionItem.CanBeChanged)]"
					}

					button_radio = {
						size = { 30 30 }
						frame = "[BoolTo1And2( OptionItem.HasOption )]"
						onclick = "[OptionItem.OnClick]"
						visible = "[OptionItem.IsExclusive]"
						enabled = "[And(OptionItem.IsValid, OptionItem.CanBeChanged)]"
					}

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "[OptionItem.GetName]"
					}
				}

				hbox = {
					margin = { 10 0 }
					spacing = 5
					tooltip = "[OptionItem.GetTooltip]"
					visible = "[And( CharacterInteractionConfirmationWindow.HasExclusiveOptions, EqualTo_int32( CharacterInteractionConfirmationWindow.GetVisibleOptionsCount, '(int32)1' ) )]"

					text_single = {
						text = "[OptionItem.GetName]"
					}
				}
			}
		}
	}


	types Interactions
	{
		type vbox_scheme_info = vbox {
			name = "scheme_info"
			margin = {3 10 }

			hbox = {
				layoutpolicy_horizontal = expanding

				vbox = {
					layoutpolicy_horizontal = expanding
					margin = { 0 10 }

					# # text_single = {
					# # 	text = "INTERACTION_START_SCHEME"
					# # 	default_format = "#low"
					# # }

					text_label_center = {
						text = "SCHEME_PREDICTION_NAME"
						using = Font_Size_Medium
						default_format = "#high"
					}

					# text_single = {
					# 	text = "[InteractionSchemeInfo.GetEstimatedTime]"
					# 	tooltip = "SCHEME_PREDICTION_ESTIMATED_TIME_TT"
					# }

					text_single = {
						visible = "[InteractionSchemeInfo.GetScheme.UsesAgents]"
						text = "SCHEME_PREDICTION_AGENTS"
						tooltip = "SCHEME_PREDICTION_AGENTS_TT"
					}

				}

			}


			hbox = {
				name = "on_success"
				visible = "[InteractionSchemeInfo.HasSuccessDesc]"
				layoutpolicy_horizontal = expanding

				background = {
					using = Background_Area
				}

				hbox = {
					layoutpolicy_vertical = expanding
					min_width = 135
					margin_left = 25
					spacing = 10
					tooltip = "SCHEME_PREDICTION_SUCCESS_TT"

					background = {
						using = Background_Area
					}

					icon = {
						name = "success_icon"
						size = { 30 30 }
						texture = "gfx/interface/icons/schemes/icon_scheme_success.dds"
					}

					text_single = {
						name = "success"
						text = "SCHEME_PREDICTION_SUCCESS_CHANCE"
						using = Font_Size_Medium
						align = nobaseline
					}

					expand = {}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					margin = { 10 15 }
					spacing = 3

					text_single = {
						layoutpolicy_horizontal = expanding
						text = "SCHEME_PREDICTION_ON_SUCCESS"
						default_format = "#weak"
					}

					hbox = {
						layoutpolicy_horizontal = expanding

						text_multi = {
							layoutpolicy_horizontal = expanding
							max_width = 380
							autoresize = yes
							text = "[InteractionSchemeInfo.GetSuccessDesc]"
						}

						expand = {}
					}
				}

				vbox = {
					margin_right = 5
					margin_top = -60

					portrait_shoulders = {
						datacontext = "[InteractionSchemeInfo.GetTarget]"
						using = tooltip_es
					}
				}

			}

			hbox = {
				name = "on_discovery"
				visible = "[InteractionSchemeInfo.HasDiscoveryDesc]"
				layoutpolicy_horizontal = expanding

				background = {
					using = Background_Area
				}

				hbox = {
					layoutpolicy_vertical = expanding
					visible = "[InteractionSchemeInfo.IsSecret]"
					min_width = 135
					margin_left = 25
					spacing = 10
					tooltip = "SCHEME_PREDICTION_SECRECY_TT"

					background = {
						using = Background_Area
					}

					icon = {
						name = "secrecy_icon"
						size = { 30 30 }
						texture = "gfx/interface/icons/schemes/icon_secrecy.dds"
					}

					text_single = {
						name = "secrecy"
						size = { 40 28 }
						autoresize = no
						text = "[InteractionSchemeInfo.GetSecrecy|%/V]"
						using = Font_Size_Medium
						align = nobaseline
					}

					expand = {}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					margin = { 10 15 }
					spacing = 3

					text_single = {
						layoutpolicy_horizontal = expanding

						text = "SCHEME_PREDICTION_ON_DISCOVERY"

						default_format = "#weak"
					}

					hbox = {
						layoutpolicy_horizontal = expanding

						text_multi = {
							layoutpolicy_horizontal = expanding
							autoresize = yes
							max_width = 600
							text = "[InteractionSchemeInfo.GetDiscoveryDesc]"
						}

						expand = {}
					}
				}
			}

			hbox = {
				layoutpolicy_horizontal = expanding

				background = {
					using = Background_Area
				}

				hbox = {
					name = "expected_time"
					layoutpolicy_vertical = expanding
					min_width = 135
					margin_left = 25
					spacing = 10

					background = {
						using = Background_Area
					}

					icon = {
						name = "time"
						size = { 32 32 }
						texture = "gfx/interface/icons/schemes/icon_scheme_power.dds"
					}

					text_single = {
						text = "[InteractionSchemeInfo.GetEstimatedTime]"
						align = nobaseline
						tooltip = "SCHEME_PREDICTION_ESTIMATED_TIME_TT"
					}

					expand = {}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					margin = { 10 15 }
					spacing = 3

					text_single = {
						layoutpolicy_horizontal = expanding

						text = "SCHEME_PREDICTION_EXPECTED_TIME"

						default_format = "#weak"
					}

					hbox = {
						layoutpolicy_horizontal = expanding

						text_multi = {
							layoutpolicy_horizontal = expanding
							autoresize = yes
							max_width = 500
							text = "SCHEME_PREDICTION_EXPECTED_TIME_TEXT"
						}

						expand = {}
					}
				}
			}


			text_single = {
				visible = "[LessThanOrEqualTo_int32( InteractionSchemeInfo.GetSuccessChance, '(int32)0' )]"
				layoutpolicy_horizontal = expanding
				margin = { 0 10 }
				text = "SCHEME_PREDICTION_NO_SUCCESS"
				tooltip = "SCHEME_PREDICTION_SUCCESS_TT"
				using = Font_Size_Medium
				align = center|nobaseline

				background = {
					using = Background_Area
				}
			}

			text_single = {
				visible = "[InteractionSchemeInfo.IsReplace]"
				text = "INTERACTION_REPLACE_SCHEME"
				layoutpolicy_horizontal = expanding
				margin = { 0 10 }
				align = center|nobaseline

				background = {
					using = Background_Area
				}
			}
		}
	}

	########################################
	type change_revert_buttons = vbox {
		button_round  = {
			name = "change"
			alwaystransparent = no
			tooltip = "CHANGE_CHARACTER"
			using = tooltip_below

			block "ReplaceVisible"
			{
				visible = yes
			}

			button_replace = {
				parentanchor = center

				block "ReplaceClick"
				{
					onclick = [CharacterInteractionConfirmationWindow.OnChangeOrRevertActorCharacter]
				}
			}
		}
		button_round  = {
			name = "revert"
			alwaystransparent = no
			tooltip = "CANCEL"
			using = tooltip_below

			button_cancel = {
				parentanchor = center

				block "RevertClick"
				{
					# onclick = ?
				}
			}

			block "RevertVisible"
			{
				visible = yes
			}
		}
	}

	type dynamicgridbox_interaction_list = dynamicgridbox {
		name = "interaction_list"

		item = {
			container = {
				name = "interaction_widget"
				ignoreinvisible = yes

				button_standard_hover = {
					name = "interaction_button"
					visible = "[Not(InteractionItem.IsMarriageSetting)]"
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"

					disableframe = 8
					blockoverride "disabled" {}
					size = { 317 30 }

					tooltip = "[InteractionItem.GetTooltip]"
					using = tooltip_es

					hbox = {
						margin = { 10 0 }
						spacing = 5

						background = {
							name = "interaction_glow"
							visible = "[InteractionItem.IsHighlighted]"
							texture = "gfx/interface/component_tiles/tile_selected.dds"
							spriteType = corneredtiled
							spriteborder = { 25 25 }
						}

						icon = {
							visible = "[InteractionItem.IsCharacterInteraction]"
							name = "interaction_icon"
							size = { 30 30 }
							texture = "[InteractionItem.GetCharacterInteraction.GetIcon]"
						}

						text_single = {
							layoutpolicy_horizontal = expanding
							text = "[Select_CString( InteractionItem.IsValid, '#clickable', '#weak' )] [InteractionItem.GetName]#!"
							align = nobaseline
							autoresize = no
						}

						hbox = {
							icon = {
								size = { 30 30 }
								name = "extra_icon"
								texture = "[InteractionItem.GetExtraIcon]"
								visible = "[InteractionItem.ShouldUseExtraIcon]"
							}

							icon = {
								name = "dont_accept"
								visible = "[And(Not(InteractionItem.IsMore),Not(InteractionItem.IsPotentialAccept))]"
								size = { 30 30 }
								texture = "gfx/interface/icons/symbols/icon_cross.dds"
							}

							icon = {
								texture = "gfx/interface/icons/symbols/icon_warning.dds"
								name = "warning_icon"
								size = { 25 25 }
								visible = "[InteractionItem.HasWarningIcon]"
								tooltip = "[InteractionItem.GetWarningTooltipDesc]"
							}
						}
					}
				}

				button_normal = {
					name = "button_marriage"			
					size = { 0 0 }		
					shortcut = "context_menu_arrange_marriage"		
					visible = "[And(Not(InteractionItem.IsMarriageSetting), EqualTo_string(InteractionItem.GetName, SelectLocalization(InteractionItem.IsValid, 'arrange_marriage_interaction', 'arrange_marriage_interaction')))]"					
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
				}

				button_normal = {
					name = "button_find_spouse"			
					size = { 0 0 }		
					shortcut = "context_menu_find_spouse"		
					visible = "[And(Not(InteractionItem.IsMarriageSetting), EqualTo_string(InteractionItem.GetName, SelectLocalization(InteractionItem.IsValid, 'marry_off_interaction', 'marry_off_interaction')))]"					
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
				}

				button_normal = {
					name = "button_request_divorce"			
					size = { 0 0 }		
					shortcut = "context_menu_request_divorce"		
					visible = "[And(Not(InteractionItem.IsMarriageSetting), EqualTo_string(InteractionItem.GetName, SelectLocalization(InteractionItem.IsValid, 'divorce_character_rel_head_interaction', 'divorce_character_rel_head_interaction')))]"					
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
				}

				button_normal = {
					name = "button_request_divorce_2"			
					size = { 0 0 }		
					shortcut = "context_menu_request_divorce"		
					visible = "[And(Not(InteractionItem.IsMarriageSetting), EqualTo_string(InteractionItem.GetName, SelectLocalization(InteractionItem.IsValid, 'divorce_character_interaction', 'divorce_character_interaction')))]"					
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
				}

				button_normal = {
					name = "button_sway"			
					size = { 0 0 }		
					shortcut = "context_menu_sway"		
					visible = "[And(Not(InteractionItem.IsMarriageSetting), EqualTo_string(InteractionItem.GetName, SelectLocalization(InteractionItem.IsValid, 'sway_interaction', 'sway_interaction')))]"					
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
				}

				button_normal = {
					name = "button_grant_title"			
					size = { 0 0 }		
					shortcut = "context_menu_grant_title"		
					visible = "[And(Not(InteractionItem.IsMarriageSetting), EqualTo_string(InteractionItem.GetName, SelectLocalization(InteractionItem.IsValid, 'grant_titles_interaction', 'grant_titles_interaction')))]"					
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
				}

				button_normal = {
					name = "button_declare_war"			
					size = { 0 0 }		
					shortcut = "context_menu_declare_war"		
					visible = "[And(Not(InteractionItem.IsMarriageSetting), EqualTo_string(InteractionItem.GetName, SelectLocalization(InteractionItem.IsValid, 'declare_war_interaction', 'declare_war_interaction')))]"					
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
				}

				button_normal = {
					name = "button_offer_to_join_war"			
					size = { 0 0 }		
					shortcut = "context_menu_offer_to_join_war"		
					visible = "[And(Not(InteractionItem.IsMarriageSetting), EqualTo_string(InteractionItem.GetName, SelectLocalization(InteractionItem.IsValid, 'join_war_interaction', 'join_war_interaction')))]"					
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
				}

				button_normal = {
					name = "button_call_to_war"			
					size = { 0 0 }		
					shortcut = "context_menu_call_to_war"		
					visible = "[And(Not(InteractionItem.IsMarriageSetting), EqualTo_string(InteractionItem.GetName, SelectLocalization(InteractionItem.IsValid, 'call_ally_interaction', 'call_ally_interaction')))]"					
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
				}

				button_normal = {
					name = "button_educate_child"			
					size = { 0 0 }		
					shortcut = "context_menu_educate_child"		
					visible = "[And(Not(InteractionItem.IsMarriageSetting), EqualTo_string(InteractionItem.GetName, SelectLocalization(InteractionItem.IsValid, 'educate_child_interaction', 'educate_child_interaction')))]"					
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
				}

				button_normal = {
					name = "button_offer_guardianship"			
					size = { 0 0 }		
					shortcut = "context_menu_offer_guardianship"		
					visible = "[And(Not(InteractionItem.IsMarriageSetting), EqualTo_string(InteractionItem.GetName, SelectLocalization(InteractionItem.IsValid, 'offer_guardianship_interaction', 'offer_guardianship_interaction')))]"					
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
				}

				button_normal = {
					name = "button_remove_guardian"			
					size = { 0 0 }		
					shortcut = "context_menu_remove_guardian"		
					visible = "[And(Not(InteractionItem.IsMarriageSetting), EqualTo_string(InteractionItem.GetName, SelectLocalization(InteractionItem.IsValid, 'remove_guardian_interaction', 'remove_guardian_interaction')))]"					
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
				}

				button_normal = {
					name = "button_offer_blackmail"			
					size = { 0 0 }		
					shortcut = "context_menu_blackmail"		
					visible = "[And(Not(InteractionItem.IsMarriageSetting), EqualTo_string(InteractionItem.GetName, SelectLocalization(InteractionItem.IsValid, 'blackmail_interaction', 'blackmail_interaction')))]"					
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
				}

				button_normal = {
					name = "button_murder"			
					size = { 0 0 }		
					shortcut = "context_menu_murder"		
					visible = "[And(Not(InteractionItem.IsMarriageSetting), EqualTo_string(InteractionItem.GetName, SelectLocalization(InteractionItem.IsValid, 'start_murder_interaction', 'start_murder_interaction')))]"					
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
				}

				button_normal = {
					name = "button_fabricate_hook"			
					size = { 0 0 }		
					shortcut = "context_menu_fabricate_hook"		
					visible = "[And(Not(InteractionItem.IsMarriageSetting), EqualTo_string(InteractionItem.GetName, SelectLocalization(InteractionItem.IsValid, 'fabricate_hook_interaction', 'fabricate_hook_interaction')))]"					
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
				}

				button_normal = {
					name = "button_abduct"			
					size = { 0 0 }		
					shortcut = "context_menu_abduct"		
					visible = "[And(Not(InteractionItem.IsMarriageSetting), EqualTo_string(InteractionItem.GetName, SelectLocalization(InteractionItem.IsValid, 'start_abduct', 'start_abduct')))]"					
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
				}


				button_normal = {
					name = "button_diplomacy_more"			
					size = { 0 0 }		
					shortcut = "context_menu_diplomacy_more"		
					visible = "[And(Not(InteractionItem.IsMarriageSetting), And(InteractionItem.IsMore, EqualTo_string(InteractionCategoryItem.GetName, SelectLocalization(InteractionItem.IsValid, 'interaction_category_diplomacy', 'interaction_category_diplomacy'))))]"					
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
				}

				button_normal = {
					name = "button_personal_more"			
					size = { 0 0 }		
					shortcut = "context_menu_personal_more"		
					visible = "[And(Not(InteractionItem.IsMarriageSetting), And(InteractionItem.IsMore, EqualTo_string(InteractionCategoryItem.GetName, SelectLocalization(InteractionItem.IsValid, 'interaction_category_friendly', 'interaction_category_friendly'))))]"					
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
				}

				button_normal = {
					name = "button_hostile_more"			
					size = { 0 0 }		
					shortcut = "context_menu_hostile_more"		
					visible = "[And(Not(InteractionItem.IsMarriageSetting), And(InteractionItem.IsMore, EqualTo_string(InteractionCategoryItem.GetName, SelectLocalization(InteractionItem.IsValid, 'interaction_category_hostile', 'interaction_category_hostile'))))]"					
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
				}

				button_normal = {
					name = "button_vassalage_more"			
					size = { 0 0 }		
					shortcut = "context_menu_vassalage_more"		
					visible = "[And(Not(InteractionItem.IsMarriageSetting), And(InteractionItem.IsMore, EqualTo_string(InteractionCategoryItem.GetName, SelectLocalization(InteractionItem.IsValid, 'interaction_category_vassal', 'interaction_category_vassal'))))]"					
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
				}

				button_normal = {
					name = "button_religion_more"			
					size = { 0 0 }		
					shortcut = "context_menu_religion_more"		
					visible = "[And(Not(InteractionItem.IsMarriageSetting), And(InteractionItem.IsMore, EqualTo_string(InteractionCategoryItem.GetName, SelectLocalization(InteractionItem.IsValid, 'interaction_category_religion', 'interaction_category_religion'))))]"					
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
				}
				
				button_normal = {
					name = "button_house_head_more"			
					size = { 0 0 }		
					shortcut = "context_menu_house_head_more"		
					visible = "[And(Not(InteractionItem.IsMarriageSetting), And(InteractionItem.IsMore, EqualTo_string(InteractionCategoryItem.GetName, SelectLocalization(InteractionItem.IsValid, 'interaction_category_house_head', 'interaction_category_house_head'))))]"					
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
				}
				
				button_normal = {
					name = "button_prison_more"			
					size = { 0 0 }		
					shortcut = "context_menu_prison_more"		
					visible = "[And(Not(InteractionItem.IsMarriageSetting), And(InteractionItem.IsMore, EqualTo_string(InteractionCategoryItem.GetName, SelectLocalization(InteractionItem.IsValid, 'interaction_category_prison', 'interaction_category_prison'))))]"					
					enabled = "[InteractionItem.IsValid]"
					onclick = "[InteractionItem.OnClick]"
				}

				button_standard_hover = {
					visible = "[InteractionItem.IsMarriageSetting]"
					tooltip = "[InteractionItem.GetCheckboxTooltip]"
					onclick = "[InteractionItem.OnClickCheckbox]"
					size = { 317 30 }

					hbox = {
						margin_left = 10

						button_checkbox_label = {
							alwaystransparent = yes
							name = "button"
							size = { 30 30 }
							enabled = "[InteractionItem.CheckboxEnabled]"
							blockoverride "checkbox"
							{
								alwaystransparent = yes
								checked = "[EqualTo_int32(InteractionItem.GetCheckboxFrame, '(int32)2')]"
							}
							blockoverride "text"
							{
								text = "CHARACTER_INTERACTION_ALLOWED_TO_MARRY"
							}
							shortcut = "context_menu_allow_marriage"
						}
						expand = {}
					}
				}
			}
		}
	}

	type flowcontainer_category_group = flowcontainer {
		visible = "[InteractionCategoryItem.IsVisible]"
		direction = vertical

		flowcontainer = {
			direction = vertical
			margin = { 10 3 }

			background = {
				# Debug background
				visible = "[InteractionCategoryItem.GetCharacterInteractionCategory.HasBackground]"
				texture = "[InteractionCategoryItem.GetCharacterInteractionCategory.GetBackground]"
			}

			background = {
				using = Background_Area
				alpha = 0.6
			}

			flowcontainer = {
				name = "category_gridbox_container"
				ignoreinvisible = yes
				maximumsize = { 320 30 }
				spacing = 5

				icon = {
					size = { 30 30 }
					texture = "[InteractionCategoryItem.GetCharacterInteractionCategory.GetIcon]"
					visible = "[InteractionCategoryItem.GetCharacterInteractionCategory.HasIcon]"
				}

				text_single = {
					name = "category_name"
					text = "#italic [InteractionCategoryItem.GetName]#!"
					fontcolor = { 1 1 1 0.5 }
				}
			}

			spacer = {
				size = { 0 5 }
			}

			container = {
				dynamicgridbox_interaction_list = {
					datamodel = "[InteractionCategoryItem.GetInteractions]"
				}
			}
		}
	}
}

### CHARACTER LIST
types InteractionCharacterList
{
	type vbox_interaction_character_list = vbox {
		name = "character_list"
		visible = "[Not(CharacterInteractionConfirmationWindow.HasPickedCharacters)]"

		vbox = {
			layoutpolicy_horizontal = expanding
			margin_top = 5
			margin_bottom = 10

			background = {
				using = Background_Area
			}

			text_single = {
				name = "select_someone_label"
				text = "[CharacterInteractionConfirmationWindow.GetPrompt]"
				default_format = "#I"
			}
		}

		### List
		vbox_character_list = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			blockoverride "claims_visibility"
			{
				visible = no
			}

			blockoverride "special_character"
			{
				vbox = {
					datacontext = "[CharacterInteractionConfirmationWindow.GetTopCharacterItem]"
					visible = "[CharacterInteractionConfirmationWindow.HasTopCharacterItem]"
					layoutpolicy_horizontal = expanding

					widget_character_list_item = {
						layoutpolicy_horizontal = expanding
					}
				}
			}
		}
	}
}
