types Notifications {

    ######################################################
    ###################### ALERTS ########################
    ######################################################
    type notifications_alerts = flowcontainer {
        visible = "[Not(SinglePlayerShowingPausedSuccession)]"
        direction = horizontal
        spacing = 10
        scale = 0.7

        state = {
            name = _show
            using = Animation_FadeIn_Quick
        }

        state = {
            name = _hide
            using = Animation_FadeOut_Quick
        }

        dynamicgridbox = {
            name = "alert_items"
            datamodel = "[InGameTopbar.GetAlertItems]"

            flipdirection = yes
            ignoreinvisible = yes
            maxverticalslots = 3

            item = {
                container = {
                    button = {
                        name = "action_icon"
                        parentanchor = center
                        framesize = { 192 192 }
                        size = { 0 0 }

                        gfxtype = buttongfx
                        effectname = "NoHighlight"
                        shaderfile = "gfx/FX/pdxgui_pushbutton.shader"
                        texture = "[GUIAlertItem.GetImportantActionType.GetIcon]"
                        shortcut = "notification_action"
                        onclick = "[GUIAlertItem.OnClick]"
                        onrightclick = "[GUIAlertItem.OnRightClick]"
                        button_ignore = none

                        tooltip = "[GUIAlertItem.GetTooltip]"
                        using = tooltip_below

                        modify_texture = {
                            name = "mask"
                            texture = "gfx/interface/effects/alert_glow_mask.dds"
                            blend_mode = mask
                        }

                        modify_texture = {
                            name = "glow"
                            texture = "gfx/interface/effects/alert_glow.dds"
                            blend_mode = colordodge
                            translate_uv = { 0.2 0.2 }
                        }

                        state = {
                            name = "when_added"
                            next = e
                            position_y = 0
                            duration = 0.45
                            size = { 96 96 }
                            using = Animation_Curve_Default
                            trigger_when = "[GUIAlertItem.IsAdding]"
                            on_start = "[GUIAlertItem.StartAnimation]"
                            on_start = "[GUIAlertItem.PlayShowSound]"
                        }
                        state = {
                            name = e
                            next = f
                            position_y = 60
                            duration = 0.45
                            size = { 104 104 }
                            using = Animation_Curve_Default
                        }

                        state = {
                            name = f
                            next = a
                            position_y = 0
                            duration = 0.45
                            size = { 96 96 }
                            bezier = { 0.43 0 0.2 2.2 }
                            on_finish = "[GUIAlertItem.AddingFinished]"
                            on_finish = "[GUIAlertItem.EndAnimation]"
                        }

                        ### idle animation ###

                        state = {
                            name = a
                            next = b
                            duration = 0
                            delay = 10
                            size = { 96 96 }
                            position_y = 0
                            on_start = "[GUIAlertItem.StartAnimation]"
                            on_finish = "[GUIAlertItem.AddingFinished]"
                            on_finish = "[GUIAlertItem.EndAnimation]"
                            using = Animation_Curve_Default
                        }

                        state = {
                            name = b
                            next = c
                            duration = 0.25
                            size = { 104 104 }
                            scale = 1.5
                            bezier = { 0 1.6 0.7 1.8 }
                            position_y = 10
                            on_start = "[GUIAlertItem.StartAnimation]"
                            on_finish = "[GUIAlertItem.AddingFinished]"
                            on_finish = "[GUIAlertItem.EndAnimation]"
                            using = Animation_Curve_Default
                        }

                        state = {
                            name = c
                            next = d
                            duration = 0.2
                            size = { 96 96 }
                            scale = 0.8
                            position_y = 0
                            on_start = "[GUIAlertItem.StartAnimation]"
                            on_finish = "[GUIAlertItem.AddingFinished]"
                            on_finish = "[GUIAlertItem.EndAnimation]"
                            using = Animation_Curve_Default
                        }

                        state = {
                            name = d
                            duration = 0.2
                            scale = 1
                            size = { 96 96 }
                            position_y = 0
                            on_start = "[GUIAlertItem.StartAnimation]"
                            on_finish = "[GUIAlertItem.AddingFinished]"
                            on_finish = "[GUIAlertItem.EndAnimation]"
                            using = Animation_Curve_Default
                        }

                        state = {
                            name = "already_added"
                            duration = 0
                            size = { 96 96 }
                            trigger_when = "[GUIAlertItem.IsAdded]"
                        }

                        state = {
                            name = "when_removed"
                            duration = 0.3
                            size = { 0 0 }
                            trigger_when = "[GUIAlertItem.IsRemoving]"
                            on_start = "[GUIAlertItem.StartAnimation]"
                            on_finish = "[GUIAlertItem.RemovingFinished]"
                            on_finish = "[GUIAlertItem.EndAnimation]"
                        }

                        state = {
                            trigger_on_create = yes
                            name = _show
                            next = shimmer
                            duration = 0.2
                            scale = 0.9

                            modify_texture = {
                                name = "glow"
                                translate_uv = { 1 -1 }
                            }
                        }

                        state = {
                            name = shimmer
                            next = pause
                            duration = 1.2
                            scale = 0.9
                            position = { 0 0 }
                            #start_sound = {
                            #	soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_shimmer"
                            #}

                            bezier = { 0 0.9 1 0.4 }

                            modify_texture = {
                                name = "glow"
                                translate_uv = { -1 1 }
                            }
                        }

                        state = {
                            name = pause
                            next = shimmer
                            duration = 0
                            delay = 20

                            modify_texture = {
                                name = "glow"
                                translate_uv = { 1 -1 }
                            }
                        }

                        state = {
                            name = _mouse_enter
                            duration = 0.05
                            frame = 2
                            position = { 0 10 }
                            scale = 1
                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_oversound"}
                        }

                        state = {
                            name = _mouse_leave
                            duration = 0.1
                            frame = 1
                            position = { 0 0 }
                            scale = 0.9
                        }

                        state = {
                            name = _mouse_press
                            duration = 0.25
                            frame = 3
                            position = { 0 10 }
                            scale = 1
                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_mouse_press"}
                        }

                        state = {
                            name = _mouse_release
                            duration = 0.25
                            frame = 2
                            position = { 0 10 }
                            scale = 1
                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_mouse_release"}
                        }
                    }

                    button_normal = {
                        size = { 0 0 }
                        shortcut = "sequence_notification"
                        visible = "[EqualTo_string(GetVariableSystem.Get( 'basic_sequence_combining' ), 'true')]"
                        onclick = "[GUIAlertItem.OnClick]"
                        onrightclick = "[GUIAlertItem.OnRightClick]"
                    }
                }
            }
        }

        ### Diplomatic offers
        dynamicgridbox = {
            name = "diplomatic_items"
            datamodel = "[InGameTopbar.GetDiplomaticItems]"

            flipdirection = yes
            ignoreinvisible = yes
            maxhorizontalslots = 10
            maxverticalslots = 3

            item = {
                container = {
                    visible = "[DiplomaticItem.IsVisible]"

                    icon = {
                        name = "notification_glow"
                        size = { 150% 150% }
                        parentanchor = center
                        texture = "gfx/interface/effects/alert_diplomacy_glow.dds"
                        color = { 0.7 0.66 0.61 1 }

                        modify_texture = {
                            rotate_uv = 0
                            name = rotation
                            texture = "gfx/interface/effects/alert_diplomacy_glow.dds"
                            blend_mode = colordodge
                        }

                        ### idle animation ###
                        state = {
                            trigger_on_create = yes
                            name = preshow
                            next = show

                            alpha = 0
                            scale = 1
                        }

                        state = {
                            name = show
                            next = a
                            delay = 0.9   ##### delay in order to start animation after icon has appeared

                            using = Animation_Curve_Default
                            duration = 1.35
                            alpha = 0
                            scale = 1
                        }

                        state = {
                            name = a
                            next = b

                            using = Animation_Curve_Default
                            duration = 0.5
                            alpha = 0.8
                            scale = 1

                            modify_texture = {
                                name = rotation
                                rotate_uv = 0
                            }
                        }

                        state = {
                            name = b
                            next = a

                            using = Animation_Curve_Default
                            delay = 1.4
                            duration = 0.7
                            alpha = 0
                            scale = 0.8

                            modify_texture = {
                                name = rotation
                                rotate_uv = -90
                            }
                        }
                    }

                    button = {
                        name = "action_icon"
                        shortcut = "notification_diplomatic"
                        parentanchor = center

                        size = { 0 0 }
                        framesize = { 96 96 }
                        filter_mouse = right

                        texture = "[DiplomaticItem.GetIcon]"
                        onclick = "[DiplomaticItem.OnClick]"
                        onrightclick = "[DiplomaticItem.OnRightClick]"
                        button_ignore = none

                        tooltip = "DIPLOMATIC_ITEM_TOOLTIP"

                        icon = {
                            texture = "gfx/interface/effects/alert_diplomacy_timer_base.dds"
                            visible = "[LessThan_int32( DiplomaticItem.GetDaysUntilTimeout, '(int32)30')]"
                            size = { 104 104 }
                            parentanchor = center

                            text_single = {
                                text = "[Max_int32( '(int32)0', DiplomaticItem.GetDaysUntilTimeout )]"
                                parentanchor = bottom|hcenter
                                position = { -2 -16 }
                                using = Font_Size_Medium
                                default_format = "#high"
                            }
                        }

                        state = {
                            trigger_when = "[LessThan_int32( DiplomaticItem.GetDaysUntilTimeout, '(int32)30')]"
                            name = "timeout"
                            next = b

                            using = Animation_Curve_Default
                            duration = 0.5
                            alpha = 1
                        }

                        state = {
                            name = b
                            next = "timeout"

                            using = Animation_Curve_Default
                            delay = 1.4
                            duration = 0.7
                            alpha = 0.5
                        }

                        ### Adding animation ###
                        state = {
                            name = "when_added"
                            next = e
                            position_y = 0
                            duration = 0.45
                            size = { 96 96 }
                            using = Animation_Curve_Default
                            trigger_when = "[DiplomaticItem.IsAdding]"
                            on_start = "[DiplomaticItem.StartAnimation]"

                            start_sound = {
                                soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_show"
                            }
                        }

                        state = {
                            name = e
                            next = f
                            position_y = 60
                            duration = 0.45
                            size = { 104 104 }
                            using = Animation_Curve_Default
                        }

                        state = {
                            name = f
                            next = a
                            position_y = 0
                            duration = 0.45
                            size = { 96 96 }
                            bezier = { 0.43 0 0.2 2.2 }
                            on_finish = "[DiplomaticItem.AddingFinished]"
                            on_finish = "[DiplomaticItem.EndAnimation]"
                        }

                        ### idle animation ###
                        state = {
                            name = "already_added"
                            duration = 0
                            size = { 96 96 }
                            trigger_when = "[DiplomaticItem.IsAdded]"
                        }

                        state = {
                            name = "when_removed"
                            duration = 0.3
                            size = { 0 0 }
                            trigger_when = "[DiplomaticItem.IsRemoving]"
                            on_start = "[DiplomaticItem.StartAnimation]"
                            on_finish = "[DiplomaticItem.RemovingFinished]"
                            on_finish = "[DiplomaticItem.EndAnimation]"
                            #start_sound = {
                            #	soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_show"
                            #}
                        }

                        state = {
                            name = _show
                            duration = 1
                            frame = 1
                            scale = 0.9
                            position = { 0 0 }
                            start_sound = {
                                soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_show"
                            }
                        }

                        state = {
                            name = _mouse_enter
                            duration = 0.05
                            frame = 2
                            position = { 0 10 }
                            scale = 1
                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_oversound"}
                        }

                        state = {
                            name = _mouse_leave
                            duration = 0.1
                            frame = 1
                            position = { 0 0 }
                            scale = 0.9
                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_oversound"}
                        }

                        state = {
                            name = _mouse_press
                            duration = 0.25
                            frame = 3
                            position = { 0 10 }
                            scale = 1
                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_mouse_press"}
                        }

                        state = {
                            name = _mouse_release
                            duration = 0.25
                            frame = 2
                            position = { 0 10 }
                            scale = 1
                            start_sound = {soundeffect = "event:/SFX/UI/Notifications/Alerts/sfx_ui_notification_alert_action_mouse_release"}
                        }
                    }

                    button_normal = {
                        size = { 0 0 }
                        shortcut = "sequence_notification"
                        visible = "[EqualTo_string(GetVariableSystem.Get( 'basic_sequence_combining' ), 'true')]"                        
                        onclick = "[DiplomaticItem.OnClick]"
                        onrightclick = "[GUIAlertItem.OnRightClick]"
                    }
                }
            }
        }

        widget = {
            widget = {
                position = { 40 0 }
                widgetid = "suggestions_placer"
            }
        }
    }

    ######################################################
    ###################### TOASTS ########################
    ######################################################
    type notifications_toasts = widget {
        name = "toast_container_widget"
        visible = "[And(ToastMessageHandler.HasMessage, Not(SinglePlayerShowingPausedSuccession))]"
        # visible = "[IsGamePaused]"
        allow_outside = yes

        state = {
            name = _show
            on_start = "[PdxGuiWidget.AccessChild('toast_icon').TriggerAnimation('show')]"
            on_start = "[PdxGuiWidget.AccessChild('toast_paper').TriggerAnimation('show')]"
            on_start = "[PdxGuiWidget.AccessChild('toast_content').TriggerAnimation('show')]"
        }

        state = {
            name = _hide
            duration = 1
            on_start = "[PdxGuiWidget.AccessChild('toast_icon').TriggerAnimation('hide')]"
            on_start = "[PdxGuiWidget.AccessChild('toast_paper').TriggerAnimation('hide')]"
            on_start = "[PdxGuiWidget.AccessChild('toast_content').TriggerAnimation('hide')]"
        }

        ### SHIELD ###
        widget = {
            name = "toast_icon"
            visible = "[Not(SinglePlayerShowingPausedSuccession)]"
            datacontext = "[ToastMessageHandler.GetMessage]"

            size = { 160 160 }
            parentanchor = center

            state = {
                name = show
                next = a
                duration = 0.15

                animation = {
                    scale = 1.6
                    bezier = { 0.7 0 0.7 1 }
                }

                animation = {
                    alpha = 1
                    bezier = { 0 0 0.4 1 }
                }
            }

            state = {
                name = a
                next = b

                duration = 0.15
                scale = 0.95
                bezier = { 0.3 0 0.7 1 }
            }

            state = {
                name = b

                duration = 0.075
                scale = 1
                bezier = { 0.6 0 0.7 1 }
            }

            state = {
                name = hide
                using = Animation_FadeOut_Quick
                scale = 0.5
            }

            state = {
                name = _hide
                using = Animation_FadeOut_Quick
            }

            icon = {
                visible = "[PlayerMessageItem.GetType.IsGood]"
                texture = "gfx/interface/hud/bg_toast_good.dds"
                parentanchor = center
                size = { 160 160 }
            }

            icon = {
                visible = "[PlayerMessageItem.GetType.IsNeutral]"
                texture = "gfx/interface/hud/bg_toast_neutral.dds"
                parentanchor = center
                size = { 160 160 }
            }

            icon = {
                visible = "[PlayerMessageItem.GetType.IsBad]"
                texture = "gfx/interface/hud/bg_toast_bad.dds"
                parentanchor = center
                size = { 160 160 }
            }
        }

        ### PAPER ###
        widget = {
            name = "toast_paper"
            visible = "[Not(SinglePlayerShowingPausedSuccession)]"
            size = { 100% 100% }

            widgetanchor = center
            parentanchor = center
            alwaystransparent = yes

            background = {
                texture = "gfx/interface/tiles/tile_title_bg_toast.dds"
                spriteType = Corneredstretched
                spriteborder = { 0 10 }
                margin = { 12 0 }
            }

            widget = {
                size = { 24 120 }
                widgetanchor = right|vcenter
                parentanchor = left|vcenter

                background = {
                    layoutpolicy_vertical = expanding
                    texture = "gfx/interface/tiles/tile_title_bg_toast_edge.dds"
                    spriteType = Corneredstretched
                    spriteborder = { 5 20 }
                }
            }

            widget = {
                size = { 24 120 }
                widgetanchor = left|vcenter
                parentanchor = right|vcenter

                background = {
                    layoutpolicy_vertical = expanding
                    texture = "gfx/interface/tiles/tile_title_bg_toast_edge.dds"
                    spriteType = Corneredstretched
                    spriteborder = { 0 20 }
                    mirror = horizontal
                }
            }

            state = {
                name = show
                next = a
                duration = 0.15

                animation = {
                    alpha = 1
                    bezier = { 0.7 0 0.7 1 }
                }
            }

            state = {
                name = a

                duration = 0.25
                bezier = { 0.3 0 0.7 1 }

                animation = {
                    size = { 585 100 }
                    bezier = { 0.8 0.3 0 1 }
                }

                animation = {
                    alpha = 1
                    bezier = { 0.7 0 0.7 1 }
                }
            }

            state = {
                name = hide
                using = Animation_FadeOut_Quick
                size = { -1 80 }
            }

            state = {
                name = _hide
                using = Animation_FadeOut_Quick
            }
        }

        ### CONTENT ###
        widget = {
            name = "toast_content"
            datacontext = "[ToastMessageHandler.GetMessage]"
            visible = "[Not(SinglePlayerShowingPausedSuccession)]"
            widgetanchor = center
            parentanchor = center
            size = { 560 100 }

            state = {
                name = show
                delay = 0.28
                using = Animation_FadeIn_Standard

                animation = {
                    size = { 560 100 }

                    bezier = { 0.8 0.3 0 1 }
                }

                animation = {
                    alpha = 1
                    bezier = { 0.7 0 0.7 1 }
                }
            }

            state = {
                name = hide
                using = Animation_FadeOut_Quick
                duration = 0.08
            }

            button = {
                shortcut = "notification_dismiss_message"
                size = { 100% 100% }
                onmousehierarchyenter = "[ToastMessageHandler.StartDelayingMessage]"
                onmousehierarchyleave = "[ToastMessageHandler.StopDelayingMessage]"
                onrightclick = "[ToastMessageHandler.DismissMessage]"
                onclick = "[ToastMessageHandler.DismissMessage]"
                button_ignore = none
            }

            hbox = {
                layoutpolicy_horizontal = expanding
                ignoreinvisible = yes

                spacer = {
                    size = { 120 90 }
                    visible = "[Not(Or(PlayerMessageItem.HasLeftCharacter,PlayerMessageItem.HasLeftTitle))]"
                }

                widget = {
                    size = { 120 90 }
                    visible = "[Or(PlayerMessageItem.HasLeftCharacter,PlayerMessageItem.HasLeftTitle)]"

                    portrait_shoulders = {
                        name = "portrait_left"
                        datacontext = "[PlayerMessageItem.GetLeftCharacter]"
                        visible = "[PlayerMessageItem.HasLeftCharacter]"
                        parentanchor = center
                        position = { 0 -25 }

                        blockoverride "opinon_box" {}
                        blockoverride "status_icons" {}
                    }

                    coa_title_medium = {
                        name = "title_left"
                        datacontext = "[PlayerMessageItem.GetLeftTitle]"
                        visible = "[PlayerMessageItem.HasLeftTitle]"
                        parentanchor = center
                    }
                }

                vbox = {
                    name = "message"
                    layoutpolicy_horizontal = expanding
                    layoutpolicy_vertical = expanding
                    spacing = 2
                    margin_bottom = 5

                    text_single = {
                        name = "title"
                        layoutpolicy_horizontal = expanding
                        margin = { 5 5 }
                        autoresize = no
                        fontsize_min = 10
                        align = center|nobaseline

                        text = "[PlayerMessageItem.GetTitle]"
                        using = Font_Type_Flavor
                        using = Font_Size_Big

                        default_format = "#light_background"
                        using = Text_Light_Background_Overrides

                        background = {
                            name = "neutral"
                            visible = "[PlayerMessageItem.GetType.IsNeutral]"
                            using = Toast_Header
                        }

                        background = {
                            name = "good"
                            visible = "[PlayerMessageItem.GetType.IsGood]"
                            tintcolor = { 0.767708 0.88325 0.3479 0.847656 }
                            using = Toast_Header
                        }

                        background = {
                            name = "bad"
                            visible = "[PlayerMessageItem.GetType.IsBad]"
                            tintcolor = { 0.949219 0.446105 0.330002 1 }
                            using = Toast_Header
                        }
                    }

                    text_multi = {
                        name = "desc"
                        layoutpolicy_horizontal = expanding
                        layoutpolicy_vertical = expanding
                        margin = { 5 5 }
                        using = Text_Light_Background_Overrides

                        align = top|hcenter

                        text = "[PlayerMessageItem.GetDescription]"

                        default_format = "#light_background"
                        format_override = { E light_background }
                        fontsize_min = 10
                    }
                }

                widget = {
                    size = { 120 90 }
                    visible = "[Or(PlayerMessageItem.HasRightCharacter,PlayerMessageItem.HasRightTitle)]"

                    portrait_shoulders = {
                        name = "portrait_right"
                        datacontext = "[PlayerMessageItem.GetRightCharacter]"
                        visible = "[PlayerMessageItem.HasRightCharacter]"
                        parentanchor = center
                        position = { 0 -25 }

                        blockoverride "opinon_box" {}
                        blockoverride "status_icons" {}
                    }

                    coa_title_medium = {
                        name = "title_left"
                        datacontext = "[PlayerMessageItem.GetRightTitle]"
                        visible = "[PlayerMessageItem.HasRightTitle]"
                        parentanchor = center
                    }
                }

                spacer = {
                    size = { 120 90 }
                    visible = "[Not(Or(PlayerMessageItem.HasRightCharacter,PlayerMessageItem.HasRightTitle))]"
                }
            }
        }
    }

    ######################################################
    ################### SUGGESTIONS ######################
    ######################################################
    type notifications_suggestions = widget {
        name = "action_items"
        visible = "[And( Not( IsPauseMenuShown ), And( Not(SinglePlayerShowingPausedSuccession), ActionItemHandler.ShouldBeVisible))]"
        alwaystransparent = no
        allow_outside = yes

        ## Suggestions / Current Situation toggle button
        button = {
            name = "suggestions_button"
            parentanchor = top|hcenter
            size = { 79 69 }
            position = { 0 -10 }
            gfxtype = togglepushbuttongfx
            effectname = "NoHighlight"
            shaderfile = "gfx/FX/pdxgui_pushbutton.shader"

            onclick = "[ActionItemHandler.ToggleList]"
            shortcut = "action_list"

            texture = "gfx/interface/hud/button_hud_suggestions.dds"

            tooltip = "ACTIONS_TT"
            using = tooltip_se

            glow = {
                using = Color_Bright_Yellow
                glow_radius = 5
                using = Glow_Standard
                alpha = 0
            }

            state = {
                name = _mouse_enter
                duration = 0.05
                frame = 2
                position = { 0 0 }

                modify_texture = {
                    name = "mouseover"
                    alpha = 1
                }
            }

            state = {
                name = _mouse_leave
                duration = 0.1
                position = { 0 -10 }

                modify_texture = {
                    name = "mouseover"
                    alpha = 0
                }
            }

            state = {
                name = _mouse_press
                scale = 1
                position = { 0 -5 }
            }

            state = {
                name = _mouse_release
                scale = 1
            }

            state = {
                name = "up_start"
                next = "up_end"
                position = { 0 0 }
                duration = 0.25
                trigger_when = "[ActionItemHandler.ActionsWentUp]"
                using = Animation_Curve_Default

                glow_alpha = 1
            }

            state = {
                name = "up_end"
                duration = 0.25
                position = { 0 -10 }
                using = Animation_Curve_Default

                glow_alpha = 0
            }

            state = {
                name = shimmer
                next = pause
                trigger_on_create = yes
                duration = 1.2
                trigger_when = "[ActionItemHandler.ActionsWentUp]"

                bezier = { 0 0.9 1 0.4 }

                modify_texture = {
                    name = "shimmer"
                    translate_uv = { -1 1 }
                }
            }

            state = {
                name = pause
                next = shimmer
                duration = 0
                delay = 5

                modify_texture = {
                    name = "shimmer"
                    translate_uv = { 1 -1 }
                }
            }

            modify_texture = {
                name = "shimmer"
                visible = "[GreaterThan_int32(ActionItemHandler.GetNumberOfActions, '(int32)0')]"
                texture = "gfx/interface/effects/alert_glow.dds"
                blend_mode = colordodge
                translate_uv = { 0.2 0.2 }
            }

            modify_texture = {
                name = "mouseover"
                visible = "[GreaterThan_int32(ActionItemHandler.GetNumberOfActions, '(int32)0')]"
                texture = "gfx/interface/effects/alert_glow.dds"
                blend_mode = colordodge
                alpha = 0
            }

            ### dangerous action
            text_single = {
                name = "actions_number_dangerous"
                visible = "[ActionItemHandler.HasDangerousAction]"
                parentanchor = center
                widgetanchor = center

                text = "[ActionItemHandler.GetNumberOfActions]"
                align = nobaseline
                using = Font_Size_Big
                default_format = "#high;glow_color:{0.1,0.1,0.1,1.0}"
                snap_to_pixels = no

                state = {
                    name = "up_start"
                    next = "up_end"
                    scale = 1.5
                    duration = 0.25
                    trigger_when = "[ActionItemHandler.ActionsWentUp]"
                }

                state = {
                    name = "up_end"
                    scale = 1
                    duration = 0.25
                }
            }

            text_single = {
                name = "actions_number"
                visible = "[Not(ActionItemHandler.HasDangerousAction)]"
                parentanchor = center

                text = "[ActionItemHandler.GetNumberOfActions]"
                align = nobaseline
                using = Font_Size_Big
                default_format = "#high;glow_color:{0.1,0.1,0.1,1.0}"
                snap_to_pixels = no

                state = {
                    name = "up_start"
                    next = "up_end"
                    scale = 1.5
                    duration = 0.25
                    trigger_when = "[ActionItemHandler.ActionsWentUp]"
                }

                state = {
                    name = "up_end"
                    scale = 1
                    duration = 0.25
                }
            }
        }

        widget = {
            visible = "[ActionItemHandler.IsListVisible]"
            parentanchor = top|right
            position = { 30 80 }
            alwaystransparent = no
            filter_mouse = all

            state = {
                name = _show
                using = Animation_FadeIn_Quick
                position_y = 80
            }

            state = {
                name = _hide
                using = Animation_FadeOut_Quick
                on_finish = "[ActionItemHandler.MarkAllItemsAsRead]"
                position_y = 40
            }

            background = {
                name = "paper_texture_shadow"
                texture = "gfx/interface/event_window/tile_letter_shadow.dds"
                spriteType = Corneredtiled
                spriteborder = { 200 200 }
            }

            background = {
                name = "paper_texture_flat"
                texture = "gfx/interface/event_window/tile_letter_flat.dds"
                spriteType = Corneredtiled
                spriteborder = { 200 200 }
                alpha = 0.9
                color = { 0.6 0.6 0.6 1 }

                modify_texture = {
                    name = "paper_texture_overlay"
                    texture = "gfx/interface/event_window/overlay_letter_texture.dds"
                    spriteType = Corneredstretched
                    blend_mode = overlay
                }
            }

            widget = {
                name = "button"
                parentanchor = top|right
                position = { -5 5 }

                background = {
                    using = Background_Area
                    mirror = vertical
                    margin_left = 55
                    margin_bottom = 55
                    modify_texture = {
                        texture = "gfx/interface/tiles/bg_corner_fade.dds"
                        blend_mode = alphamultiply
                    }
                }

                buttons_window_control = {
                    name = "close_suggestions_button"
                    resizeparent = yes

                    blockoverride "button_close" {
                        onclick = "[ActionItemHandler.ToggleList]"
                        shortcut = "close_window"
                        tooltip = "CLOSE_TOOLTIP"
                    }
                }
            }

            vbox = {
                name = "action_items_container"
                margin = { 0 15 }
                spacing = 15
                set_parent_size_to_minimum = yes
                minimumsize = { 390 50 }

                flowcontainer = {
                    visible = "[Or( Not(IsDataModelEmpty(AccessSuggestionItems) ), IsDataModelEmpty(ActionItemHandler.GetGuiActionItems ) )]"
                    direction = vertical
                    ignoreinvisible = yes
                    spacing = 10

                    text_single = {
                        parentanchor = hcenter
                        text = "CURRENT_SITUATION_SUGGESTIONS"
                        default_format = "#light_background"
                        using = Font_Size_Medium
                    }

                    flowcontainer = {
                        name = "suggestion_items"
                        datamodel = "[AccessSuggestionItems]"
                        layoutpolicy_horizontal = expanding
                        direction = vertical

                        item = {
                            button_suggestion_item = {
                                minimumsize = { 340 0 }
                            }
                        }
                    }
                }

                flowcontainer = {
                    direction = vertical
                    ignoreinvisible = yes
                    allow_outside = yes

                    container = {
                        parentanchor = hcenter
                        allow_outside = yes

                        text_single = {
                            parentanchor = hcenter
                            text = "CURRENT_SITUATION_HEADER"
                            align = nobaseline
                            default_format = "#light_background"
                            max_width = 300
                            using = Font_Size_Medium
                        }

                        widget = {
                            allow_outside = yes
                            parentanchor = right

                            button_change = {
                                name = "reset_dismissed"
                                widgetanchor = left
                                position = { 5 -2 }
                                onclick = "[ActionItemHandler.ResetAllDismissed]"
                                tooltip = "RESET_DISMISSED_TOOLTIP"

                                background = {
                                    using = Background_Area
                                    mirror = horizontal
                                    margin = { 8 3 }

                                    tintcolor = { 0.22 0.16 0.04 0.5 }

                                    modify_texture = {
                                        texture = "gfx/interface/tiles/tile_fade_mask_3.dds"
                                        blend_mode = alphamultiply
                                    }
                                }
                            }
                        }
                    }

                    spacer = {
                        size = { 5 5 }
                    }

                    scrollbox = {
                        visible = "[Not(IsDataModelEmpty(ActionItemHandler.GetGuiActionItems))]"
                        layoutpolicy_horizontal = expanding
                        maximumsize = { -1 600 }

                        blockoverride "scrollbox_background_fade" {}
                        blockoverride "scrollbox_background" {}

                        blockoverride "scrollbox_margins"
                        {
                            margin_bottom = 15
                            margin_left = 14
                            margin_right = 14
                        }

                        blockoverride "scrollbox_content" {
                            name = "current_situation"
                            datamodel = "[ActionItemHandler.GetGuiActionItems]" 
                            layoutpolicy_horizontal = expanding
                            set_parent_size_to_minimum = yes
                            spacing = 5

                            item = {
                                flowcontainer = {
                                    ignoreinvisible = yes
                                    minimumsize = { 340 0 }
                                    direction = vertical

                                    button_current_situation_item = {
                                        visible = "[Not(GuiActionItem.HasMultipleActions)]"
                                        datacontext = "[GuiActionItem.GetFirstVisibleActionItem]"
                                        minimumsize = { 340 0 }
                                    }

                                    button_standard_list = {
                                        minimumsize = { 340 0 }
                                        visible = "[GuiActionItem.HasMultipleActions]"

                                        onclick = "[GuiActionItem.OnClick]"
                                        onrightclick = "[GuiActionItem.Dismiss]"
                                        button_ignore = none
                                        tooltip = "[GuiActionItem.GetCombinedTooltip]"

                                        hbox = {
                                            restrictparent_min = yes
                                            margin = { 10 5 }
                                            spacing = 5

                                            background = {
                                                using = Background_Area
                                            }

                                            background = {
                                                visible = "[GuiActionItem.HasAnyActionIsDangerous]"
                                                margin = { 2 0 }
                                                margin_bottom = -3
                                                using = Status_Bad

                                                alpha = 0.5
                                            }

                                            background = {
                                                visible = "[Not(GuiActionItem.HasAnyActionIsDangerous)]"
                                                margin_bottom = -3
                                                margin = { 2 0 }
                                                using = Status_Good

                                                alpha = 0.5
                                            }

                                            icon = {
                                                name = "Expand"
                                                texture = "gfx/interface/buttons/button_tree_expand.dds"
                                                framesize = { 36 36 }
                                                size = { 22 22 }
                                                frame = "[BoolTo1And2(GuiActionItem.IsExpanded)]"
                                            }

                                            text_multi = {
                                                layoutpolicy_horizontal = expanding
                                                autoresize = yes
                                                max_width = 280
                                                text = "IMPORTANT_ACTION_COMBINED_LABEL"

                                                format_override = { high light_background }
                                                format_override = { weak light_background }
                                            }

                                            text_single = {
                                                text = "[GuiActionItem.GetNumberOfItems]"
                                                align = nobaseline
                                            }
                                        }
                                    }

                                    flowcontainer = {
                                        name = "expanded_action_items"
                                        datamodel = "[GuiActionItem.GetImportantActionItems]"
                                        visible = "[GuiActionItem.IsExpanded]"
                                        direction = vertical
                                        spacing = 3

                                        margin_left = 10
                                        margin_top = 3
                                        margin_bottom = 5

                                        item = {
                                            button_current_situation_item_combined = {
                                                datacontext = "[GuiActionImportantActionItem.GetImportantAction]"
                                                minimumsize = { 330 0 }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    ######################################################
    ################### MESSAGE FEED #####################
    ######################################################
    type notifications_message_feed = flowcontainer {
        name = "message_feed_widget"
        visible = "[And(And( Not(SinglePlayerShowingPausedSuccession), IsDefaultGUIMode), Not(IsPauseMenuShown))]"
        parentanchor = bottom|right
        alwaystransparent = yes
        ignoreinvisible = yes

        flowcontainer = {
            direction = vertical
            ignoreinvisible = yes

            widget = {
                size = { 450 0 }

                state = {
                    name = _show
                    using = Animation_FadeIn_Standard
                }

                state = {
                    name = _hide
                    using = Animation_FadeOut_Quick
                }

                vbox = {
                    name = "message_feed"
                    datamodel = "[MessageFeedHandler.GetItems]"
                    set_parent_size_to_minimum = yes

                    expand = {}

                    item = {
                        vbox = {
                            layoutpolicy_vertical = growing
                            layoutpolicy_horizontal = expanding
                            datacontext = "[FeedMessageItem.GetPlayerMessageItem]"
                            spacing = 2
                            alwaystransparent = no
                            filter_mouse = all

                            state = {
                                name = "mark_to_delete"
                                trigger_when = "[FeedMessageItem.IsSetToDelete]"
                                on_start = "[FeedMessageItem.StartAnimation]"
                                on_finish = "[FeedMessageItem.EndAnimation]"
                                on_finish = "[FeedMessageItem.Delete]"
                                duration = 0.3
                                alpha = 0
                                using = Animation_Curve_Default
                            }

                            background = {
                                using = Background_Area_Dark
                            }

                            button = {
                                name = "header"
                                layoutpolicy_horizontal = expanding
                                size = { 0 32 }
                                onclick = "[FeedMessageItem.Expand]"
                                onrightclick = "[FeedMessageItem.MarkToDelete]"
                                button_ignore = none

                                tooltip = "MESSAGE_CLICK_TOOLTIP"

                                background = {
                                    name = "neutral"
                                    visible = "[PlayerMessageItem.GetType.IsNeutral]"
                                    using = Feed_Message_Header
                                }

                                background = {
                                    name = "good"
                                    visible = "[PlayerMessageItem.GetType.IsGood]"
                                    using = Feed_Message_Header
                                    tintcolor = { 0.767708 0.78125 0.3479 0.847656 }
                                }

                                background = {
                                    name = "bad"
                                    visible = "[PlayerMessageItem.GetType.IsBad]"
                                    using = Feed_Message_Header
                                    tintcolor = { 0.949219 0.446105 0.330002 0.847656 }
                                }

                                hbox = {
                                    margin_right = 10
                                    margin_left = 5
                                    spacing = 5

                                    icon = {
                                        name = "message_type"
                                        size = { 28 28 }
                                        texture = "[PlayerMessageItem.GetType.GetIcon]"
                                        tooltip = "[PlayerMessageItem.GetTooltip]"
                                    }

                                    text_single = {
                                        name = "title"
                                        layoutpolicy_horizontal = expanding
                                        text = "[PlayerMessageItem.GetTitle]"
                                        using = Font_Size_Medium
                                        align = nobaseline
                                        max_width = 355
                                        fontsize_min = 14
                                    }

                                    text_single = {
                                        name = "date"
                                        text = "[PlayerMessageItem.GetDate.GetStringShortNoYear]"
                                        align = nobaseline
                                    }
                                }
                            }

                            widget = {
                                name = "message_feed_text_area"
                                layoutpolicy_horizontal = expanding
                                size = { 450 0 }
                                scissor = yes

                                state = {
                                    name = "hide_text_1"
                                    next = "hide_text_2"
                                    trigger_when = "[FeedMessageItem.ShouldHide]"
                                    duration = 0
                                    size = { 450 180 }
                                }

                                state = {
                                    name = "hide_text_2"
                                    on_start = "[FeedMessageItem.StartAnimation]"
                                    on_finish = "[FeedMessageItem.EndAnimation]"
                                    on_finish = "[FeedMessageItem.ClickedHideFinished]"
                                    size = { 450 0 }
                                    using = Animation_FadeOut_Quick
                                    duration = 0
                                }

                                state = {
                                    name = "hide_text_clicked"
                                    trigger_when = "[FeedMessageItem.ClickedHide]"
                                    on_start = "[FeedMessageItem.StartAnimation]"
                                    on_finish = "[FeedMessageItem.EndAnimation]"
                                    on_finish = "[FeedMessageItem.ClickedHideFinished]"
                                    size = { 450 0 }
                                    using = Animation_FadeOut_Quick
                                    duration = 0
                                }

                                state = {
                                    name = "show_text_hidden"
                                    trigger_when = "[Not(FeedMessageItem.IsExpanded)]"
                                    duration = 0
                                    size = { 450 0 }
                                }

                                state = {
                                    name = "show_text_clicked"
                                    trigger_when = "[FeedMessageItem.ClickedExpand]"
                                    on_start = "[FeedMessageItem.StartAnimation]"
                                    on_finish = "[FeedMessageItem.EndAnimation]"
                                    on_finish = "[FeedMessageItem.ClickedExpandFinished]"
                                    size = { 450 180 }
                                    using = Animation_FadeIn_Standard
                                    duration = 0
                                }


                                state = {
                                    name = "show_text"
                                    trigger_when = "[FeedMessageItem.ShouldShow]"
                                    #  trigger_when = "[Or(FeedMessageItem.ClickedExpand, FeedMessageItem.ShouldShow)]"
                                    on_start = "[FeedMessageItem.StartAnimation]"
                                    on_finish = "[FeedMessageItem.EndAnimation]"
                                    on_finish = "[FeedMessageItem.ClickedExpandFinished]"
                                    size = { 450 180 }
                                    using = Animation_FadeIn_Standard
                                    duration = 0.2
                                }

                                state = {
                                    name = "show_text_expanded"
                                    trigger_when = "[FeedMessageItem.IsExpanded]"
                                    duration = 0
                                    size = { 450 180 }
                                }

                                hbox = {
                                    name = "text_and_icons"
                                    layoutpolicy_horizontal = expanding
                                    layoutpolicy_vertical = expanding
                                    margin_right = 10

                                    state = {
                                        name = appear
                                        using = Animation_FadeIn_Quick
                                        trigger_when = "[Or(FeedMessageItem.ClickedExpand, FeedMessageItem.ShouldShow)]"
                                    }

                                    state = {
                                        name = disappear
                                        using = Animation_FadeOut_Quick
                                        trigger_when = "[FeedMessageItem.ShouldHide]"
                                    }

                                    feed_msg_different_width_text_hack = {
                                        name = "no_icons"
                                        visible = [PlayerMessageItem.NoIcons]

                                        blockoverride "hack_max_width"
                                        {
                                            max_width = 440#450-0
                                        }

                                    }

                                    feed_msg_different_width_text_hack = {
                                        name = "one_icon"
                                        visible = [PlayerMessageItem.OneIcon]

                                        blockoverride "hack_max_width"
                                        {
                                            max_width = 345#450-95
                                        }
                                    }

                                    feed_msg_different_width_text_hack = {
                                        name = "two_icons"
                                        visible = [PlayerMessageItem.TwoIcons]

                                        blockoverride "hack_max_width"
                                        {
                                            max_width = 250#450-95*2
                                        }
                                    }

                                    vbox = {
                                        layoutpolicy_vertical = expanding
                                        margin_top = 5
                                        margin_bottom = 15

                                        hbox = {
                                            portrait_head_small = {
                                                name = "portrait_left"
                                                datacontext = "[PlayerMessageItem.GetLeftCharacter]"
                                                visible = "[PlayerMessageItem.HasLeftCharacter]"
                                            }

                                            coa_title_medium = {
                                                name = "title_left"
                                                datacontext = "[PlayerMessageItem.GetLeftTitle]"
                                                visible = "[PlayerMessageItem.HasLeftTitle]"
                                            }

                                            portrait_head_small = {
                                                name = "portrait_right"
                                                datacontext = "[PlayerMessageItem.GetRightCharacter]"
                                                visible = "[PlayerMessageItem.HasRightCharacter]"
                                            }

                                            coa_title_medium = {
                                                name = "title_right"
                                                datacontext = "[PlayerMessageItem.GetRightTitle]"
                                                visible = "[PlayerMessageItem.HasRightTitle]"
                                            }
                                        }

                                        expand = {}
                                    }
                                }
                            }
                        }
                    }
                }
            }

            widget = {
                name = "push_up"
                size = { 0 80 }
                visible = "[Not(GetVariableSystem.Exists( 'right_window_open'))]"
            }
        }

        widget = {
            name = "push_left"
            size = { 630 0 }
            visible = "[GetVariableSystem.Exists( 'right_window_open')]"
        }
    }
}

template message_feed_text
{
    direction = vertical

    container = {

        widget = {
            block "WidgetSize"
            {
                size = { 200 22 }
            }
            name = "header"

        }
    }

    container = {
        text_multi = {
            position = { 12 4 }
            name = "effect"
            autoresize = yes
            block "MaxEffectSize"
            {
                maximumsize = { 200 -1 }
            }
            minimumsize = { -1 -1 }
            align = left|nobaseline
            parentanchor = left
            text = "[PlayerMessageItem.GetTooltip]"
        }
    }
}

template Toast_Header
{
    texture = "gfx/interface/tiles/tile_title_bg_toast_header.dds"
    spriteType = Corneredstretched
    spriteborder = { 5 5 }
    margin = { 50 -3 }
    alpha = 0.5

    modify_texture = {
        texture = "gfx/interface/tiles/tile_fade_mask_3.dds"
        spriteType = Corneredstretched
        blend_mode = alphamultiply
    }
}

template Feed_Message_Header
{
    texture = "gfx/interface/tiles/tile_header_background_01.dds"
    spriteType = Corneredtiled
    spriteborder_top = 3
    spriteborder_bottom = 3

    modify_texture = {
        name = "mask"
        texture = "gfx/interface/tiles/tile_fade_mask_3.dds"
        spriteType = Corneredtiled
        spriteborder_left = 140
        spriteborder_right = 140
        blend_mode = alphamultiply
        alpha = 0.5
    }
}

types Suggestions
{
    type button_suggestion_item = button_standard_list {
        shortcut = "notification_icon"
        onclick = "[SuggestionItem.OnClick]"
        onrightclick = "[SuggestionItem.Dismiss]"
        button_ignore = none
        tooltip = "[SuggestionItem.GetTooltip]"

        layoutpolicy_horizontal = expanding

        hbox = {
            margin = { 10 5 }
            margin_right = 5
            restrictparent_min = yes

            background = {
                using = Background_Area
            }

            background = {
                margin = { 2 0 }
                margin_bottom = -2
                using = Status_Suggestion
                alpha = 0.5
            }

            text_single = {
                layoutpolicy_horizontal = expanding
                align = nobaseline
                text = "[SuggestionItem.GetLabel]"
            }

            button_cancel = {
                name = "dismiss"
                tooltip = "DISMISS"
                onclick = "[SuggestionItem.Dismiss]"
            }
        }
    }

    type button_current_situation_item = button_standard_list {
        visible = "[ImportantActionItem.IsVisible]"
        minimumsize = { 350 0 }

        onclick = "[ImportantActionItem.OnClick]"
        onrightclick = "[ImportantActionItem.Dismiss]"
        button_ignore = none
        tooltip = "[ImportantActionItem.GetTooltip]"

        layoutpolicy_horizontal = expanding

        hbox = {
            margin = { 10 5 }
            margin_right = 5
            restrictparent_min = yes

            text_multi = {
                autoresize = yes
                max_width = 280
                min_width = 280

                text = "ACTION_IS_VISIBLE_READ_UNREAD"
            }

            expand = {}

            background = {
                using = Background_Area
            }

            background = {
                visible = "[ImportantActionItem.GetActionType.IsDangerous]"
                margin = { 2 3 }
                margin_bottom = -2
                using = Status_Bad
                alpha = 0.5
            }

            background = {
                visible = "[Not(ImportantActionItem.GetActionType.IsDangerous)]"
                margin = { 2 -3 }
                margin_bottom = -2
                using = Status_Good
                alpha = 0.5
            }

            button_cancel = {
                name = "dismiss"
                tooltip = "DISMISS"
                onclick = "[ImportantActionItem.Dismiss]"
            }
        }
    }

    type button_current_situation_item_combined = button_standard_list {
        visible = "[ImportantActionItem.IsVisible]"
        onclick = "[ImportantActionItem.OnClick]"
        onrightclick = "[ImportantActionItem.Dismiss]"
        button_ignore = none
        tooltip = "[ImportantActionItem.GetTooltip]"

        hbox = {
            margin = { 10 5 }
            margin_right = 5
            restrictparent_min = yes

            background = {
                using = Background_Area
            }

            background = {
                visible = "[ImportantActionItem.GetActionType.IsDangerous]"
                margin = { 2 -3 }
                margin_bottom = -2
                using = Status_Bad
                alpha = 0.5
                tintcolor = { 0.6 0.6 0.65 1 }
            }

            background = {
                visible = "[Not(ImportantActionItem.GetActionType.IsDangerous)]"
                margin = { 2 -3 }
                margin_bottom = -2
                using = Status_Good
                alpha = 0.5
                tintcolor = { 0.4 0.45 0.4 1 }
            }

            text_multi = {
                layoutpolicy_horizontal = expanding
                autoresize = yes
                max_width = 280

                align = nobaseline
                text = "ACTION_IS_VISIBLE_READ_UNREAD_COMBINED"
            }

            expand = {}

            button_cancel = {
                name = "dismiss"
                tooltip = "DISMISS"
                onclick = "[ImportantActionItem.Dismiss]"
            }
        }
    }
}

types MessageFeed
{
    # Want to do it properly somehow, not different widths!
    type feed_msg_different_width_text_hack = widget {
        layoutpolicy_vertical = growing
        layoutpolicy_horizontal = expanding

        text_multi = {
            name = "effect"
            autoresize = yes
            resizeparent = yes

            margin = { 20 10 }

            text = "[PlayerMessageItem.GetDescription]"

            block "hack_max_width"
            {
                max_width = 200
            }
        }
    }
}
