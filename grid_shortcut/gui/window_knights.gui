######################################################
################# KNIGHTS VIEW ###################
######################################################

window = {
	datacontext = "[KnightsView.GetMilitaryView]"
	name = "knight_view"
	size = { 540 865 }
	parentanchor = top|right
	position = { -626 170 }
	movable = no
	layer = middle

	using = Window_Background_Subwindow

	state = {
		name = _show
		using = Animation_FadeIn_Quick

		position = { -626 170 }
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick

		position_x = -570
	}

	vbox = {
		margin = { 4 4 }
		spacing = 5

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = KV_HEADER
			}

			blockoverride "button_close"
			{
				onclick = "[KnightsView.Close]"

			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			margin = { 10 0 }
			margin_bottom = 5

			text_label_center = {
				name = "knights_cap"
				text = "MAX_KNIGHT_COUNT"
				tooltip = "MAX_KNIGHT_TOOLTIP"
				default_format = "#low"
			}

			text_label_center = {
				name = "knights_effectiveness"

				text = "KNIGHT_EFFECTIVENESS"
				tooltip = "KNIGHT_EFFECTIVENESS_TOOLTIP"
				default_format = "#low"
			}
		}

		button_decision_entry = {
			name = "invite_knights_decision"
			shortcut = "military_knights_invite"
			shortcut = "military_knights_invite_2"
			datacontext = "[GetDecisionWithKey('invite_knights_decision')]"
			visible = "[Decision.IsShownForPlayer]"
			onclick = "[OpenDecisionDetailView( Decision.Self )]"
		}

		spacer = {
			size = { 10 10 }
		}

		text_label_center = {
			name = "knights_effectiveness"
			text = "KNIGHTS_SUBHEADER"
			default_format = "#medium"
		}

		scrollbox = {
			name = "knights"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding

			blockoverride "scrollbox_content" {
				name = "knights"
				datamodel = "[MilitaryView.GetKnights]"
				spacing = 10

				item = {
					widget = {
						layoutpolicy_horizontal = expanding
						size = { 0 130 }

						using = Background_Guest

						blockoverride "Background_Guest_pattern_visible"
						{
							visible = "[Character.IsGuest]"
							margin_bottom = -5
							margin_right = 5
						}
						blockoverride "Background_Guest_frame_visible"
						{
							visible = "[Character.IsGuest]"
							margin_left = 3
							margin_bottom = -5
							margin_top = 1
							margin_right = 5
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							spacing = 7

							hbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin_right = 5
								spacing = 10

								portrait_head = {
									alpha = "[Select_float( Character.IsKnight, '(float)1.0', '(float)0.6' )]"
								}


								vbox = {
									layoutpolicy_vertical = expanding
									layoutpolicy_horizontal = expanding
									spacing = 10
									margin_top = 15

									hbox = {
										layoutpolicy_horizontal = expanding

										hbox = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding

											icon = {
												visible = "[Character.IsKnight]"
												texture = "gfx/interface/icons/icon_knight_small.dds"
												size = { 40 40 }
											}

											vbox = {
												layoutpolicy_horizontal = expanding
												layoutpolicy_vertical = expanding

												text_single = {
													layoutpolicy_horizontal = expanding
													text = "[Character.GetNameNoTooltip]"
													using = Font_Size_Medium
													autoresize = no
												}


												text_single = {
													layoutpolicy_horizontal = expanding
													text = "[Character.GetRelationToString( GetPlayer )]"
													default_format = "#low"
													autoresize = no
													align = nobaseline
												}

												expand = {}
											}
										}

										vbox = {
											layoutpolicy_vertical = expanding
											margin = { 10 0 }

											text_label_center  = {
												text = "[prowess_i][Character.GetSkill( 'prowess' )]"
												using = Font_Size_Big
												default_format = "#high"
											}

											expand = {}
										}
									}

									hbox = {
										visible = "[Not(Character.IsGuest)]"
										layoutpolicy_horizontal = expanding
										spacing = 10

										button_standard = {
											size = { 90 33 }
											onclick = "[MilitaryView.SetKnightForced( Character.Self )]"
											down = "[Character.IsKnightForced]"
											alwaystransparent = "[Character.IsKnightForced]"

											text = "KNIGHTS_VIEW_FORCE"

											tooltip = "KNIGHTS_VIEW_TITLE_FORCE_TT"
											using = tooltip_se
										}

										button_standard = {
											size = { 90 33 }
											onclick = "[MilitaryView.SetKnightDefault( Character.Self )]"
											down = "[Character.IsKnightDefault]"
											alwaystransparent = "[Character.IsKnightDefault]"

											text = "KNIGHTS_VIEW_ALLOW"

											tooltip = "KNIGHTS_VIEW_TITLE_BY_PROWESS_TT"
											using = tooltip_se
										}

										button_standard = {
											size = { 90 33 }
											onclick = "[MilitaryView.SetKnightDisallowed( Character.Self )]"
											down = "[Character.IsKnightDisallowed]"
											alwaystransparent = "[Character.IsKnightDisallowed]"

											text = "KNIGHTS_VIEW_FORBID"

											tooltip = "KNIGHTS_VIEW_TITLE_FORBID_TT"
											using = tooltip_se
										}

										expand = {}
									}

									hbox = {
										visible = "[Character.IsGuest]"
										layoutpolicy_horizontal = expanding
										spacing = 10

										button_standard = {
											visible = "[Character.IsPlayerInteractionShown('recruit_guest_interaction')]"
											enabled = "[Character.IsPlayerInteractionValid('recruit_guest_interaction')]"
											onclick = "[Character.OpenPlayerInteraction('recruit_guest_interaction')]"
											text = "[Character.GetPlayerInteractionName('recruit_guest_interaction')]"
											tooltip = "[Character.GetPlayerInteractionTooltip('recruit_guest_interaction')]"
											using = tooltip_se
										}

										expand = {}
									}

									expand = {}
								}


							}

							divider = {
								layoutpolicy_horizontal = expanding
							}
						}
					}
				}
			}
		}
	}
}

