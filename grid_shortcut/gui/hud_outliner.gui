window = {
	name = "outliner_window"
	parentanchor = top|right
	position = { -40 45 }
	alwaystransparent = no
	movable = yes
	filter_mouse = all
	layer = windows_layer
	visible = "[Not( IsPauseMenuShown )]"

	state = { 
		name = "_show"
		on_start = "[GetVariableSystem.Set( 'cycle_army_selected', 'true' )]"
	}

	state = {
		name = _show
		using = Animation_FadeIn_Quick

		start_sound = {
			soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_tab_sub"
			soundparam = {
				name = StateChange
				value = 1.0
			}
			soundparam = {
				name = PanChange
				value = 1.2
			}
		}
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		start_sound = {
			soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_tab_sub"
			soundparam = {
				name = StateChange
				value = 1.5
			}
			soundparam = {
				name = PanChange
				value = 1.2
			}
		}
	}

	state = {
		name = "hide_outliner"
		using = Animation_FadeOut_Quick
		trigger_when = "[Not(IsDefaultGUIMode)]"
	}

	state = {
		name = "show_outliner"
		using = Animation_FadeIn_Quick
		trigger_when = "[IsDefaultGUIMode]"
	}

	# shortcuts 
	# characters
	vbox = {
		size = { 0 0 }
		datamodel = "[Outliner.GetPinnedCharacters]"
		item = {
			container = { 
				# quickslots 

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_1"
					onclick = "[DefaultOnCharacterClick(Character.GetID)]"
					visible = "[EqualTo_string(GetVariableSystem.Get('quickslot_1'), Character.GetFullName)]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_2"
					onclick = "[DefaultOnCharacterClick(Character.GetID)]"
					visible = "[EqualTo_string(GetVariableSystem.Get('quickslot_2'), Character.GetFullName)]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_3"
					onclick = "[DefaultOnCharacterClick(Character.GetID)]"
					visible = "[EqualTo_string(GetVariableSystem.Get('quickslot_3'), Character.GetFullName)]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_4"
					onclick = "[DefaultOnCharacterClick(Character.GetID)]"
					visible = "[EqualTo_string(GetVariableSystem.Get('quickslot_4'), Character.GetFullName)]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_5"
					onclick = "[DefaultOnCharacterClick(Character.GetID)]"
					visible = "[EqualTo_string(GetVariableSystem.Get('quickslot_5'), Character.GetFullName)]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_set_1"
					onclick = "[GetVariableSystem.Set( 'quickslot_1',  Character.GetFullName)]"
					visible = "[Character.IsShownInCharacterWindow]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_set_2"
					onclick = "[GetVariableSystem.Set( 'quickslot_2',  Character.GetFullName)]"
					visible = "[Character.IsShownInCharacterWindow]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_set_3"
					onclick = "[GetVariableSystem.Set( 'quickslot_3',  Character.GetFullName)]"
					visible = "[Character.IsShownInCharacterWindow]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_set_4"
					onclick = "[GetVariableSystem.Set( 'quickslot_4',  Character.GetFullName)]"
					visible = "[Character.IsShownInCharacterWindow]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_set_5"
					onclick = "[GetVariableSystem.Set( 'quickslot_5',  Character.GetFullName)]"
					visible = "[Character.IsShownInCharacterWindow]"
				}
			}
		}
	}
	
	# units
	vbox = {
		name = "hidden_unit"
		datamodel = "[Outliner.GetUnitItems]"
		size = { 0 0 }
		item = {
			container = { 
				button_normal  = {
					size = { 0 0 }
					shortcut = "outliner_cycle_army"
					onclick = "[GetVariableSystem.Toggle( 'cycle_army_selected' )]"
					onclick = "[UnitItem.SelectAndPanUnit]"
					onclick = "[GetVariableSystem.Toggle(Concatenate('cycle_army_', UnitItem.GetArmy.GetNameNoTooltip))]"
				}

				# quickslots 

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_1"
					onclick = "[UnitItem.SelectAndPanUnit]"
					visible = "[EqualTo_string(GetVariableSystem.Get('quickslot_1'), UnitItem.GetArmy.GetNameNoTooltip)]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_2"
					onclick = "[UnitItem.SelectAndPanUnit]"
					visible = "[EqualTo_string(GetVariableSystem.Get('quickslot_2'), UnitItem.GetArmy.GetNameNoTooltip)]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_3"
					onclick = "[UnitItem.SelectAndPanUnit]"
					visible = "[EqualTo_string(GetVariableSystem.Get('quickslot_3'), UnitItem.GetArmy.GetNameNoTooltip)]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_4"
					onclick = "[UnitItem.SelectAndPanUnit]"
					visible = "[EqualTo_string(GetVariableSystem.Get('quickslot_4'), UnitItem.GetArmy.GetNameNoTooltip)]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_5"
					onclick = "[UnitItem.SelectAndPanUnit]"
					visible = "[EqualTo_string(GetVariableSystem.Get('quickslot_5'), UnitItem.GetArmy.GetNameNoTooltip)]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_set_1"
					onclick = "[GetVariableSystem.Set( 'quickslot_1',  UnitItem.GetArmy.GetNameNoTooltip)]"
					visible = "[UnitItem.IsSelected]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_set_2"
					onclick = "[GetVariableSystem.Set( 'quickslot_2',  UnitItem.GetArmy.GetNameNoTooltip)]"
					visible = "[UnitItem.IsSelected]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_set_3"
					onclick = "[GetVariableSystem.Set( 'quickslot_3',  UnitItem.GetArmy.GetNameNoTooltip)]"
					visible = "[UnitItem.IsSelected]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_set_4"
					onclick = "[GetVariableSystem.Set( 'quickslot_4',  UnitItem.GetArmy.GetNameNoTooltip)]"
					visible = "[UnitItem.IsSelected]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_set_5"
					onclick = "[GetVariableSystem.Set( 'quickslot_5',  UnitItem.GetArmy.GetNameNoTooltip)]"
					visible = "[UnitItem.IsSelected]"
				}
			}
		}
	}

	vbox = {
		name = "hidden_unit_2"
		datamodel = "[Outliner.GetUnitItems]"
		size = { 0 0 }
		item = {
			container = { 
				datacontext = "[UnitItem.GetArmy]"
				
				button_normal = {
					size = { 0 0 }
					shortcut = "outliner_cycle_army"
					onclick = "[UnitItem.SelectAndPanUnit]"
					onclick = "[GetVariableSystem.Toggle(Concatenate('cycle_army_', Army.GetNameNoTooltip))]"
					visible = "[EqualTo_string(GetVariableSystem.Get(Concatenate('cycle_army_', Army.GetNameNoTooltip)), GetVariableSystem.Get('cycle_army_selected'))]"
				}

				button_normal = {
					size = { 0 0 }
					shortcut = "outliner_go_to_army"
					onclick = "[UnitItem.PanToUnit]"
					visible = "[UnitItem.IsSelected]"
				}	
			}
		}
	}

	# domain
	vbox = {
		size = { 0 0 }
		datamodel = "[Outliner.GetHoldingItems]"
		item = {
			container = { 
				datacontext = "[OutlinerHoldingItem.GetHolding]"
				# quickslots 

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_1"
					onclick = "[OutlinerHoldingItem.OnClick]"
					visible = "[EqualTo_string(GetVariableSystem.Get('quickslot_1'), Holding.GetProvince.GetNameNoTooltip)]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_2"
					onclick = "[OutlinerHoldingItem.OnClick]"
					visible = "[EqualTo_string(GetVariableSystem.Get('quickslot_2'), Holding.GetProvince.GetNameNoTooltip)]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_3"
					onclick = "[OutlinerHoldingItem.OnClick]"
					visible = "[EqualTo_string(GetVariableSystem.Get('quickslot_3'), Holding.GetProvince.GetNameNoTooltip)]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_4"
					onclick = "[OutlinerHoldingItem.OnClick]"
					visible = "[EqualTo_string(GetVariableSystem.Get('quickslot_4'), Holding.GetProvince.GetNameNoTooltip)]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_5"
					onclick = "[OutlinerHoldingItem.OnClick]"
					visible = "[EqualTo_string(GetVariableSystem.Get('quickslot_5'), Holding.GetProvince.GetNameNoTooltip)]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_set_1"
					onclick = "[GetVariableSystem.Set( 'quickslot_1',  Holding.GetProvince.GetNameNoTooltip)]"
					visible = "[Or(Holding.IsHovered, Holding.IsSelected)]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_set_2"
					onclick = "[GetVariableSystem.Set( 'quickslot_2',  Holding.GetProvince.GetNameNoTooltip)]"
					visible = "[Or(Holding.IsHovered, Holding.IsSelected)]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_set_3"
					onclick = "[GetVariableSystem.Set( 'quickslot_3',  Holding.GetProvince.GetNameNoTooltip)]"
					visible = "[Or(Holding.IsHovered, Holding.IsSelected)]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_set_4"
					onclick = "[GetVariableSystem.Set( 'quickslot_4',  Holding.GetProvince.GetNameNoTooltip)]"
					visible = "[Or(Holding.IsHovered, Holding.IsSelected)]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_set_5"
					onclick = "[GetVariableSystem.Set( 'quickslot_5',  Holding.GetProvince.GetNameNoTooltip)]"
					visible = "[Or(Holding.IsHovered, Holding.IsSelected)]"
				}
			}
		}
	}

	# player
	vbox = {
		size = { 0 0 }
		datamodel = "[Outliner.GetPlayers]"
		visible = "[GameHasMultiplePlayers]"
		item = {
			container = { 
				datacontext = "[OutlinerPlayer.GetCharacter]"
				# quickslots 

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_1"
					onclick = "[DefaultOnCharacterClick(Character.GetID)]"
					visible = "[EqualTo_string(GetVariableSystem.Get('quickslot_1'), OutlinerPlayer.GetName)]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_2"
					onclick = "[DefaultOnCharacterClick(Character.GetID)]"
					visible = "[EqualTo_string(GetVariableSystem.Get('quickslot_2'), OutlinerPlayer.GetName)]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_3"
					onclick = "[DefaultOnCharacterClick(Character.GetID)]"
					visible = "[EqualTo_string(GetVariableSystem.Get('quickslot_3'), OutlinerPlayer.GetName)]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_4"
					onclick = "[DefaultOnCharacterClick(Character.GetID)]"
					visible = "[EqualTo_string(GetVariableSystem.Get('quickslot_4'), OutlinerPlayer.GetName)]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_5"
					onclick = "[DefaultOnCharacterClick(Character.GetID)]"
					visible = "[EqualTo_string(GetVariableSystem.Get('quickslot_5'), OutlinerPlayer.GetName)]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_set_1"
					onclick = "[GetVariableSystem.Set( 'quickslot_1',  OutlinerPlayer.GetName)]"
					visible = "[Character.IsShownInCharacterWindow]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_set_2"
					onclick = "[GetVariableSystem.Set( 'quickslot_2',  OutlinerPlayer.GetName)]"
					visible = "[Character.IsShownInCharacterWindow]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_set_3"
					onclick = "[GetVariableSystem.Set( 'quickslot_3',  OutlinerPlayer.GetName)]"
					visible = "[Character.IsShownInCharacterWindow]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_set_4"
					onclick = "[GetVariableSystem.Set( 'quickslot_4',  OutlinerPlayer.GetName)]"
					visible = "[Character.IsShownInCharacterWindow]"
				}

				button_normal  = {
					size = { 0 0 }
					shortcut = "quickslot_set_5"
					onclick = "[GetVariableSystem.Set( 'quickslot_5',  OutlinerPlayer.GetName)]"
					visible = "[Character.IsShownInCharacterWindow]"
				}
			}
		}
	}

	flowcontainer = {
		resizeparent = yes
		margin = { 10 10 }
		margin_bottom = 15

		state = {
			name = _show
			using = Animation_FadeIn_Standard
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
		}

		background = {
			name = "paper_texture_shadow"
            texture = "gfx/interface/window_event/tile_letter_shadow.dds"
			spriteType = Corneredtiled
			spriteborder = { 200 200 }
			margin = { -15 0 }
			margin_right = -20
		}

		background = {
			name = "paper_texture_flat"
            texture = "gfx/interface/window_event/tile_letter_flat.dds"
			spriteType = Corneredtiled
			spriteborder = { 200 200 }
			alpha = 0.9
			color = { 0.6 0.6 0.6 1 }
			margin = { -15 0 }
			margin_right = -20

			modify_texture = {
				name = "paper_texture_overlay"
                texture = "gfx/interface/window_event/overlay_letter_texture.dds"
				spriteType = Corneredstretched
				blend_mode = overlay
			}
		}

		scrollarea = {
			autoresizescrollarea = yes
			scrollbarpolicy_horizontal = always_off
			maximumsize = { -1 800 }
			size = { 335 0 }

			scrollbar_vertical = {
				using = Scrollbar_Vertical
			}

			scrollwidget = {
				vbox = {
					set_parent_size_to_minimum = yes
					min_width = 310
					margin = { 10 0 }
					margin_right = 15
					spacing = 2

					button_outliner_header = {
						name = "pinned_characters_header"
						layoutpolicy_horizontal = expanding
						visible = "[Or(GameHasMultiplePlayers,Not(GetVariableSystem.Exists('pinned_character_is_simple')))]"

						blockoverride "button_expand_frame"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('pinned_character'))]"
						}

						blockoverride "oh_button"
						{
							onclick = "[Outliner.ToggleCategory('pinned_character')]"
							onrightclick = "[GetVariableSystem.Toggle('pinned_character_is_simple')]"
							tooltip = "[SelectLocalization( Outliner.IsCategoryShown('pinned_character'), 'OUTLINER_COLLAPSE', 'OUTLINER_EXPAND' )]"
							button_ignore = none
						}

						blockoverride "oh_toggle_frame"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('pinned_character'))]"
						}

						blockoverride "oh_name"
						{
							text = "OUTLINER_PINNED_CHARACTERS"
						}

						blockoverride "oh_count"
						{
							text = "[Outliner.GetCategoryItemsCount('pinned_character')|V]"
						}

						blockoverride "expanded"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('pinned_character'))]"
						}
					}

					vbox = {
						name = "pinned_characters"
						visible = "[And(Outliner.IsCategoryShown('pinned_character'),Or(GameHasMultiplePlayers,Not(GetVariableSystem.Exists('pinned_character_is_simple'))))]"
						datamodel = "[Outliner.GetPinnedCharacters]"
						layoutpolicy_horizontal = expanding
						margin = { 8 5 }
						margin_bottom = 10

						hbox = {
							layoutpolicy_horizontal = expanding
							margin_left = 5

							text_single = {
								visible = "[And(Outliner.IsCategoryShown('pinned_character'), IsDataModelEmpty(Outliner.GetPinnedCharacters))]"
								name = "no_pinned_characters"
								text = "OUTLINER_NO_PINNED_CHARACTERS"
								autoresize = yes
								default_format = "#medium;italic"
							}

							expand = {}
						}

						item = {
							hbox = {
								name = "pinned_character_item"
								layoutpolicy_horizontal = expanding
								using = character_tooltip

								button_list = {
									name = "character_button"
									layoutpolicy_horizontal = expanding
									size = { 0 75 }

									onclick = "[DefaultOnCharacterClick(Character.GetID)]"
									down = "[Character.IsShownInCharacterWindow]"
									onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
									button_ignore = none

									background = {
										using = Background_Area
									}

									hbox = {
										layoutpolicy_horizontal = expanding
										margin = { 0 -15 }

										hbox = {
											min_width = 35
											margin = { 0 5 }
											scale = 0.9

											coa_realm_tiny_crown = {
												visible = "[Character.HasLandedTitles]"
											}
										}

										vbox = {
											layoutpolicy_horizontal = expanding

											hbox = {
												layoutpolicy_horizontal = expanding

												text_single = {
													align = top|left
													layoutpolicy_horizontal = expanding
													autoresize = no
													text = "[Character.GetShortUINameNotMeNoTooltip], [Character.GetAge]"
													default_format = "#high"
												}

												expand = {}

												hbox = {
													min_width = 80

													icon = {
														visible = "[Character.IsDeadAndValid]"
														size = { 20 20 }
														texture = "[Character.GetDeathReasonIcon]"
														tooltip = "CHARACTER_DEAD_TOOLTIP"
													}

													icon = {
														visible = "[Not(Character.IsDeadAndValid)]"
														size = { 20 20 }
														framesize = { 60 60 }
														frame = "[Character.GetHealthIconFrame]"
														texture = "gfx/interface/icons/character_status/icon_health.dds"
														tooltip = "[Character.GetHealthInfo]"
													}

													text_single = {
														align = top|right
														size = { 40 20 }
														layoutpolicy_horizontal = fixed
														autoresize = no
														text = "[Character.GetOpinionOf(GetPlayer)|=]"
														fonttintcolor = "[Character.GetOpinionOfTint(GetPlayer)]"
														default_format = "#high"
													}

													expand = {}

													button_pin = {
														size = { 20 20 }
														onclick = "[Character.ToggleCharacterPinned]"
														tooltip = "PIN_TT"
													}
												}
											}

											hbox = {
												layoutpolicy_horizontal = expanding

												text_single = {
													visible = "[Character.HasRelationTo(GetPlayer)]"
													align = top|left
													layoutpolicy_horizontal = expanding
													autoresize = no
													text = "[Character.GetRelationToString(GetPlayer)]"
													default_format = "#medium"
												}

												text_single = {
													visible = "[And(Not(Character.HasRelationTo(GetPlayer)),Character.HasLandedTitles)]"
													align = top|left
													layoutpolicy_horizontal = expanding
													autoresize = no
													text = "[Character.GetPrimaryTitle.GetNameNoTooltip]"
													default_format = "#medium"
												}

												text_single = {
													visible = "[And(Not(Character.HasRelationTo(GetPlayer)),Not(Character.HasLandedTitles))]"
													align = top|left
													layoutpolicy_horizontal = expanding
													autoresize = yes
													text = "CV_NO_RELATIONS"
												}

												expand = {}

												hbox = {
													min_width = 80

													icon = {
														visible = "[Character.HasLandedTitles]"
														size = { 20 20 }
														texture = "gfx/interface/icons/icon_soldier.dds"
													}

													text_single = {
														visible = "[Character.HasLandedTitles]"
														align = top|right
														size = { 40 20 }
														layoutpolicy_horizontal = fixed
														autoresize = no
														text = "[Character.GetMilitaryStrengthText]"
														default_format = "#high"
													}

													expand = {}

													icon = {
														visible = "[Character.PlayerHasHooksOrHookableSecrets]"
														size = { 20 20 }
														framesize = { 40 40 }
														texture = "gfx/interface/icons/portraits/hook_secret.dds"
														frame = "[Character.GetHookOrHookableSecretsFrame]"
														tooltip = "[Character.HookTooltip]"
													}
												}
											}

											hbox = {
												layoutpolicy_horizontal = expanding

												icon = {
													size = { 20 20 }
													visible = "[Character.IsAtWar]"
													texture = "gfx/interface/icons/icon_banner.dds"
													tooltip = "At War"
												}

												expand = {}

												hbox = {
													min_width = 61 

													text_single = {
														align = top|right
														size = { 50 20 }
														layoutpolicy_horizontal = fixed
														autoresize = no
														default_format = "#medium"
														text = "([Character.GetBalance|=])"
													}

													expand = {}
												}

												hbox = {
													min_width = 80 

													icon = {
														size = { 20 20 }
														texture = "gfx/interface/icons/icon_gold.dds"
													}

													text_single = {
														align = top|right
														size = { 40 20 }
														layoutpolicy_horizontal = fixed
														autoresize = no
														default_format = "#high"
														text = "[Character.GetGold|0]"
													}

													expand = {}
												}
											}
										}
									}
								}
							}
						}
					}

					# display

					button_outliner_header = {
						layoutpolicy_horizontal = expanding
						visible = "[And(Not(GameHasMultiplePlayers),GetVariableSystem.Exists('pinned_character_is_simple'))]"

						blockoverride "button_expand_frame"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('pinned_character'))]"
						}

						blockoverride "oh_button"
						{
							onclick = "[Outliner.ToggleCategory('pinned_character')]"
							onrightclick = "[GetVariableSystem.Toggle('pinned_character_is_simple')]"
							tooltip = "[SelectLocalization( Not(Outliner.IsCategoryShown('players')), 'OUTLINER_COLLAPSE', 'OUTLINER_EXPAND' )]"
							button_ignore = none
						}

						blockoverride "oh_toggle_frame"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('pinned_character'))]"
						}

						blockoverride "oh_name"
						{
							text = "OUTLINER_PINNED_CHARACTERS"
						}

						blockoverride "oh_count"
						{
							text = "[Outliner.GetCategoryItemsCount('pinned_character')|V]"
						}

						blockoverride "expanded"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('pinned_character'))]"
						}
					}

					vbox = {
						visible = "[And(Outliner.IsCategoryShown('pinned_character'),And(Not(GameHasMultiplePlayers),GetVariableSystem.Exists('pinned_character_is_simple')))]"
						datamodel = "[Outliner.GetPinnedCharacters]"
						layoutpolicy_horizontal = expanding
						margin = { 8 5 }
						margin_bottom = 10
						spacing = 5

						hbox = {
							layoutpolicy_horizontal = expanding

							text_single = {
								visible = "[And(Outliner.IsCategoryShown('pinned_character'), IsDataModelEmpty(Outliner.GetPinnedCharacters))]"
								name = "no_pinned_characters"
								text = "OUTLINER_NO_PINNED_CHARACTERS"
								autoresize = yes
								default_format = "#medium;italic"
							}

							expand = {}
						}

						item = {
							hbox = {
								layoutpolicy_horizontal = expanding
								using = character_tooltip

								button_list = {
									name = "character_button"
									size = { 0 20 }
									layoutpolicy_horizontal = expanding

									onclick = "[DefaultOnCharacterClick(Character.GetID)]"
									down = "[Character.IsShownInCharacterWindow]"
									onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
									button_ignore = none

									vbox = {
										layoutpolicy_horizontal = expanding

										background = {
											using = Background_Area
										}

										hbox = {
											layoutpolicy_horizontal = expanding

											text_single = {
												align = top|left
												layoutpolicy_horizontal = expanding
												autoresize = no
												text = "[Character.GetShortUINameNotMeNoTooltip], [Character.GetAge]"
												default_format = "#high"
											}

											expand = {}

											hbox = {
												min_width = 80

												icon = {
													visible = "[Character.IsDeadAndValid]"
													size = { 20 20 }
													texture = "[Character.GetDeathReasonIcon]"
													tooltip = "CHARACTER_DEAD_TOOLTIP"
												}

												icon = {
													visible = "[Not(Character.IsDeadAndValid)]"
													size = { 20 20 }
													framesize = { 60 60 }
													frame = "[Character.GetHealthIconFrame]"
													texture = "gfx/interface/icons/character_status/icon_health.dds"
													tooltip = "[Character.GetHealthInfo]"
												}

												text_single = {
													align = top|right
													size = { 40 20 }
													layoutpolicy_horizontal = fixed
													autoresize = no
													text = "[Character.GetOpinionOf(GetPlayer)|=]"
													fonttintcolor = "[Character.GetOpinionOfTint(GetPlayer)]"
													default_format = "#high"
												}

												expand = {}

												button_pin = {
													size = { 20 20 }
													onclick = "[Character.ToggleCharacterPinned]"
													tooltip = "PIN_TT"
												}
											}
										}
									}
								}
							}
						}
					}

					button_outliner_header = {
						name = "players_header"
						layoutpolicy_horizontal = expanding
						visible = "[GameHasMultiplePlayers]"

						blockoverride "button_expand_frame"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('players'))]"
						}

						blockoverride "oh_button"
						{
							onclick = "[Outliner.ToggleCategory('players')]"
							tooltip = "[SelectLocalization( Outliner.IsCategoryShown('players'), 'OUTLINER_COLLAPSE', 'OUTLINER_EXPAND' )]"
						}

						blockoverride "oh_toggle_frame"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('players'))]"
						}

						blockoverride "oh_name"
						{
							text = "OUTLINER_PLAYERS"
						}

						blockoverride "oh_count"
						{
							text = "[Outliner.GetCategoryItemsCount('players')|V]"
						}

						blockoverride "expanded"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('players'))]"
						}
					}

					vbox = {
						name = "players"
						datamodel = "[Outliner.GetPlayers]"
						visible = "[And( Outliner.IsCategoryShown('players'), GameHasMultiplePlayers )]"
						layoutpolicy_horizontal = expanding
						margin = { 3 5 }
						margin_bottom = 10
						spacing = 5

						item = {
							button_list = {
								name = "player_button"
								datacontext = "[OutlinerPlayer.GetCharacter]"
								layoutpolicy_horizontal = expanding
								size = { 0 40 }

								enabled = "[Character.IsValid]"
								onclick = "[DefaultOnCharacterClick(Character.GetID)]"
								down = "[Character.IsShownInCharacterWindow]"
								onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
								button_ignore = none

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 5
									margin = { 5 0 }

									coa_realm_tiny = {
										visible = "[Character.HasLandedTitles]"
									}

									using = character_tooltip

									using = tooltip_ws

									text_single = {
										name = "player_name"
										layoutpolicy_horizontal = expanding
										text = "[OutlinerPlayer.GetName]"
										default_format = "#high"
										using = Font_Size_Medium
										align = nobaseline
									}
								}
							}

						}
					}

					button_outliner_header = {
						name = "units_header"
						layoutpolicy_horizontal = expanding
						visible = "[GetPlayer.IsValid]"

						blockoverride "button_expand_frame"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('unit'))]"
						}

						blockoverride "oh_button"
						{
							onclick = "[Outliner.ToggleCategory('unit')]"
							tooltip = "[SelectLocalization( Outliner.IsCategoryShown('unit'), 'OUTLINER_COLLAPSE', 'OUTLINER_EXPAND' )]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
						}

						blockoverride "oh_toggle_frame"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('unit'))]"
						}

						blockoverride "oh_name"
						{
							text = "OUTLINER_ARMIES"
						}

						blockoverride "oh_count"
						{
							text = "[Outliner.GetCategoryItemsCount('unit')|V]"
						}
						blockoverride "expanded"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('unit'))]"
						}
					}

					vbox = {
						name = "units"
						datamodel = "[Outliner.GetUnitItems]"
						visible = "[And(Outliner.IsCategoryShown('unit'), GetPlayer.IsValid)]"
						layoutpolicy_horizontal = expanding
						margin = { 3 5 }
						margin_bottom = 10

						hbox = {
							layoutpolicy_horizontal = expanding
							margin_left = 10

							text_single = {
								visible = "[And(And(Outliner.IsCategoryShown('unit'), IsDataModelEmpty(Outliner.GetUnitItems)), GetPlayer.IsValid)]"
								name = "no_units"
								text = "OUTLINER_NO_ARMIES"
								default_format = "#medium;italic"
							}

							expand = {}
						}

						item = {
							button_list = {
								name = "unit_item"
								datacontext = "[UnitItem.GetArmy]"
								layoutpolicy_horizontal = expanding
								size = { 0 28 }

								onclick = "[UnitItem.SelectAndPanUnit]"
								onrightclick = "[UnitItem.PanToUnit]"
								down = "[UnitItem.IsSelected]"

								hbox = {
									hbox = {
										margin_left = 10
										layoutpolicy_horizontal = expanding
										max_width = 170

										text_single = {
											layoutpolicy_horizontal = expanding
											autoresize = no
											text = "[Army.GetNameNoTooltip]"
											default_format = "#high"
											align = nobaseline
										}
									}

									expand = {}

									hbox = {
										margin_right = 0

										hbox = {
											min_width = 20
											visible = "[EqualTo_string(UnitItem.GetStatusDescription, SelectLocalization(Army.IsMoving, 'UNIT_STATE_COMBAT', 'UNIT_STATE_COMBAT'))]"

											icon = {
												size = { 20 20 }
												texture = "gfx/interface/icons/map_icons/combat_map_icon.dds"
											}
										}

										hbox = {
											min_width = 20
											visible = "[Not(EqualTo_string(UnitItem.GetStatusDescription, SelectLocalization(Army.IsMoving, 'UNIT_STATE_COMBAT', 'UNIT_STATE_COMBAT')))]"

											button = {
												visible = "[And(Army.IsMoving,Not(UnitItem.IsRetreating))]"
												size = { 20 20 }
												texture = "gfx/interface/icons/combat_effects/moving_army.dds"
												onclick = "[UnitItem.SelectAndPanUnit]"
												tooltip = "[Army.GetMovementInfoForTooltip]"
											}

											button = {
												visible = "[And(Army.IsMoving,UnitItem.IsRetreating)]"
												size = { 20 20 }
												texture = "gfx/interface/icons/map_icons/army_icon_retreating.dds"
												onclick = "[UnitItem.SelectAndPanUnit]"
												tooltip = "[Army.GetMovementInfoForTooltip]"
											}

											button = {
												visible = "[Army.IsSieging]"
												size = { 20 20 }
												texture = "gfx/interface/icons/map_icons/onmap_siege_icon.dds"
												onclick = "[DefaultOnSiegeClick(Army.GetLocation.GetSiege.GetID)]"
												tooltip = "[Army.GetLocation.GetSiege.GetSiegeDescription]"
											}

											button = {
												visible = "[Army.GetLocation.HasActiveRaid]"
												size = { 20 20 }
												texture = "gfx/interface/icons/map_icons/onmap_raid_icon.dds"
												onclick = "[DefaultOnRaidClick(Army.GetLocation.GetRaid.Self)]"
												tooltip = "MAP_RAID_TOOLTIP"
											}
										}

										hbox = {
											min_width = 20

											button = {
												visible = "[And(Army.GetCommander.IsValid,Not(UnitItem.IsRulerCommander))]"
												size = { 20 20 }
												texture = "gfx/interface/icons/icon_commander.dds"
												onclick = "[DefaultOnCharacterClick(Army.GetCommander.GetID)]"
											}

											button = {
												visible = "[And(Army.GetCommander.IsValid,UnitItem.IsRulerCommander)]"
												size = { 20 20 }
												texture = "gfx/interface/icons/commander_is_leader.dds"
												onclick = "[DefaultOnCharacterClick(Army.GetCommander.GetID)]"
											}
										}

										hbox = {
											min_width = 20

											icon = {
												size = { 20 20 }
												texture = "gfx/interface/icons/army_quality_icon.dds"
												framesize = { 32 32 }
												frame = "[UnitItem.GetQualityLevel]"
											}
										}

#										hbox = {
#											min_width = 20
#
#											icon = {
#												parentanchor = vcenter
#												size = { 20 20 }
#												texture = "gfx/interface/icons/icon_supplies_small.dds"
#												framesize = { 30 30 }
#												frame = "[UnitItem.GetSupplyStateFrame]"
#											}
#										}

										hbox = {
											min_width = 50

											text_single = {
												text = "[Army.GetSoldierCountString]"
												default_format = "#high"
												align = nobaseline
											}
										}
									}
								}

								using = tooltip_ws

								tooltipwidget = {
									using = unit_icon_item_tooltip

									blockoverride "extra_unit_info"
									{
										vbox = {
											name = "army_extra_info"
											layoutpolicy_horizontal = expanding
											ignoreinvisible = yes
											margin = { 5 0 }

											text_single = {
												name = "status_info"
												layoutpolicy_horizontal = expanding
												text = "[UnitItem.GetStatusDescription]"
												align = left
											}

											text_single = {
												name = "warning_info"
												text = "[UnitItem.GetOutlinerWarning]"
												margin = { 10 5 }
											}

											text_single = {
												name = "click_info"
												text = "[SelectLocalization(UnitItem.IsSelectedOnArmyWindow, 'OUTLINER_ARMY_CLICK_TO_PAN', 'OUTLINER_ARMY_CLICK_TO_SELECT')]"
												margin = { 10 5 }
											}

											text_single = {
												name = "right_click_info"
												text = "OUTLINER_ARMY_RIGHT_CLICK_TO_PAN"
												margin = { 10 5 }
											}
										}
									}
								}
							}
						}
					}

					button_outliner_header = {
						name = "holdings_header"
						layoutpolicy_horizontal = expanding
						visible = "[GetPlayer.IsValid]"

						blockoverride "button_expand_frame"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('holding'))]"
						}

						blockoverride "oh_button"
						{

							onclick = "[Outliner.ToggleCategory('holding')]"
							tooltip = "[SelectLocalization( Outliner.IsCategoryShown('holding'), 'OUTLINER_COLLAPSE', 'OUTLINER_EXPAND' )]"
						}

						blockoverride "oh_name"
						{
							text = "OUTLINER_HOLDINGS"
						}

						blockoverride "oh_count"
						{
							text = "[Outliner.GetCategoryItemsCount('holding')|V]"
						}

						blockoverride "expanded"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('holding'))]"
						}

					}

					vbox = {
						name = "holdings"
						datamodel = "[Outliner.GetHoldingItems]"
						visible = "[Outliner.IsCategoryShown('holding')]"
						layoutpolicy_horizontal = expanding
						margin = { 3 5 }
						margin_bottom = 10

						item = {
							button_list = {
								name = "holding_item"
								datacontext = "[OutlinerHoldingItem.GetTitle]"
								datacontext = "[OutlinerHoldingItem.GetTitle.GetProvince.GetHolding]"
								layoutpolicy_horizontal = expanding
								size = { 0 28 }

								onclick = "[OutlinerHoldingItem.OnClick]"
								down = "[Or(Holding.IsHovered, Holding.IsSelected)]"
								tooltipwidget = { holding_tooltip_click = {} }
								using = tooltip_ws
								using = Holding_Mouse_Entry

								margin_widget = {
									size = { 100% 100% }
									margin = { 5 2 }

									progressbar_standard_transparent = {
										name = "progress_bar"
										size = { 100% 100% }
										visible = "[Holding.IsConstructionInProgress]"
										value = "[Holding.GetConstructionProgress]"
									}
								}

								hbox = {
									hbox = {
										margin_left = 10

										text_single = {
											max_width = 115
											name = "holding_name"
											layoutpolicy_horizontal = expanding
											text = "[Holding.GetProvince.GetNameNoTooltip]"
											default_format = "#high"
											align = nobaseline
										}
									}

									expand = {}

									hbox = {
										margin_right = 10

										hbox = {
											margin_right = 0

											hbox = {
												min_width = 10

												icon = {
													visible = "[Holding.IsLowControl]"
													size = { 20 20 }
													texture = "gfx/interface/icons/map_icons/county_low_control.dds"
													tooltip = "MY_REALM_WINDOW_MAP_ICON_LOW_CONTROL"
												}

												icon = {
													visible = "[Holding.CanConstructAnyBuilding(GetPlayer)]"
													size = { 20 20 }
							texture = "gfx/interface/icons/map_icons/county_building_available.dds"
													tooltip = "MY_REALM_WINDOW_CONSTRUCT_BUILDING"
												}
											}

											hbox = {
												min_width = 50

												icon = {
													size = { 20 20 }
													texture = "gfx/interface/icons/icon_gold.dds"
												}

												text_single = {
													margin_right = 0
													text = "[Holding.GetIncome|1]"
													default_format = "#high"
													align = nobaseline
												}
											}

											hbox = {
												min_width = 55

												icon = {
													size = { 20 20 }
													texture = "gfx/interface/icons/icon_soldier.dds"
												}

												text_single = {
													margin_right = 0
													text = "[Holding.GetMaxLevySize]"
													default_format = "#high"
													align = nobaseline
												}
											}
										}
									}
								}

							}
						}
					}

					expand = {}
				}
			}
		}
	}

}

types Outliner {
	type button_outliner_header = button_tab {
		size = { 0 31 }

		block "oh_button" {}

		hbox = {
			layoutpolicy_horizontal = expanding
			margin = { 15 0 }
			spacing = 5


			using = tooltip_ws

			icon = {
				name = "Expand"
				texture = "gfx/interface/buttons/button_tree_expand.dds"
				framesize = { 36 36 }
				size = { 22 22 }
				block "button_expand_frame" {}
			}

			text_single = {
				name = "category"
				layoutpolicy_horizontal = expanding
				align = nobaseline

				block "oh_name"
				{
					text = "#D ...#!"
				}
			}

			text_single = {
				name = "count"
				align = nobaseline

				block "oh_count"
				{
					text = "#D ...#!"
				}
			}

		}
	}
}


local_template character_tooltip
{
	tooltip_enabled = "[Not(IsInteractionMenuOpenForCharacter(Character.GetID))]"
	tooltipwidget = {
		cooltip_type = {
			blockoverride "interaction_info"
			{
				text = "CHARACTER_TOOLTIP_INSTRUCTION"
			}
		}
	}
	using = tooltip_ws
}

