widget = {
	name = "outliner_window"
	parentanchor = top|right
	position = { -50 45 }
	alwaystransparent = no
	filter_mouse = all
	layer = windows_layer

	state = {
		name = _show
		using = Animation_FadeIn_Quick

		start_sound = {
			soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_tab_sub"
			soundparam = {
				name = StateChange
				value = 1.0
			}
			soundparam = {
				name = PanChange
				value = 1.2
			}
		}
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		start_sound = {
			soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_tab_sub"
			soundparam = {
				name = StateChange
				value = 1.5
			}
			soundparam = {
				name = PanChange
				value = 1.2
			}
		}
	}

	state = {
		name = "hide_outliner"
		using = Animation_FadeOut_Quick
		trigger_when = "[Not(IsDefaultGUIMode)]"
	}

	state = {
		name = "show_outliner"
		using = Animation_FadeIn_Quick
		trigger_when = "[IsDefaultGUIMode]"
	}

	flowcontainer = {
		visible = "[Not(GetVariableSystem.Exists( 'right_window_open'))]"
		resizeparent = yes
		margin = { 10 10 }
		margin_bottom = 15

		state = {
			name = _show
			using = Animation_FadeIn_Standard
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
		}

		background = {
			name = "paper_texture_shadow"
			texture = "gfx/interface/event_window/tile_letter_shadow.dds"
			spriteType = Corneredtiled
			spriteborder = { 200 200 }
			margin = { -15 0 }
			margin_right = -20
		}

		background = {
			name = "paper_texture_flat"
			texture = "gfx/interface/event_window/tile_letter_flat.dds"
			spriteType = Corneredtiled
			spriteborder = { 200 200 }
			alpha = 0.9
			color = { 0.6 0.6 0.6 1 }
			margin = { -15 0 }
			margin_right = -20

			modify_texture = {
				name = "paper_texture_overlay"
				texture = "gfx/interface/event_window/overlay_letter_texture.dds"
				spriteType = Corneredstretched
				blend_mode = overlay
			}
		}

		scrollarea = {
			autoresizescrollarea = yes
			scrollbarpolicy_horizontal = always_off
			maximumsize = { -1 500 }
			size = { 300 0 }

			scrollbar_vertical = {
				using = Scrollbar_Vertical
			}

			scrollwidget = {
				vbox = {
					set_parent_size_to_minimum = yes
					min_width = 275
					margin = { 10 0 }
					margin_right = 15
					spacing = 2

					button_outliner_header = {
						name = "pinned_characters_header"
						layoutpolicy_horizontal = expanding

						blockoverride "button_expand_frame"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('pinned_character'))]"
						}

						blockoverride "oh_button"
						{
							onclick = "[Outliner.ToggleCategory('pinned_character')]"
							tooltip = "[SelectLocalization( Outliner.IsCategoryShown('pinned_character'), 'OUTLINER_COLLAPSE', 'OUTLINER_EXPAND' )]"
						}

						blockoverride "oh_toggle_frame"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('pinned_character'))]"
						}

						blockoverride "oh_name"
						{
							text = "OUTLINER_PINNED_CHARACTERS"
						}

						blockoverride "oh_count"
						{
							text = "[Outliner.GetCategoryItemsCount('pinned_character')|V]"
						}

						blockoverride "expanded"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('pinned_character'))]"
						}
					}

					vbox = {
						name = "pinned_characters"
						visible = "[Outliner.IsCategoryShown('pinned_character')]"
						datamodel = "[Outliner.GetPinnedCharacters]"
						layoutpolicy_horizontal = expanding
						margin = { 18 5 }
						margin_bottom = 10
						spacing = 5

						hbox = {
							layoutpolicy_horizontal = expanding

							text_single = {
								visible = "[And(Outliner.IsCategoryShown('pinned_character'), IsDataModelEmpty(Outliner.GetPinnedCharacters))]"
								name = "no_pinned_characters"
								text = "OUTLINER_NO_PINNED_CHARACTERS"
								autoresize = yes
								default_format = "#medium;italic"
							}

							expand = {}
						}

						item = {
							hbox = {
								name = "pinned_character_item"
								datacontext = "[CharacterRef.Get]"
								layoutpolicy_horizontal = expanding
								using = character_tooltip

								button_list = {
									name = "character_button"
									size = { 0 20 }
									layoutpolicy_horizontal = expanding

									onclick = "[DefaultOnCharacterClick(Character.GetID)]"
									down = "[Character.IsShownInCharacterWindow]"
									onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
									button_ignore = none

									hbox = {
										layoutpolicy_horizontal = expanding
										spacing = 5

										icon = {
											visible = "[Character.IsDeadAndValid]"
											size = { 20 20 }
											texture = "[Character.GetDeathReasonIcon]"
											tooltip = "CHARACTER_DEAD_TOOLTIP"
										}

										text_single = {
											align = top|left
											layoutpolicy_horizontal = expanding
											autoresize = no
											text = "[Character.GetShortUINameNotMeNoTooltip]"
											default_format = "#high"
										}

										expand = {}

										button_pin = {
											size = { 20 20 }
											onclick = "[Character.ToggleCharacterPinned]"
											tooltip = "PIN_TT"
										}
									}
								}
							}
						}
					}

					button_outliner_header = {
						name = "players_header"
						layoutpolicy_horizontal = expanding
						visible = "[GameHasMultiplePlayers]"

						blockoverride "button_expand_frame"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('players'))]"
						}

						blockoverride "oh_button"
						{
							onclick = "[Outliner.ToggleCategory('players')]"
							tooltip = "[SelectLocalization( Outliner.IsCategoryShown('players'), 'OUTLINER_COLLAPSE', 'OUTLINER_EXPAND' )]"
						}

						blockoverride "oh_toggle_frame"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('players'))]"
						}

						blockoverride "oh_name"
						{
							text = "OUTLINER_PLAYERS"
						}

						blockoverride "oh_count"
						{
							text = "[Outliner.GetCategoryItemsCount('players')|V]"
						}

						blockoverride "expanded"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('players'))]"
						}
					}

					vbox = {
						name = "players"
						datamodel = "[Outliner.GetPlayers]"
						visible = "[And( Outliner.IsCategoryShown('players'), GameHasMultiplePlayers )]"
						layoutpolicy_horizontal = expanding
						margin = { 8 5 }
						margin_bottom = 10
						spacing = 5

						item = {
							button_list = {
								name = "player_button"
								datacontext = "[OutlinerPlayer.GetCharacter]"
								layoutpolicy_horizontal = expanding
								size = { 0 40 }

								enabled = "[Character.IsValid]"
								onclick = "[DefaultOnCharacterClick(Character.GetID)]"
								down = "[Character.IsShownInCharacterWindow]"
								onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
								button_ignore = none

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 5
									margin = { 5 0 }

									coa_realm_tiny = {
										visible = "[Character.HasLandedTitles]"
									}

									using = character_tooltip

									using = tooltip_ws

									text_single = {
										name = "player_name"
										layoutpolicy_horizontal = expanding
										text = "[OutlinerPlayer.GetName]"
										default_format = "#high"
										using = Font_Size_Medium
										align = nobaseline
									}
								}
							}

						}
					}

					button_outliner_header = {
						name = "units_header"
						layoutpolicy_horizontal = expanding
						visible = "[GetPlayer.IsValid]"

						blockoverride "button_expand_frame"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('unit'))]"
						}

						blockoverride "oh_button"
						{
							onclick = "[Outliner.ToggleCategory('unit')]"
							tooltip = "[SelectLocalization( Outliner.IsCategoryShown('unit'), 'OUTLINER_COLLAPSE', 'OUTLINER_EXPAND' )]"
							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
						}

						blockoverride "oh_toggle_frame"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('unit'))]"
						}

						blockoverride "oh_name"
						{
							text = "OUTLINER_ARMIES"
						}

						blockoverride "oh_count"
						{
							text = "[Outliner.GetCategoryItemsCount('unit')|V]"
						}
						blockoverride "expanded"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('unit'))]"
						}
					}

					vbox = {
						name = "units"
						datamodel = "[Outliner.GetUnitItems]"
						visible = "[And(Outliner.IsCategoryShown('unit'), GetPlayer.IsValid)]"
						layoutpolicy_horizontal = expanding
						margin = { 8 5 }
						margin_bottom = 10

						hbox = {
							layoutpolicy_horizontal = expanding
							margin_left = 10

							text_single = {
								visible = "[And(And(Outliner.IsCategoryShown('unit'), IsDataModelEmpty(Outliner.GetUnitItems)), GetPlayer.IsValid)]"
								name = "no_units"
								text = "OUTLINER_NO_ARMIES"
								default_format = "#medium;italic"
							}

							expand = {}
						}

						item = {
							button_list = {
								name = "unit_item"
								shortcut = "outliner_unit"
								datacontext = "[UnitItem.GetArmy]"
								layoutpolicy_horizontal = expanding
								size = { 0 28 }

								onclick = "[UnitItem.SelectAndPanUnit]"
								onrightclick = "[UnitItem.PanToUnit]"
								down = "[UnitItem.IsSelected]"

								hbox = {
									margin_left = 10
									layoutpolicy_horizontal = expanding

									text_single = {
										layoutpolicy_horizontal = expanding
										autoresize = no
										text = "[Army.GetNameNoTooltip]"
										default_format = "#high"
										align = nobaseline
									}

									text_single = {
										text = "[Army.GetSoldierCountString]"
										default_format = "#high"
										align = nobaseline
									}
								}

								using = tooltip_ws

								tooltipwidget = {
									using = unit_icon_item_tooltip

									blockoverride "extra_unit_info"
									{
										vbox = {
											name = "army_extra_info"
											layoutpolicy_horizontal = expanding
											ignoreinvisible = yes
											margin = { 5 0 }

											text_single = {
												name = "status_info"
												layoutpolicy_horizontal = expanding
												text = "[UnitItem.GetStatusDescription]"
												align = left
											}

											text_single = {
												name = "warning_info"
												text = "[UnitItem.GetOutlinerWarning]"
												margin = { 10 5 }
											}

											text_single = {
												name = "click_info"
												text = "[SelectLocalization(UnitItem.IsSelectedOnArmyWindow, 'OUTLINER_ARMY_CLICK_TO_PAN', 'OUTLINER_ARMY_CLICK_TO_SELECT')]"
												margin = { 10 5 }
											}

											text_single = {
												name = "right_click_info"
												text = "OUTLINER_ARMY_RIGHT_CLICK_TO_PAN"
												margin = { 10 5 }
											}
										}
									}
								}
							}
						}
					}

					button_outliner_header = {
						name = "holdings_header"
						layoutpolicy_horizontal = expanding
						visible = "[GetPlayer.IsValid]"

						blockoverride "button_expand_frame"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('holding'))]"
						}

						blockoverride "oh_button"
						{

							onclick = "[Outliner.ToggleCategory('holding')]"
							tooltip = "[SelectLocalization( Outliner.IsCategoryShown('holding'), 'OUTLINER_COLLAPSE', 'OUTLINER_EXPAND' )]"
						}

						blockoverride "oh_name"
						{
							text = "OUTLINER_HOLDINGS"
						}

						blockoverride "oh_count"
						{
							text = "[Outliner.GetCategoryItemsCount('holding')|V]"
						}

						blockoverride "expanded"
						{
							frame = "[BoolTo1And2(Outliner.IsCategoryShown('holding'))]"
						}

					}

					vbox = {
						name = "holdings"
						datamodel = "[Outliner.GetHoldingItems]"
						visible = "[Outliner.IsCategoryShown('holding')]"
						layoutpolicy_horizontal = expanding
						margin = { 8 5 }
						margin_bottom = 10

						item = {
							button_list = {
								name = "holding_item"
								datacontext = "[OutlinerHoldingItem.GetTitle]"
								datacontext = "[OutlinerHoldingItem.GetTitle.GetProvince.GetHolding]"
								layoutpolicy_horizontal = expanding
								size = { 0 28 }

								onclick = "[OutlinerHoldingItem.OnClick]"
								down = "[Or(Holding.IsHovered, Holding.IsSelected)]"
								tooltipwidget = { holding_tooltip_click = {} }
								using = tooltip_ws
								using = Holding_Mouse_Entry

								margin_widget = {
									size = { 100% 100% }
									margin = { 5 2 }

									progressbar_standard_transparent = {
										name = "progress_bar"
										size = { 100% 100% }
										visible = "[Holding.IsConstructionInProgress]"
										value = "[Holding.GetConstructionProgress]"
									}
								}

								hbox = {
									hbox = {
										margin_left = 10

										text_single = {
											max_width = 85
											name = "holding_name"
											layoutpolicy_horizontal = expanding
											text = "[Holding.GetProvince.GetNameNoTooltip]"
											default_format = "#high"
											align = nobaseline
										}
									}

									expand = {}

									hbox = {
										margin_right = 10
										text_single = {
											max_width = 120
											name = "construction_name"
											visible = "[Holding.IsConstructionInProgress]"
											text = "[Holding.GetConstructionBuilding.GetName]"
											align = right|nobaseline

										}
									}
								}

							}
						}
					}

					expand = {}
				}
			}
		}
	}

}

types Outliner {
	type button_outliner_header = button_tab {
		size = { 0 31 }

		block "oh_button" {}

		hbox = {
			layoutpolicy_horizontal = expanding
			margin = { 15 0 }
			spacing = 5


			using = tooltip_ws

			icon = {
				name = "Expand"
				texture = "gfx/interface/buttons/button_tree_expand.dds"
				framesize = { 36 36 }
				size = { 22 22 }
				block "button_expand_frame" {}
			}

			text_single = {
				name = "category"
				layoutpolicy_horizontal = expanding
				align = nobaseline

				block "oh_name"
				{
					text = "#D ...#!"
				}
			}

			text_single = {
				name = "count"
				align = nobaseline

				block "oh_count"
				{
					text = "#D ...#!"
				}
			}

		}
	}
}


local_template character_tooltip
{
	tooltip_enabled = "[Not(IsInteractionMenuOpenForCharacter(Character.GetID))]"
	tooltipwidget = {
		cooltip_type = {
			blockoverride "interaction_info"
			{
				text = "CHARACTER_TOOLTIP_INSTRUCTION"
			}
		}
	}
	using = tooltip_ws
}

# widget = {
# 	name = "outliner_window"
# 	parentanchor = top|right
# 	position = { -50 45 }

# 	state = {
# 		name = _show
# 		using = Animation_FadeIn_Quick

# 		start_sound = {
# 			soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_tab_sub"
# 			soundparam = {
# 				name = StateChange
# 				value = 1.0
# 			}
# 			soundparam = {
# 				name = PanChange
# 				value = 1.2
# 			}
# 		}
# 	}

# 	state = {
# 		name = _hide
# 		using = Animation_FadeOut_Quick
# 		start_sound = {
# 			soundeffect = "event:/SFX/UI/Generic/sfx_ui_generic_tab_sub"
# 			soundparam = {
# 				name = StateChange
# 				value = 1.5
# 			}
# 			soundparam = {
# 				name = PanChange
# 				value = 1.2
# 			}
# 		}
# 	}

# 	state = {
# 		name = "hide_outliner"
# 		using = Animation_FadeOut_Quick
# 		trigger_when = "[Not(IsDefaultGUIMode)]"
# 	}

# 	state = {
# 		name = "show_outliner"
# 		using = Animation_FadeIn_Quick
# 		trigger_when = "[IsDefaultGUIMode]"
# 	}

# 	vbox = {
# 		visible = "[Not(GetVariableSystem.Exists( 'right_window_open'))]"
# 		set_parent_size_to_minimum = yes
# 		margin = { 15 15 }

# 		state = {
# 			name = _show
# 			using = Animation_FadeIn_Standard
# 		}

# 		state = {
# 			name = _hide
# 			using = Animation_FadeOut_Quick
# 		}

# 		background = {
# 			name = "paper_texture_shadow"
# 			texture = "gfx/interface/event_window/tile_letter_shadow.dds"
# 			spriteType = Corneredtiled
# 			spriteborder = { 200 200 }
# 		}

# 		background = {
# 			name = "paper_texture_flat"
# 			texture = "gfx/interface/event_window/tile_letter_flat.dds"
# 			spriteType = Corneredtiled
# 			spriteborder = { 200 200 }
# 			alpha = 0.9
# 			color = { 0.6 0.6 0.6 1 }

# 			modify_texture = {
# 				name = "paper_texture_overlay"
# 				texture = "gfx/interface/event_window/overlay_letter_texture.dds"
# 				spriteType = Corneredstretched
# 				blend_mode = overlay
# 			}
# 		}

# 		scrollarea = {
# 			autoresizescrollarea = yes
# 			scrollbarpolicy_horizontal = always_off
# 			maximumsize = { -1 500 }

# 			scrollbar_vertical = {
# 				using = Scrollbar_Vertical
# 			}

# 			scrollwidget = {
# 				vbox = {
# 					set_parent_size_to_minimum = yes
# 					margin_top = 15
# 					min_width = 280

# 					spacing = 2

# 					button_outliner_header = {
# 						name = "pinned_characters_header"
# 						layoutpolicy_horizontal = expanding

# 						blockoverride "button_expand_frame"
# 						{
# 							frame = "[BoolTo1And2(Outliner.IsCategoryShown('pinned_character'))]"
# 						}

# 						blockoverride "oh_button"
# 						{
# 							onclick = "[Outliner.ToggleCategory('pinned_character')]"
# 							tooltip = "[SelectLocalization( Outliner.IsCategoryShown('pinned_character'), 'OUTLINER_COLLAPSE', 'OUTLINER_EXPAND' )]"
# 						}

# 						blockoverride "oh_toggle_frame"
# 						{
# 							frame = "[BoolTo1And2(Outliner.IsCategoryShown('pinned_character'))]"
# 						}

# 						blockoverride "oh_name"
# 						{
# 							text = "OUTLINER_PINNED_CHARACTERS"
# 						}

# 						blockoverride "oh_count"
# 						{
# 							text = "[Outliner.GetCategoryItemsCount('pinned_character')|V]"
# 						}

# 						blockoverride "expanded"
# 						{
# 							frame = "[BoolTo1And2(Outliner.IsCategoryShown('pinned_character'))]"
# 						}
# 					}

# 					vbox = {
# 						name = "pinned_characters"
# 						visible = "[Outliner.IsCategoryShown('pinned_character')]"
# 						datamodel = "[Outliner.GetPinnedCharacters]"
# 						layoutpolicy_horizontal = expanding
# 						margin = { 20 5 }
# 						margin_bottom = 10
# 						spacing = 5

# 						hbox = {
# 							layoutpolicy_horizontal = expanding

# 							text_single = {
# 								visible = "[And(Outliner.IsCategoryShown('pinned_character'), IsDataModelEmpty(Outliner.GetPinnedCharacters))]"
# 								name = "no_pinned_characters"
# 								text = "OUTLINER_NO_PINNED_CHARACTERS"
# 								autoresize = yes
# 								default_format = "#high"
# 							}
# 							expand = {}
# 						}

# 						item = {
# 							hbox = {
# 								name = "pinned_character_item"
# 								datacontext = "[CharacterRef.Get]"
# 								layoutpolicy_horizontal = expanding
# 								using = character_tooltip

# 								button_list = {
# 									name = "character_button"
# 									size = { 0 20 }
# 									layoutpolicy_horizontal = expanding

# 									onclick = "[DefaultOnCharacterClick(Character.GetID)]"
# 									down = "[Character.IsShownInCharacterWindow]"
# 									onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
# 									button_ignore = none

# 									hbox = {
# 										resizeparent = yes
# 										layoutpolicy_horizontal = expanding
# 										spacing = 5

# 										icon = {
# 											visible = "[Character.IsDeadAndValid]"
# 											size = { 20 20 }
# 											texture = "[Character.GetDeathReasonIcon]"
# 											tooltip = "CHARACTER_DEAD_TOOLTIP"
# 										}

# 										text_multi = {
# 											align = top|left
# 											layoutpolicy_horizontal = expanding
# 											max_width = 250
# 											autoresize = yes
# 											text = "[Character.GetUINameNotMeNoTooltip]"
# 											format_override = { weak light_background }

# 											text_occluder = {
# 												parentanchor = top|right
# 												size = { 20 20 }

# 												button_pin = {
# 													size = { 20 20 }
# 													onclick = "[Character.ToggleCharacterPinned]"
# 													tooltip = "PIN_TT"
# 												}
# 											}
# 										}
# 									}
# 								}
# 							}
# 						}
# 					}

# 					button_outliner_header = {
# 						name = "players_header"
# 						layoutpolicy_horizontal = expanding
# 						visible = "[Or(GameIsMultiplayer, InDebugMode)]"

# 						blockoverride "button_expand_frame"
# 						{
# 							frame = "[BoolTo1And2(Outliner.IsCategoryShown('players'))]"
# 						}

# 						blockoverride "oh_button"
# 						{
# 							onclick = "[Outliner.ToggleCategory('players')]"
# 							tooltip = "[SelectLocalization( Outliner.IsCategoryShown('players'), 'OUTLINER_COLLAPSE', 'OUTLINER_EXPAND' )]"
# 						}

# 						blockoverride "oh_toggle_frame"
# 						{
# 							frame = "[BoolTo1And2(Outliner.IsCategoryShown('players'))]"
# 						}

# 						blockoverride "oh_name"
# 						{
# 							text = "OUTLINER_PLAYERS"
# 						}

# 						blockoverride "oh_count"
# 						{
# 							text = "[Outliner.GetCategoryItemsCount('players')|V]"
# 						}

# 						blockoverride "expanded"
# 						{
# 							frame = "[BoolTo1And2(Outliner.IsCategoryShown('players'))]"
# 						}
# 					}

# 					vbox = {
# 						name = "players"
# 						datamodel = "[Outliner.GetPlayers]"
# 						visible = "[And(Outliner.IsCategoryShown('players'), Or(GameIsMultiplayer, InDebugMode))]"
# 						layoutpolicy_horizontal = expanding
# 						margin = { 20 5 }
# 						margin_bottom = 10
# 						spacing = 5


# 						item = {
# 							button_list = {
# 								name = "player_button"
# 								datacontext = "[OutlinerPlayer.GetCharacter]"
# 								layoutpolicy_horizontal = expanding
# 								size = { 0 40 }

# 								onclick = "[DefaultOnCharacterClick(Character.GetID)]"
# 								down = "[Character.IsShownInCharacterWindow]"
# 								onrightclick = "[DefaultOnCharacterRightClick(Character.GetID)]"
# 								button_ignore = none

# 								hbox = {
# 									spacing = 5
# 									margin = { 5 0 }

# 									coa_realm_tiny = { }

# 									using = character_tooltip

# 									using = tooltip_ws

# 									text_single = {
# 										name = "player_name"
# 										layoutpolicy_horizontal = expanding
# 										text = "[OutlinerPlayer.GetName]"
# 										default_format = "#high"
# 										using = Font_Size_Medium
# 										align = nobaseline
# 									}
# 								}
# 							}

# 						}
# 					}

# 					button_outliner_header = {
# 						name = "units_header"
# 						layoutpolicy_horizontal = expanding
# 						visible = "[GetPlayer.IsValid]"

# 						blockoverride "button_expand_frame"
# 						{
# 							frame = "[BoolTo1And2(Outliner.IsCategoryShown('unit'))]"
# 						}

# 						blockoverride "oh_button"
# 						{
# 							onclick = "[Outliner.ToggleCategory('unit')]"
# 							tooltip = "[SelectLocalization( Outliner.IsCategoryShown('unit'), 'OUTLINER_COLLAPSE', 'OUTLINER_EXPAND' )]"
# 							oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
# 							clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
# 						}

# 						blockoverride "oh_toggle_frame"
# 						{
# 							frame = "[BoolTo1And2(Outliner.IsCategoryShown('unit'))]"
# 						}

# 						blockoverride "oh_name"
# 						{
# 							text = "OUTLINER_ARMIES"
# 						}

# 						blockoverride "oh_count"
# 						{
# 							text = "[Outliner.GetCategoryItemsCount('unit')|V]"
# 						}
# 						blockoverride "expanded"
# 						{
# 							frame = "[BoolTo1And2(Outliner.IsCategoryShown('unit'))]"
# 						}
# 					}

# 					vbox = {
# 						name = "units"
# 						datamodel = "[Outliner.GetUnitItems]"
# 						visible = "[And(Outliner.IsCategoryShown('unit'), GetPlayer.IsValid)]"
# 						layoutpolicy_horizontal = expanding
# 						margin = { 10 5 }
# 						margin_bottom = 10
# 						spacing = 5

# 						hbox = {
# 							layoutpolicy_horizontal = expanding
# 							text_single = {
# 								visible = "[And(And(Outliner.IsCategoryShown('unit'), IsDataModelEmpty(Outliner.GetUnitItems)), GetPlayer.IsValid)]"
# 								name = "no_units"
# 								text = "OUTLINER_NO_ARMIES"
# 								default_format = "#high"

# 							}

# 							expand = {}

# 						}

# 						item = {
# 							button_list = {
# 								name = "unit_item"
# 								datacontext = "[UnitItem.GetArmy]"
# 								layoutpolicy_horizontal = expanding
# 								size = { 0 28 }

# 								onclick = "[UnitItem.SelectAndPanUnit]"
# 								onrightclick = "[UnitItem.PanToUnit]"
# 								button_ignore = none
# 								down = "[UnitItem.IsSelected]"

# 								hbox = {
# 									margin = { 10 0 }

# 									text_single = {
# 										layoutpolicy_horizontal = expanding
# 										text = "[Army.GetNameNoTooltip]"
# 										default_format = "#high"
# 										align = nobaseline
# 									}

# 									text_single = {
# 										text = "[Army.GetSoldierCountString]"
# 										default_format = "#high"
# 										align = nobaseline
# 									}
# 								}

# 								using = tooltip_ws

# 								tooltipwidget = {
# 									using = unit_icon_item_tooltip

# 									blockoverride "extra_unit_info"
# 									{
# 										vbox = {
# 											name = "army_extra_info"
# 											layoutpolicy_horizontal = expanding
# 											ignoreinvisible = yes
# 											margin = { 5 0 }

# 											text_single = {
# 												name = "status_info"
# 												layoutpolicy_horizontal = expanding
# 												text = "[UnitItem.GetStatusDescription]"
# 												align = left
# 											}

# 											text_single = {
# 												name = "warning_info"
# 												text = "[UnitItem.GetOutlinerWarning]"
# 												margin = { 10 5 }
# 											}

# 											text_single = {
# 												name = "click_info"
# 												text = "[SelectLocalization(UnitItem.IsSelectedOnArmyWindow, 'OUTLINER_ARMY_CLICK_TO_PAN', 'OUTLINER_ARMY_CLICK_TO_SELECT')]"
# 												margin = { 10 5 }
# 											}

# 											text_single = {
# 												name = "right_click_info"
# 												text = "OUTLINER_ARMY_RIGHT_CLICK_TO_PAN"
# 												margin = { 10 5 }
# 											}
# 										}
# 									}
# 								}
# 							}
# 						}
# 					}

# 					button_outliner_header = {
# 						name = "holdings_header"
# 						layoutpolicy_horizontal = expanding
# 						visible = "[GetPlayer.IsValid]"

# 						blockoverride "button_expand_frame"
# 						{
# 							frame = "[BoolTo1And2(Outliner.IsCategoryShown('holding'))]"
# 						}

# 						blockoverride "oh_button"
# 						{

# 							onclick = "[Outliner.ToggleCategory('holding')]"
# 							tooltip = "[SelectLocalization( Outliner.IsCategoryShown('holding'), 'OUTLINER_COLLAPSE', 'OUTLINER_EXPAND' )]"
# 						}

# 						blockoverride "oh_name"
# 						{
# 							text = "OUTLINER_HOLDINGS"
# 						}

# 						blockoverride "oh_count"
# 						{
# 							text = "[Outliner.GetCategoryItemsCount('holding')|V]"
# 						}

# 						blockoverride "expanded"
# 						{
# 							frame = "[BoolTo1And2(Outliner.IsCategoryShown('holding'))]"
# 						}

# 					}

# 					vbox = {
# 						name = "holdings"
# 						datamodel = "[Outliner.GetHoldingItems]"
# 						visible = "[Outliner.IsCategoryShown('holding')]"
# 						layoutpolicy_horizontal = expanding
# 						margin = { 10 5 }
# 						margin_bottom = 10
# 						spacing = 5

# 						item = {
# 							button_list = {
# 								name = "holding_item"
# 								datacontext = "[OutlinerHoldingItem.GetTitle]"
# 								datacontext = "[OutlinerHoldingItem.GetTitle.GetProvince.GetHolding]"
# 								layoutpolicy_horizontal = expanding
# 								size = { 0 28 }

# 								onclick = "[OutlinerHoldingItem.OnClick]"
# 								down = "[OutlinerHoldingItem.IsSelected]"
# 								tooltip = "[OutlinerHoldingItem.GetHolding.GetTooltipNoHolder]"

# 								margin_widget = {
# 									size = { 100% 100% }
# 									margin = { 5 2 }

# 									progressbar_standard_transparent = {
# 										name = "progress_bar"
# 										size = { 100% 100% }
# 										visible = "[Holding.IsConstructionInProgress]"
# 										value = "[Holding.GetConstructionProgress]"
# 									}
# 								}

# 								hbox = {
# 									margin = { 10 0 }

# 									text_single = {
# 										name = "holding_name"
# 										layoutpolicy_horizontal = expanding
# 										text = "[Holding.GetProvince.GetNameNoTooltip]"
# 										default_format = "#high"
# 										align = nobaseline

# 									}

# 									text_single = {
# 										name = "construction_name"
# 										visible = "[Holding.IsConstructionInProgress]"
# 										text = "[Holding.GetConstructionBuilding.GetName]"
# 										#default_format = "#high"
# 										align = nobaseline

# 									}
# 								}
# 							}
# 						}
# 					}

# 					expand = {}
# 				}
# 			}
# 		}
# 	}
# }

# types Outliner {
# 	type button_outliner_header = button_tab {
# 		size = { 0 31 }

# 		block "oh_button" {}

# 		hbox = {
# 			layoutpolicy_horizontal = expanding
# 			margin = { 25 0 }
# 			spacing = 5


# 			using = tooltip_ws

# 			icon = {
# 				name = "Expand"
# 				texture = "gfx/interface/buttons/button_tree_expand.dds"
# 				framesize = { 36 36 }
# 				size = { 22 22 }
# 				block "button_expand_frame" {}
# 			}

# 			text_single = {
# 				name = "category"
# 				layoutpolicy_horizontal = expanding
# 				align = nobaseline

# 				block "oh_name"
# 				{
# 					text = "#D ...#!"
# 				}
# 			}

# 			text_single = {
# 				name = "count"
# 				align = nobaseline

# 				block "oh_count"
# 				{
# 					text = "#D ...#!"
# 				}
# 			}

# 		}
# 	}
# }


# local_template character_tooltip
# {
# 	tooltip_enabled = "[Not(IsInteractionMenuOpenForCharacter(Character.GetID))]"
# 	tooltipwidget = {
# 		cooltip_type = {
# 			blockoverride "extra_info"
# 			{
# 				container = {
# 					name = "status_info"
# 					textbox = {
# 						name = "status_text"
# 						position = { 40 14 }
# 						text = "[Character.GetOutlinerStatusText]"
# 					}
# 				}
# 			}
# 			blockoverride "interaction_info"
# 			{
# 				text = "CHARACTER_TOOLTIP_INSTRUCTION"
# 			}
# 		}
# 	}
# 	using = tooltip_ws
# }
