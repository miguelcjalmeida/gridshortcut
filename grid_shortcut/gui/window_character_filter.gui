types Filters {
	type filter_item = hbox {
		spacing = 10
		margin_bottom = 10

		text_single = {
			layoutpolicy_horizontal = expanding
			text = "[CharacterListFilter.GetName]"
			default_format = "#medium"
			autoresize = no
			align = nobaseline
		}

		expand = {}

		dropDown = {
			datamodel = "[CharacterListFilter.GetOptions]"
			onselectionchanged = "[CharacterListFilter.SetCurrentFilterFromIndex]"
			selectedindex = "[CharacterListFilter.GetCurrentFilterIndex]"
			size = { 200 32 }

			active_item = {
				widget = {
					alwaystransparent = no
					size = { 200 32 }

					button_drop = {
						size = { 200 32 }
						button_trigger = none
						tooltip = "CHARACTER_FILTER_TOOLTIP"

						text_single = {
							size = { 100% 100% }
							text = "[CharacterListFilterOption.GetName]"
							margin = { 15 0 }
							margin_right = 30
							align = nobaseline
							autoresize = no
						}
					}
				}
			}

			item = {
				widget = {
					alwaystransparent = no
					size = { 200 32 }

					button_dropdown = {
						size = { 200 32 }
						button_trigger = none
						tooltip = "CHARACTER_FILTER_TOOLTIP"

						text_single = {
							size = { 100% 100% }
							text = "[CharacterListFilterOption.GetName]"
							margin = { 10 0 }
							align = nobaseline
							autoresize = no
						}
					}
				}
			}

			list = {
				scrollarea = {
					position = { 5 32 }
					maximumsize = { 200 250 }
					autoresizescrollarea = yes
					scrollbarpolicy_horizontal = always_off

					using = Background_DropDown

					scrollwidget = {
						dynamicgridbox = {
							alwaystransparent = no
						}
					}

					scrollbar_vertical = {
						using = Scrollbar_Vertical
					}
				}
			}
		}
	}

	type vbox_filter_group = vbox {
		hbox = {
			layoutpolicy_horizontal = expanding

			button = {
				name = "show"
				alwaystransparent = no
				texture = "gfx/interface/buttons/button_tree_expand.dds"
				framesize = { 36 36 }
				size = { 18 18 }
				frame = "[Select_int32( CharacterListFilterCategory.IsExpanded, '(int32)2', '(int32)1' )]"
				onclick = "[CharacterListFilterCategory.OnExpand]"
				using = tooltip_ws
				tooltip = "EXPAND_FILTER"
				oversound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_pointer_over"
				clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_icon_select"
			}

			text_label_center = {
				layoutpolicy_horizontal = expanding
				margin_right = 36
				name = "label"
				align = center
				text = "[CharacterListFilterCategory.GetLabel]"
			}

		}


		vbox = {
			spacing = 5
			visible = "[CharacterListFilterCategory.IsExpanded]"
			layoutpolicy_horizontal = expanding

			margin_top = 5

			block "filters" {}
		}

	}

	type window_character_filter = window {
		name = "character_filter_window"
		visible = "[CharacterSelectionList.FiltersShown]"
		parentanchor = top|right
		position = { -710 30 }
		size = { 510 800 }
		movable = yes
		focuspolicy = click

		using = Window_Background_NoDecoration

		state = {
			name = _show
			using = Animation_FadeIn_Quick
		}

		state = {
			name = _hide
			using = Animation_FadeOut_Quick
		}

		vbox = {
			# using = Window_Margins
			margin = { 35 35 }
			spacing = 10

			header_pattern = {
				layoutpolicy_horizontal = expanding

				blockoverride "header_text"
				{
					text = "CHARACTER_LIST_FILTERS"
				}
				blockoverride "button_close"
				{
					onclick = "[CharacterSelectionList.OnToggleFilters]"
				}
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding

				blockoverride "scrollbox_content" {
					vbox = {
						layoutpolicy_horizontal = expanding

						hbox = {
							layoutpolicy_horizontal = expanding
							margin_top = 5
							spacing = 5

							icon = {
								size = { 30 30 }
								using = Master_Button_Modify_Texture

								blockoverride "master_color_frame" {
									frame = 4
								}

								texture = "gfx/interface/icons/flat_icons/search.dds"
							}

							editbox = {
								name = "text_filter"
								layoutpolicy_horizontal = expanding
								minimumsize = { 0 36 }
								margin = { 5 0 }
								autoresize = no
								alwaystransparent = no
								focuspolicy = click
								ontextedited = "[CharacterSelectionList.SetPattern]"
								oneditingfinished = "[CharacterSelectionList.FinishEdit]"
								tooltip = "CHARACTER_LIST_TEXT_FILTER_TOOLTIP"
								default_format = "#medium"

								background =  {
									using = Background_Area_Border
								}
							}

							button_icon = {
								name = "cross"
								texture = "gfx/interface/icons/flat_icons/window_close.dds"
								onclick = "[CharacterSelectionList.ClearPattern]"
								visible = "[CharacterSelectionList.HasTextInEdit]"
								tooltip = "CHARACTER_LIST_CLEAR"
							}
						}

						vbox = {
							datamodel = "[CharacterSelectionList.GetMatchedPatterns]"
							layoutpolicy_horizontal = expanding

							text_single = {
								name = "label"
								visible = "[DataModelHasItems(CharacterSelectionList.GetMatchedPatterns)]"
								layoutpolicy_horizontal = expanding
								minimumsize = { 0 30 }

								align = center
								text = "CHARACTER_LIST_TEXT_FILTER_TITLE"

								background = {
									using = Background_Area
									margin = { 4 4 }
								}
							}

							expand = {
								minimumsize = { 0 5 }
							}

							item = {
								hbox = {
									layoutpolicy_horizontal = expanding

									background = {
										using = Background_Area_Dark
									}

									button_standard_list = {
										name = "drop_filters"
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding
										minimumsize = { 0 50 }
										default_format = "#low"
										onclick = "[PatternItem.OnClick]"
										onclick = "[CharacterSelectionList.ClearPattern]"
										onclick = "[CharacterSelectionList.ApplyFiltersSort]"

										hbox = {
											margin_left = 10
											button_icon = {
												name = "cross"
												alwaystransparent = yes
												visible = "[PatternItem.IsSelected]"
												texture = "gfx/interface/icons/flat_icons/window_close.dds"
												size = {16 16}
											}
											hbox = {
												visible = "[PatternItem.IsName]"

												layoutpolicy_horizontal = expanding
												margin = { 10 0 }

												text_single = {
													layoutpolicy_horizontal = expanding
													text = "CHARACTER_LIST_TEXT_FILTER_MATCH_NAME"
													align = nobaseline
												}

												text_single = {
													text = "[PatternItem.GetType]"
													align = nobaseline
												}

												tooltip = "CHARACTER_LIST_FILTER_NAME_TT"
											}

											hbox = {
												datacontext = "[PatternItem.GetTrait]"
												datacontext = "[GetNullCharacter]"
												visible = "[PatternItem.IsTrait]"
												layoutpolicy_horizontal = expanding
												margin = { 10 0 }
												margin_left = 5
												spacing = 5

												icon = {
													size = { 45 45 }
													texture = "[PatternItem.GetTrait.GetIcon(GetNullCharacter)]"
												}

												text_single = {
													layoutpolicy_horizontal = expanding
													text = "[PatternItem.GetTrait.GetNameNoTooltip(GetNullCharacter)]"
												}

												text_single = {
													text = "[PatternItem.GetType]"
												}

												tooltipwidget = character_trait_tooltip
											}

											hbox = {
												datacontext = "[PatternItem.GetFaith]"
												visible = "[PatternItem.IsFaith]"
												layoutpolicy_horizontal = expanding
												margin = { 10 0 }
												margin_left = 5
												spacing = 5

												icon = {
													size = { 45 45 }

													texture = "[PatternItem.GetFaith.GetIcon]"
												}

												text_single = {
													layoutpolicy_horizontal = expanding
													text = "[PatternItem.GetFaith.GetNameNoTooltip]"
												}

												text_single = {
													text = "[PatternItem.GetType]"
												}

												tooltipwidget = {
													faith_tooltip = {}
												}
											}

											hbox = {
												datacontext = "[PatternItem.GetHouse]"
												visible = "[PatternItem.IsHouse]"
												layoutpolicy_horizontal = expanding
												margin = { 10 0 }
												margin_left = 5
												spacing = 5

												coa_house_tiny = {
													blockoverride "coa_button"
													{
														onclick = "[DefaultOnHouseCoatOfArmsClick(DynastyHouse.GetID)]"
													}
												}

												text_single = {
													layoutpolicy_horizontal = expanding
													text = "[PatternItem.GetHouse.GetBaseNameNoTooltip]"
													align = nobaseline
												}

												text_single = {
													text = "[PatternItem.GetType]"
													align = nobaseline
												}

												tooltipwidget = {
													using = dynasty_house_tooltip
												}
											}

											hbox = {
												datacontext = "[PatternItem.GetDynasty]"
												visible = "[PatternItem.IsDynasty]"
												layoutpolicy_horizontal = expanding
												margin = { 10 0 }
												margin_left = 5
												spacing = 5

												coa_dynasty_tiny = {
													blockoverride "coa_button"
													{
														onclick = "[DefaultOnDynastyCoatOfArmsClick(Dynasty.GetID)]"
													}
												}
												text_single = {
													layoutpolicy_horizontal = expanding
													text = "[PatternItem.GetDynasty.GetBaseNameNoTooltip]"
													align = nobaseline
												}
												text_single = {
													text = "[PatternItem.GetType]"
													align = nobaseline
												}
												tooltipwidget = {
													using = DynastyTooltip
												}
											}

											hbox = {
												layoutpolicy_horizontal = expanding
												margin = { 10 0 }
												visible = "[PatternItem.IsCulture]"
												datacontext = "[PatternItem.GetCulture]"
												spacing = 5

												text_single = {
													layoutpolicy_horizontal = expanding
													text = "[PatternItem.GetCulture.GetNameNoTooltip]"
													align = nobaseline
												}

												text_single = {
													text = "[PatternItem.GetType]"
													align = nobaseline
												}

												tooltipwidget = {
													culture_tooltip = {}
												}
											}

											hbox = {
												layoutpolicy_horizontal = expanding
												margin = { 10 0 }
												visible = "[PatternItem.IsCultureGroup]"
												spacing = 5

												text_single = {
													layoutpolicy_horizontal = expanding
													text = "[PatternItem.GetCultureGroup.GetName]"
												}
												text_single = {
													text = "[PatternItem.GetType]"
												}
												tooltip = "CHARACTER_LIST_CULTURE_GROUP_TT"
											}

											hbox = {
												layoutpolicy_horizontal = expanding
												margin = { 10 0 }
												visible = "[PatternItem.IsReligion]"
												datacontext = "[PatternItem.GetReligion]"
												spacing = 5

												text_single = {
													layoutpolicy_horizontal = expanding
													text = "[PatternItem.GetReligion.GetNameNoTooltip]"
												}

												text_single = {
													text = "[PatternItem.GetType]"
												}
												tooltipwidget = {
													using = religion_tooltip
												}
											}
										}
									}
								}
							}
						}

						expand = {
							minimumsize = { 0 10 }
						}

						vbox = {
							visible = "[Not(CharacterSelectionList.IsSuggesting)]"
							layoutpolicy_horizontal = expanding
							block "addition_filter" {}
						}
					}
				}
			}

			hbox = {
				layoutpolicy_horizontal = growing
				margin = { 15 15 }

				button_standard = {
					shortcut = "character_filter_reset"
					name = "drop_filters"
					text = "CHARACTER_RESET_FILTERS"
					focuspolicy = click
					onclick = "[CharacterSelectionList.OnResetFilters]"
				}
			}
		}
	}
}
