window = {
	name = "modify_vassal_contract_interaction_window"
	datacontext = "[ModifyVassalContractInteractionWindow.GetCharacterInteractionConfirmationWindow]"
	datacontext = "[ModifyVassalContractInteractionWindow.GetContractPreview]"
	datacontext = "[CharacterInteractionConfirmationWindow.GetRecipient]"
	parentanchor = center
	widgetanchor = top|hcenter
	position = { 270 -400 }
	size = { 600 700 } # Doesn't do much cause of the set_parent_size_to_minimum below

	layer = middle

	using = Window_Background
	using = Window_Decoration

	vbox = {
		name = "window_content"
		layoutpolicy_vertical = expanding
		set_parent_size_to_minimum = yes
		minimumsize = { 0 700 }

		using = Window_Margins

		header_pattern = {
			layoutpolicy_horizontal = expanding

			blockoverride "header_text"
			{
				text = "FEUDAL_CONTRACT"
			}

			blockoverride "button_close"
			{
				onclick = "[ModifyVassalContractInteractionWindow.Close]"
			}
		}

		hbox = {
			layoutpolicy_vertical = expanding
			margin_bottom = 10
			margin_top = -5

			background = {
				texture = "gfx/interface/illustrations/event_scenes/study.dds"
				alpha = 0.7

				fittype = end

				modify_texture = {
					texture = "gfx/interface/tiles/stretch_bottom_fade.dds"
					blend_mode = alphamultiply
				}
			}

			vbox = {
				name = "obligation_level_negotiation"
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				spacing = 10

				vbox = {
					name = "paper_contract"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					using = Background_Letter
					margin = { 20 20 }
					spacing = 5

					vbox = {
						name = "major_line_tree_levels"
						layoutpolicy_horizontal = expanding

						spacing = 10

						datamodel = "[ModifyVassalContractInteractionWindow.AccessObligationLevelLineTrees]"

						item = {
							vbox = {
								layoutpolicy_vertical = expanding
								layoutpolicy_horizontal = expanding

								datacontext = "[ObligationLevelLineTree.GetContainerData]"

								visible = "[ObligationContainerData.ShouldShow( ModifyVassalContractInteractionWindow.GetContractPreview )]"

								spacing = 10

								text_single = {
									text = "[ObligationContainerData.GetName] [ObligationContainerData.GetIcon]"
									using = Font_Size_Medium
									default_format = "#light_background"
								}

								container = {
									layoutpolicy_vertical = expanding

									name = "obligation_level_item_line_area" # Name used in code do not change

									datamodel = "[ObligationLevelLineTree.AccessItems]"

									item = {
										widget = {
											datacontext = "[ObligationLevelLineItem.AccessItem]"
											size = { 120 83 }
											position = "[ObligationLevelLineTree.GetItemPosition( ModifyVassalContractInteractionWindowObligationLevelOption.Self )]"

											container = {
												parentanchor = center

												widget = {
													name = "top_pin"
													visible = "[ObligationLevelLineItem.SetupTopWidget( PdxGuiWidget.Self )]"
												}

												widget = {
													name = "bottom_pin"
													visible = "[ObligationLevelLineItem.SetupBottomWidget( PdxGuiWidget.Self )]"
												}
											}

											button_letter = {
												size = { 100 80 }

												text_single = {
													text = "[ModifyVassalContractInteractionWindowObligationLevelOption.GetName]"
													visible = "[Not(ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected)]"
													default_format = "#light_background"
													parentanchor = center
													position = {0 -3 }
												}

												text_single = {
													text = "[ModifyVassalContractInteractionWindowObligationLevelOption.GetName]"
													visible = "[ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected]"
													default_format = "#high"
													parentanchor = center
													position = {0 -3 }
												}

												tooltip = "[ModifyVassalContractInteractionWindowObligationLevelOption.GetTooltip]"

												onclick = "[ModifyVassalContractInteractionWindowObligationLevelOption.Select]"
												down = "[ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected]"
												enabled = "[ModifyVassalContractInteractionWindowObligationLevelOption.IsEnabled]"
												using = tooltip_above

												background = {
													using = Background_Area_Dark
													visible = "[ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected]"
												}

												icon = {
													parentanchor = top|hcenter
													position = { 0 -5 }
													texture = "gfx/interface/buttons/button_tree_expand.dds"
													framesize = { 36 36 }
													size = { 24 24 }
													frame = 2
													tintcolor = { 0.4 0.4 0.5 0.7 }
													visible = "[ModifyVassalContractInteractionWindowObligationLevelOption.IsCurrent]"

													using = Mask_Rough_Edges
												}
											}
										}
									}
								}
							}
						}
					}

					vbox = {
						name = "minor_list_levels_radio_buttons"
						datamodel = "[ModifyVassalContractInteractionWindow.AccessObligationLevelRadioButtons]"

						background = {
							using = Background_Area_With_Header
							alpha = 0.75
							margin_left = 20
							margin_right = 20
							margin_bottom = 0
							margin_top = 2
						}

						item = {
							vbox = {
								datacontext = "[ObligationLevelRadioButtons.GetContainerData]"

								visible = "[ObligationContainerData.ShouldShow( ModifyVassalContractInteractionWindow.GetContractPreview )]"

								text_single = {
									text = "[ObligationContainerData.GetName]"
									using = Font_Size_Medium
									default_format = "#light_background"
								}

								hbox = {
									datamodel = "[ObligationLevelRadioButtons.Access]"
									spacing = 20
									margin = { 10 12 }
									item = {
										hbox = {
											button_radio = {
												size = { 30 30 }
												frame = "[BoolTo1And2( ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected )]"
												onclick = "[ModifyVassalContractInteractionWindowObligationLevelOption.Select]"
												visible = "[ModifyVassalContractInteractionWindowObligationLevelOption.IsEnabled]"
											}

											button_radio = {
												size = { 30 30 }
												frame = "[BoolTo1And2( ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected )]"
												onclick = "[ModifyVassalContractInteractionWindowObligationLevelOption.Select]"
												visible = "[Not(ModifyVassalContractInteractionWindowObligationLevelOption.IsEnabled)]"
												enabled = "[ModifyVassalContractInteractionWindowObligationLevelOption.IsEnabled]"

												modify_texture = {
													texture = "gfx/interface/tiles/alpha_white.dds"
													blend_mode = overlay
													alpha = 0.3
												}
											}

											text_single = {
												margin_left = 5
												text = "[ModifyVassalContractInteractionWindowObligationLevelOption.GetName]"
												default_format = "#light_background"
												align = nobaseline
											}

											expand = {}

											tooltip = "[ModifyVassalContractInteractionWindowObligationLevelOption.GetTooltip]"
										}
									}
								}
							}
						}
					}

					dynamicgridbox = {
						name = "minor_list_levels_checkboxes"
						flipdirection = yes
						datamodel_wrap = 3

						datamodel = "[ModifyVassalContractInteractionWindow.AccessObligationLevelCheckboxes]"

						item = {
							widget = {
								datacontext = "[ObligationLevelCheckbox.GetContainerData]"

								background = {
									using = Background_Area_With_Header
									alpha = 0.75
								}

								visible = "[ObligationContainerData.ShouldShow( ModifyVassalContractInteractionWindow.GetContractPreview )]"

								size = { 200 65 }

								vbox = {
									margin_left = 10
									spacing = 2

									text_single = {
										layoutpolicy_horizontal = expanding
										minimumsize = { 0 33 }
										text = "[ObligationContainerData.GetName]"
										using = Font_Size_Medium
										default_format = "#light_background"
									}

									hbox = {
										layoutpolicy_horizontal = expanding
										alwaystransparent = no
										spacing = 5

										datacontext = "[ObligationLevelCheckbox.GetLevel( '(int32)1' )]" # First one is always no effect/disabled option

										button_checkbox = {
											checked = "[ModifyVassalContractInteractionWindowObligationLevelOption.IsSelected]"
											enabled = "[ModifyVassalContractInteractionWindowObligationLevelOption.IsEnabled]"

											# Order dependent, first select the unselected level then set it as the new selected one
											onclick = "[ObligationLevelCheckbox.AccessLevel( ObligationLevelCheckbox.GetUnselectedLevelIndex ).Select]"
											onclick = "[ObligationLevelCheckbox.ToggleSelection]"
										}

										text_single = {
											text = "[ModifyVassalContractInteractionWindowObligationLevelOption.GetName]"
											default_format = "#light_background"
											align = nobaseline
										}

										expand = {}

										tooltip = "[ModifyVassalContractInteractionWindowObligationLevelOption.GetTooltip]"
									}

									expand = {}
								}
							}
						}
					}

					hbox = {
						layoutpolicy_horizontal = expanding
						spacing = 5

						widget = {
							datacontext = "[VassalContract.GetLiege]"

							size = { 80 80 }

							icon = {
								name = "sigil_bg"
								size = { 80 80 }
								texture = "gfx/interface/event_window/sigil_bg.dds"
								alwaystransparent = yes
								parentanchor = center
							}

							icon = {
								name = "sigil"
								visible = "[Character.HasSealCoA]"
								size = { 56 56 }
								gfxtype = coatofarmsgfx
								shaderfile = "gfx/FX/gui_coatofarms.shader"
								effectname = PdxGuiSeal
								alwaystransparent = yes
								datacontext = "[Character.GetSealCoA]"
								coat_of_arms_slot = "[CoatOfArms.GetSlot('(int32)88','(int32)88')]"
								coat_of_arms = "[CoatOfArms.GetTexture('(int32)88','(int32)88')]"
								coat_of_arms_mask = "gfx/interface/event_window/sigil_center.dds"
								parentanchor = center
							}

							icon = {
								name = "sigil_lowborn"
								visible = "[Not( Character.HasSealCoA )]"
								size = { 34 34 }
								texture = "gfx/interface/event_window/sigil_center_lowborn.dds"
								alwaystransparent = yes
								parentanchor = center
							}

						}

						expand = {}

						text_single = {
							name = "liege_signature"
							max_width = 430
							align = left
							layoutpolicy_horizontal = expanding
							default_format = "#light_background"

							text = "CONTRACT_LIEGE_SIGNATURE"
							using = Font_Type_Flavor
							using = Font_Size_Medium
							format_override = { high light_background }
						}

						widget = {
							datacontext = "[VassalContract.GetVassal]"

							size = { 80 80 }

							icon = {
								name = "sigil_bg"
								size = { 80 80 }
								texture = "gfx/interface/event_window/sigil_bg.dds"
								alwaystransparent = yes
								parentanchor = center
							}

							icon = {
								name = "sigil"
								visible = "[Character.HasSealCoA]"
								size = { 56 56 }
								gfxtype = coatofarmsgfx
								shaderfile = "gfx/FX/gui_coatofarms.shader"
								effectname = PdxGuiSeal
								alwaystransparent = yes
								datacontext = "[Character.GetSealCoA]"
								coat_of_arms_slot = "[CoatOfArms.GetSlot('(int32)88','(int32)88')]"
								coat_of_arms = "[CoatOfArms.GetTexture('(int32)88','(int32)88')]"
								coat_of_arms_mask = "gfx/interface/event_window/sigil_center.dds"
								parentanchor = center
							}

							icon = {
								name = "sigil_lowborn"
								visible = "[Not( Character.HasSealCoA )]"
								size = { 34 34 }
								texture = "gfx/interface/event_window/sigil_center_lowborn.dds"
								alwaystransparent = yes
								parentanchor = center
							}

						}

						expand = {}

						text_single = {
							name = "vassal_signature"
							max_width = 430
							align = left
							layoutpolicy_horizontal = expanding
							default_format = "#light_background"

							text = "CONTRACT_VASSAL_SIGNATURE"
							using = Font_Type_Flavor
							using = Font_Size_Medium
							format_override = { high light_background }
						}
					}
				}

				button_standard = {
					name = "reset_button"
					onclick = "[ModifyVassalContractInteractionWindow.ResetToCurrent]"
					enabled = "[Not( ModifyVassalContractInteractionWindow.IsPreviewSameAsCurrent )]"
					text = "RESET_CONTRACT_CHANGES"
					using = tooltip_above
				}
			}

			vbox = {
				spacing = 10
				layoutpolicy_vertical = expanding
				margin = { 10 0 }
				margin_top = 5

				hbox = {
					margin_right = 10
					layoutpolicy_horizontal = expanding
					datacontext = "[VassalContract.GetVassal]"
					background = {
						using = Background_Area
					}

					portrait_head = {
						blockoverride "opinion_box" {}
					}

					expand = {}

					text_multi = {
						text = "VASSAL_CONTRACT_VASSAL_TITLE"
						using = Font_Size_Medium
						using = Font_Type_Flavor
						align = center
						autoresize = yes
						maximumsize = { 300 -1 }
					}

					expand = {}

					coa_realm_medium_crown = {}
				}

				hbox = {
					visible = "[CharacterInteractionConfirmationWindow.GetEffectsDescription.HasAnyAcceptEffect]"
					layoutpolicy_horizontal = expanding
					margin = { 10 0 }
					
					text_label_left = {
						text = CONTRACT_EFFECTS_HEADER
					}
					expand = {}
				}

				vbox_character_interaction_effects_simple = {
					visible = "[CharacterInteractionConfirmationWindow.GetEffectsDescription.HasAnyAcceptEffect]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					datacontext = "[CharacterInteractionConfirmationWindow.GetEffectsDescription]"
				}

				vbox = {
					visible = "[Not( CharacterInteractionConfirmationWindow.GetEffectsDescription.HasAnyAcceptEffect )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					
					text_single = {
						visible = "[Not( CharacterInteractionConfirmationWindow.GetEffectsDescription.HasAnyAcceptEffect )]"
						text = "VASSAL_CONTRACT_OBLIGATION_NO_EFFECT"
						using = Font_Size_Medium
					}
				}

				vbox = {
					spacing = 10

					vbox = {
						name = "tax_levy_opinion_info"
						layoutpolicy_horizontal = expanding
						spacing = 15
						margin_top = 10

						hbox = {
							layoutpolicy_horizontal = expanding
							spacing = 40

							vbox = {
								spacing = 5

								text_label_center = {
									text = "VASSAL_CONTRACT_OBLIGATIONS_TITLE"
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 5

									highlight_icon = {
										size = { 25 25 }
										texture = "gfx/interface/icons/icon_gold.dds"
									}

									progressbar_standard = {
										size = { 90 25 }
										value = "[FixedPointToProgressbarValue(VassalContract.GetTaxRatioForLiege)]"

										text_single = {
											parentanchor = center
											position = { 0 -2 }
											text = "[ModifyVassalContractInteractionWindow.GetContractPreviewCachedTax|=1]"
											default_format = "#high"
										}

										tooltipwidget = {
											my_realm_window_contribution_tooltip = {
												datacontext = "[ModifyVassalContractInteractionWindow.GetContractPreviewTaxBreakdown]"
												blockoverride "levy_info_visible"
												{
													visible = no
												}
												blockoverride "contribution_tooltip_header"
												{
													text = "[SelectLocalization(VassalContract.GetVassal.IsLocalPlayer, 'MRW_TT_TAXES_TO_MY_LIEGE', 'MRW_TT_TAXES_TO_ME')]"
												}
											}
										}
										using = tooltip_ws
									}

									expand = {}

								}
							}

							expand = {}

							vbox = {
								spacing = 5

								text_label_center = {
									text = "VASSAL_CONTRACT_OBLIGATIONS_TITLE_LEVIES"
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									spacing = 5

									expand = {}

									highlight_icon = {
										size = { 25 25 }
										texture = "gfx/interface/icons/icon_soldier.dds"
									}

									progressbar_standard = {
										size = { 90 25 }
										value = "[FixedPointToProgressbarValue(VassalContract.GetLevyRatioForLiege)]"

										text_single = {
											parentanchor = center
											position = { 0 -2 }
											text = "[ModifyVassalContractInteractionWindow.GetContractPreviewCachedLeviesFormatted]"
											default_format = "#high"
										}

										tooltipwidget = {
											my_realm_window_contribution_tooltip = {
												datacontext = "[ModifyVassalContractInteractionWindow.GetContractPreviewLeviesBreakdown]"
												blockoverride "tax_info_visible"
												{
													visible = no
												}
												blockoverride "contribution_tooltip_header"
												{
													text = "[SelectLocalization(VassalContract.GetVassal.IsLocalPlayer, 'MRW_TT_LEVIES_TO_MY_LIEGE', 'MRW_TT_LEVIES_TO_ME')]"
												}
											}
										}
										using = tooltip_ws
									}
								}
							}
						}
					}
				}

				expand = {}

				vbox = {
					layoutpolicy_horizontal = expanding

					text_single = {
						datacontext = "[ModifyVassalContractInteractionWindow.GetContractPreviewOpinionBreakdown]"

						visible = "[Not(VassalContract.GetVassal.IsLocalPlayer)]"
						text = "VASSAL_CONTRACT_OPINION_MODIFICATION"
						using = Font_Size_Medium

						tooltip_enabled = "[ValueBreakdown.HasTooltip]"

						tooltipwidget = {
							widget_value_breakdown_tooltip = {}
						}
					}

					## Options
					vbox_interaction_options = {
						name = "tutorial_highlight_modify_contract_hook_button"
						visible = "[CharacterInteractionConfirmationWindow.HasOptions]"
					}

					hbox = {
						name = "change_only_once_text"
						visible = "[ObjectsEqual( GetPlayer, VassalContract.GetLiege )]"

						text_single = {
							text = "VASSAL_CONTRACT_OBLIGATION_ONLY_ONCE"
						}
					}
				}

				button_primary = {
					name = "send_offer_button"
					size = { 350 45 }

					text = "[CharacterInteractionConfirmationWindow.GetSendName]"
					default_format = "#high"
					enabled = "[CharacterInteractionConfirmationWindow.CanSend]"
					onclick = "[ModifyVassalContractInteractionWindow.Send]"
					tooltip = "[CharacterInteractionConfirmationWindow.GetCanSendDescription]"
					clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_advance"
				}
			}
		}
	}
}
